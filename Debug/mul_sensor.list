
mul_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000743c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080075e0  080075e0  000175e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077b8  080077b8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080077b8  080077b8  000177b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077c0  080077c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077c0  080077c0  000177c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077c4  080077c4  000177c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080077c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000074  0800783c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  0800783c  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001067f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000273c  00000000  00000000  00030723  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f18  00000000  00000000  00032e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de0  00000000  00000000  00033d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017a71  00000000  00000000  00034b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c3db  00000000  00000000  0004c5c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000923ff  00000000  00000000  000589a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eada3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045c0  00000000  00000000  000eae20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080075c4 	.word	0x080075c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080075c4 	.word	0x080075c4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <bufclr>:
#include "stdio.h"
#include "string.h"


void bufclr (char *buf)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	int len = strlen (buf);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff f945 	bl	80001e0 <strlen>
 8000f56:	4603      	mov	r3, r0
 8000f58:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<len; i++) buf[i] = '\0';
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	e007      	b.n	8000f70 <bufclr+0x28>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbf3      	blt.n	8000f60 <bufclr+0x18>
}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <ESP_Init>:


void ESP_Init (char *SSID, char *PASSWD)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b096      	sub	sp, #88	; 0x58
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 8000f8a:	f000 f915 	bl	80011b8 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 8000f8e:	4823      	ldr	r0, [pc, #140]	; (800101c <ESP_Init+0x9c>)
 8000f90:	f000 f9dc 	bl	800134c <Uart_sendstring>
	HAL_Delay(1000);
 8000f94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f98:	f001 fc06 	bl	80027a8 <HAL_Delay>

	Uart_flush();
 8000f9c:	f000 f954 	bl	8001248 <Uart_flush>

	/********* AT **********/
	Uart_sendstring("AT\r\n");
 8000fa0:	481f      	ldr	r0, [pc, #124]	; (8001020 <ESP_Init+0xa0>)
 8000fa2:	f000 f9d3 	bl	800134c <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 8000fa6:	bf00      	nop
 8000fa8:	481e      	ldr	r0, [pc, #120]	; (8001024 <ESP_Init+0xa4>)
 8000faa:	f000 f9fd 	bl	80013a8 <Wait_for>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0f9      	beq.n	8000fa8 <ESP_Init+0x28>

	Uart_flush();
 8000fb4:	f000 f948 	bl	8001248 <Uart_flush>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n");
 8000fb8:	481b      	ldr	r0, [pc, #108]	; (8001028 <ESP_Init+0xa8>)
 8000fba:	f000 f9c7 	bl	800134c <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000fbe:	bf00      	nop
 8000fc0:	4818      	ldr	r0, [pc, #96]	; (8001024 <ESP_Init+0xa4>)
 8000fc2:	f000 f9f1 	bl	80013a8 <Wait_for>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f9      	beq.n	8000fc0 <ESP_Init+0x40>

	Uart_flush();
 8000fcc:	f000 f93c 	bl	8001248 <Uart_flush>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000fd0:	f107 0008 	add.w	r0, r7, #8
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	4914      	ldr	r1, [pc, #80]	; (800102c <ESP_Init+0xac>)
 8000fda:	f004 fe85 	bl	8005ce8 <siprintf>
	Uart_sendstring(data);
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f9b2 	bl	800134c <Uart_sendstring>
	while (!(Wait_for("GOT IP\r\n")));
 8000fe8:	bf00      	nop
 8000fea:	4811      	ldr	r0, [pc, #68]	; (8001030 <ESP_Init+0xb0>)
 8000fec:	f000 f9dc 	bl	80013a8 <Wait_for>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0f9      	beq.n	8000fea <ESP_Init+0x6a>

	Uart_flush();
 8000ff6:	f000 f927 	bl	8001248 <Uart_flush>

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 8000ffa:	480e      	ldr	r0, [pc, #56]	; (8001034 <ESP_Init+0xb4>)
 8000ffc:	f000 f9a6 	bl	800134c <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8001000:	bf00      	nop
 8001002:	4808      	ldr	r0, [pc, #32]	; (8001024 <ESP_Init+0xa4>)
 8001004:	f000 f9d0 	bl	80013a8 <Wait_for>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0f9      	beq.n	8001002 <ESP_Init+0x82>

	Uart_flush();
 800100e:	f000 f91b 	bl	8001248 <Uart_flush>

}
 8001012:	bf00      	nop
 8001014:	3758      	adds	r7, #88	; 0x58
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	080075e0 	.word	0x080075e0
 8001020:	080075ec 	.word	0x080075ec
 8001024:	080075f4 	.word	0x080075f4
 8001028:	080075fc 	.word	0x080075fc
 800102c:	0800760c 	.word	0x0800760c
 8001030:	08007624 	.word	0x08007624
 8001034:	08007630 	.word	0x08007630

08001038 <ESP_Send_Multi>:
	Ringbuf_init();

}

void ESP_Send_Multi (char *APIkey, int numberoffileds, uint16_t value[])
{
 8001038:	b580      	push	{r7, lr}
 800103a:	f5ad 7d3e 	sub.w	sp, sp, #760	; 0x2f8
 800103e:	af00      	add	r7, sp, #0
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	6018      	str	r0, [r3, #0]
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	6019      	str	r1, [r3, #0]
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	601a      	str	r2, [r3, #0]
	char local_buf[500] = {0};
 8001050:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001054:	4618      	mov	r0, r3
 8001056:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800105a:	461a      	mov	r2, r3
 800105c:	2100      	movs	r1, #0
 800105e:	f004 fe3b 	bl	8005cd8 <memset>
	char local_buf2[30] = {0};
 8001062:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001066:	4618      	mov	r0, r3
 8001068:	231e      	movs	r3, #30
 800106a:	461a      	mov	r2, r3
 800106c:	2100      	movs	r1, #0
 800106e:	f004 fe33 	bl	8005cd8 <memset>
	char field_buf[200] = {0};
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4618      	mov	r0, r3
 8001078:	23c8      	movs	r3, #200	; 0xc8
 800107a:	461a      	mov	r2, r3
 800107c:	2100      	movs	r1, #0
 800107e:	f004 fe2b 	bl	8005cd8 <memset>


	Uart_sendstring("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n");
 8001082:	4844      	ldr	r0, [pc, #272]	; (8001194 <ESP_Send_Multi+0x15c>)
 8001084:	f000 f962 	bl	800134c <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8001088:	bf00      	nop
 800108a:	4843      	ldr	r0, [pc, #268]	; (8001198 <ESP_Send_Multi+0x160>)
 800108c:	f000 f98c 	bl	80013a8 <Wait_for>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f9      	beq.n	800108a <ESP_Send_Multi+0x52>

	sprintf (local_buf, "GET /update?api_key=%s", APIkey);
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	493e      	ldr	r1, [pc, #248]	; (800119c <ESP_Send_Multi+0x164>)
 80010a2:	f004 fe21 	bl	8005ce8 <siprintf>
	for (int i=0; i<numberoffileds; i++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 80010ac:	e01c      	b.n	80010e8 <ESP_Send_Multi+0xb0>
	{
		sprintf(field_buf, "&field%d=%u",i+1, value[i]);
 80010ae:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 80010b2:	1c59      	adds	r1, r3, #1
 80010b4:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	1d3a      	adds	r2, r7, #4
 80010bc:	6812      	ldr	r2, [r2, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	f107 0014 	add.w	r0, r7, #20
 80010c6:	460a      	mov	r2, r1
 80010c8:	4935      	ldr	r1, [pc, #212]	; (80011a0 <ESP_Send_Multi+0x168>)
 80010ca:	f004 fe0d 	bl	8005ce8 <siprintf>
		strcat (local_buf, field_buf);
 80010ce:	f107 0214 	add.w	r2, r7, #20
 80010d2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f004 fe25 	bl	8005d28 <strcat>
	for (int i=0; i<numberoffileds; i++)
 80010de:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 80010e2:	3301      	adds	r3, #1
 80010e4:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	dbdb      	blt.n	80010ae <ESP_Send_Multi+0x76>
	}

	strcat(local_buf, "\r\n");
 80010f6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f870 	bl	80001e0 <strlen>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001108:	4413      	add	r3, r2
 800110a:	4a26      	ldr	r2, [pc, #152]	; (80011a4 <ESP_Send_Multi+0x16c>)
 800110c:	8811      	ldrh	r1, [r2, #0]
 800110e:	7892      	ldrb	r2, [r2, #2]
 8001110:	8019      	strh	r1, [r3, #0]
 8001112:	709a      	strb	r2, [r3, #2]
	int len = strlen (local_buf);
 8001114:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff f861 	bl	80001e0 <strlen>
 800111e:	4603      	mov	r3, r0
 8001120:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0

	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 8001124:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001128:	f8d7 22f0 	ldr.w	r2, [r7, #752]	; 0x2f0
 800112c:	491e      	ldr	r1, [pc, #120]	; (80011a8 <ESP_Send_Multi+0x170>)
 800112e:	4618      	mov	r0, r3
 8001130:	f004 fdda 	bl	8005ce8 <siprintf>
	Uart_sendstring(local_buf2);
 8001134:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001138:	4618      	mov	r0, r3
 800113a:	f000 f907 	bl	800134c <Uart_sendstring>
	while (!(Wait_for(">")));
 800113e:	bf00      	nop
 8001140:	481a      	ldr	r0, [pc, #104]	; (80011ac <ESP_Send_Multi+0x174>)
 8001142:	f000 f931 	bl	80013a8 <Wait_for>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f9      	beq.n	8001140 <ESP_Send_Multi+0x108>

	Uart_sendstring (local_buf);
 800114c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f8fb 	bl	800134c <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n")));
 8001156:	bf00      	nop
 8001158:	4815      	ldr	r0, [pc, #84]	; (80011b0 <ESP_Send_Multi+0x178>)
 800115a:	f000 f925 	bl	80013a8 <Wait_for>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f9      	beq.n	8001158 <ESP_Send_Multi+0x120>

	while (!(Wait_for("CLOSED")));
 8001164:	bf00      	nop
 8001166:	4813      	ldr	r0, [pc, #76]	; (80011b4 <ESP_Send_Multi+0x17c>)
 8001168:	f000 f91e 	bl	80013a8 <Wait_for>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f9      	beq.n	8001166 <ESP_Send_Multi+0x12e>

	bufclr(local_buf);
 8001172:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fee6 	bl	8000f48 <bufclr>
	bufclr(local_buf2);
 800117c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fee1 	bl	8000f48 <bufclr>

	Ringbuf_init();
 8001186:	f000 f817 	bl	80011b8 <Ringbuf_init>

}
 800118a:	bf00      	nop
 800118c:	f507 773e 	add.w	r7, r7, #760	; 0x2f8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	08007640 	.word	0x08007640
 8001198:	080075f4 	.word	0x080075f4
 800119c:	080076b8 	.word	0x080076b8
 80011a0:	080076d0 	.word	0x080076d0
 80011a4:	080076dc 	.word	0x080076dc
 80011a8:	08007690 	.word	0x08007690
 80011ac:	080076a0 	.word	0x080076a0
 80011b0:	080076a4 	.word	0x080076a4
 80011b4:	080076b0 	.word	0x080076b0

080011b8 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80011bc:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <Ringbuf_init+0x3c>)
 80011be:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <Ringbuf_init+0x40>)
 80011c0:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <Ringbuf_init+0x44>)
 80011c4:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <Ringbuf_init+0x48>)
 80011c6:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <Ringbuf_init+0x4c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	695a      	ldr	r2, [r3, #20]
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <Ringbuf_init+0x4c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 0201 	orr.w	r2, r2, #1
 80011d6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80011d8:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <Ringbuf_init+0x4c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <Ringbuf_init+0x4c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0220 	orr.w	r2, r2, #32
 80011e6:	60da      	str	r2, [r3, #12]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000150 	.word	0x20000150
 80011f8:	20000090 	.word	0x20000090
 80011fc:	2000014c 	.word	0x2000014c
 8001200:	200000d8 	.word	0x200000d8
 8001204:	200001bc 	.word	0x200001bc

08001208 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	3301      	adds	r3, #1
 800121a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800121e:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	429a      	cmp	r2, r3
 8001228:	d007      	beq.n	800123a <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	79f9      	ldrb	r1, [r7, #7]
 8001232:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <Uart_flush>:

void Uart_flush (void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

	  _rx_buffer->head = _rx_buffer->tail;
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <Uart_flush+0x1c>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <Uart_flush+0x1c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001256:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000150 	.word	0x20000150

08001268 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <Uart_read+0x4c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <Uart_read+0x4c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	429a      	cmp	r2, r3
 800127c:	d102      	bne.n	8001284 <Uart_read+0x1c>
  {
    return -1;
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
 8001282:	e010      	b.n	80012a6 <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <Uart_read+0x4c>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <Uart_read+0x4c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	5cd3      	ldrb	r3, [r2, r3]
 8001290:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <Uart_read+0x4c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <Uart_read+0x4c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80012a2:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 80012a4:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000150 	.word	0x20000150

080012b8 <Uart_write>:

void Uart_write(int c)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	if (c>=0)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db21      	blt.n	800130a <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <Uart_write+0x60>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	3301      	adds	r3, #1
 80012ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012d2:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 80012d4:	bf00      	nop
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <Uart_write+0x60>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d0f9      	beq.n	80012d6 <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <Uart_write+0x60>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <Uart_write+0x60>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	b2c9      	uxtb	r1, r1
 80012f0:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <Uart_write+0x60>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <Uart_write+0x64>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <Uart_write+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001308:	60da      	str	r2, [r3, #12]
	}
}
 800130a:	bf00      	nop
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	2000014c 	.word	0x2000014c
 800131c:	200001bc 	.word	0x200001bc

08001320 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <IsDataAvailable+0x28>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	b29a      	uxth	r2, r3
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <IsDataAvailable+0x28>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	b29b      	uxth	r3, r3
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	b29b      	uxth	r3, r3
 8001338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000150 	.word	0x20000150

0800134c <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8001354:	e006      	b.n	8001364 <Uart_sendstring+0x18>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	1c5a      	adds	r2, r3, #1
 800135a:	607a      	str	r2, [r7, #4]
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ffaa 	bl	80012b8 <Uart_write>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1f4      	bne.n	8001356 <Uart_sendstring+0xa>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <Uart_peek>:

  while(*s) Uart_write(*s++);
}

int Uart_peek()
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <Uart_peek+0x30>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <Uart_peek+0x30>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001384:	429a      	cmp	r2, r3
 8001386:	d102      	bne.n	800138e <Uart_peek+0x1a>
  {
    return -1;
 8001388:	f04f 33ff 	mov.w	r3, #4294967295
 800138c:	e005      	b.n	800139a <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 800138e:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <Uart_peek+0x30>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <Uart_peek+0x30>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001398:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	20000150 	.word	0x20000150

080013a8 <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7fe ff13 	bl	80001e0 <strlen>
 80013ba:	4603      	mov	r3, r0
 80013bc:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 80013be:	bf00      	nop
 80013c0:	f7ff ffae 	bl	8001320 <IsDataAvailable>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0fa      	beq.n	80013c0 <Wait_for+0x18>
	if (Uart_peek() != string[so_far])
 80013ca:	f7ff ffd3 	bl	8001374 <Uart_peek>
 80013ce:	4601      	mov	r1, r0
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4299      	cmp	r1, r3
 80013da:	d01a      	beq.n	8001412 <Wait_for+0x6a>
	{
		 _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE ;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <Wait_for+0xa4>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	4b19      	ldr	r3, [pc, #100]	; (800144c <Wait_for+0xa4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80013ec:	645a      	str	r2, [r3, #68]	; 0x44
		goto again;
 80013ee:	e7e6      	b.n	80013be <Wait_for+0x16>

	}
	while (Uart_peek() == string [so_far])
	{
		so_far++;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3301      	adds	r3, #1
 80013f4:	60fb      	str	r3, [r7, #12]
		Uart_read();
 80013f6:	f7ff ff37 	bl	8001268 <Uart_read>
		if (so_far == len) return 1;
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d101      	bne.n	8001406 <Wait_for+0x5e>
 8001402:	2301      	movs	r3, #1
 8001404:	e01d      	b.n	8001442 <Wait_for+0x9a>
		while (!IsDataAvailable());
 8001406:	bf00      	nop
 8001408:	f7ff ff8a 	bl	8001320 <IsDataAvailable>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0fa      	beq.n	8001408 <Wait_for+0x60>
	while (Uart_peek() == string [so_far])
 8001412:	f7ff ffaf 	bl	8001374 <Uart_peek>
 8001416:	4601      	mov	r1, r0
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4299      	cmp	r1, r3
 8001422:	d0e5      	beq.n	80013f0 <Wait_for+0x48>
	}

	if (so_far != len)
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	429a      	cmp	r2, r3
 800142a:	d002      	beq.n	8001432 <Wait_for+0x8a>
	{
		so_far = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
		goto again;
 8001430:	e7c5      	b.n	80013be <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	429a      	cmp	r2, r3
 8001438:	d101      	bne.n	800143e <Wait_for+0x96>
 800143a:	2301      	movs	r3, #1
 800143c:	e001      	b.n	8001442 <Wait_for+0x9a>
	else return -1;
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000150 	.word	0x20000150

08001450 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f003 0320 	and.w	r3, r3, #32
 800146e:	2b00      	cmp	r3, #0
 8001470:	d013      	beq.n	800149a <Uart_isr+0x4a>
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	f003 0320 	and.w	r3, r3, #32
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00e      	beq.n	800149a <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <Uart_isr+0xac>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	4611      	mov	r1, r2
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff feb8 	bl	8001208 <store_char>
        return;
 8001498:	e02c      	b.n	80014f4 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d027      	beq.n	80014f4 <Uart_isr+0xa4>
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d022      	beq.n	80014f4 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <Uart_isr+0xb0>)
 80014b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014b2:	4b13      	ldr	r3, [pc, #76]	; (8001500 <Uart_isr+0xb0>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d108      	bne.n	80014cc <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014c8:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80014ca:	e013      	b.n	80014f4 <Uart_isr+0xa4>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <Uart_isr+0xb0>)
 80014ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d0:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <Uart_isr+0xb0>)
 80014d2:	5cd3      	ldrb	r3, [r2, r3]
 80014d4:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <Uart_isr+0xb0>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	3301      	adds	r3, #1
 80014dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014e0:	4a07      	ldr	r2, [pc, #28]	; (8001500 <Uart_isr+0xb0>)
 80014e2:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	7bba      	ldrb	r2, [r7, #14]
 80014f0:	605a      	str	r2, [r3, #4]
    	return;
 80014f2:	bf00      	nop
    }
}
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000150 	.word	0x20000150
 8001500:	200000d8 	.word	0x200000d8

08001504 <microDelay>:
float tCelsius = 0;
float tFahrenheit = 0;
float RH = 0;

void microDelay (uint32_t delay)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <microDelay+0x2c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2200      	movs	r2, #0
 8001512:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8001514:	bf00      	nop
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <microDelay+0x2c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	429a      	cmp	r2, r3
 8001520:	d8f9      	bhi.n	8001516 <microDelay+0x12>
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000280 	.word	0x20000280

08001534 <DHT22_Start>:

uint8_t DHT22_Start (void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 800153e:	463b      	mov	r3, r7
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT22_PIN;
 800154c:	2310      	movs	r3, #16
 800154e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8001550:	2301      	movs	r3, #1
 8001552:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as output
 800155c:	463b      	mov	r3, r7
 800155e:	4619      	mov	r1, r3
 8001560:	482a      	ldr	r0, [pc, #168]	; (800160c <DHT22_Start+0xd8>)
 8001562:	f002 fbd9 	bl	8003d18 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 8001566:	2200      	movs	r2, #0
 8001568:	2110      	movs	r1, #16
 800156a:	4828      	ldr	r0, [pc, #160]	; (800160c <DHT22_Start+0xd8>)
 800156c:	f002 fd6e 	bl	800404c <HAL_GPIO_WritePin>
  microDelay (1300);   // wait for 1300us
 8001570:	f240 5014 	movw	r0, #1300	; 0x514
 8001574:	f7ff ffc6 	bl	8001504 <microDelay>
  HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8001578:	2201      	movs	r2, #1
 800157a:	2110      	movs	r1, #16
 800157c:	4823      	ldr	r0, [pc, #140]	; (800160c <DHT22_Start+0xd8>)
 800157e:	f002 fd65 	bl	800404c <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8001582:	201e      	movs	r0, #30
 8001584:	f7ff ffbe 	bl	8001504 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 800158c:	2301      	movs	r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8001590:	463b      	mov	r3, r7
 8001592:	4619      	mov	r1, r3
 8001594:	481d      	ldr	r0, [pc, #116]	; (800160c <DHT22_Start+0xd8>)
 8001596:	f002 fbbf 	bl	8003d18 <HAL_GPIO_Init>
  microDelay (40);
 800159a:	2028      	movs	r0, #40	; 0x28
 800159c:	f7ff ffb2 	bl	8001504 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))
 80015a0:	2110      	movs	r1, #16
 80015a2:	481a      	ldr	r0, [pc, #104]	; (800160c <DHT22_Start+0xd8>)
 80015a4:	f002 fd3a 	bl	800401c <HAL_GPIO_ReadPin>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10b      	bne.n	80015c6 <DHT22_Start+0x92>
  {
    microDelay (80);
 80015ae:	2050      	movs	r0, #80	; 0x50
 80015b0:	f7ff ffa8 	bl	8001504 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;
 80015b4:	2110      	movs	r1, #16
 80015b6:	4815      	ldr	r0, [pc, #84]	; (800160c <DHT22_Start+0xd8>)
 80015b8:	f002 fd30 	bl	800401c <HAL_GPIO_ReadPin>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <DHT22_Start+0x92>
 80015c2:	2301      	movs	r3, #1
 80015c4:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 80015c6:	f001 f8e3 	bl	8002790 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <DHT22_Start+0xdc>)
 80015ce:	601a      	str	r2, [r3, #0]
  cMillis = HAL_GetTick();
 80015d0:	f001 f8de 	bl	8002790 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <DHT22_Start+0xe0>)
 80015d8:	601a      	str	r2, [r3, #0]
  while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80015da:	e004      	b.n	80015e6 <DHT22_Start+0xb2>
  {
    cMillis = HAL_GetTick();
 80015dc:	f001 f8d8 	bl	8002790 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <DHT22_Start+0xe0>)
 80015e4:	601a      	str	r2, [r3, #0]
  while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80015e6:	2110      	movs	r1, #16
 80015e8:	4808      	ldr	r0, [pc, #32]	; (800160c <DHT22_Start+0xd8>)
 80015ea:	f002 fd17 	bl	800401c <HAL_GPIO_ReadPin>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <DHT22_Start+0xce>
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <DHT22_Start+0xdc>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	1c9a      	adds	r2, r3, #2
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <DHT22_Start+0xe0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d8ec      	bhi.n	80015dc <DHT22_Start+0xa8>
  }
  return Response;
 8001602:	7dfb      	ldrb	r3, [r7, #23]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40020800 	.word	0x40020800
 8001610:	2000016c 	.word	0x2000016c
 8001614:	20000168 	.word	0x20000168

08001618 <DHT22_Read>:

uint8_t DHT22_Read (void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 800161e:	2300      	movs	r3, #0
 8001620:	71fb      	strb	r3, [r7, #7]
 8001622:	e063      	b.n	80016ec <DHT22_Read+0xd4>
  {
    pMillis = HAL_GetTick();
 8001624:	f001 f8b4 	bl	8002790 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	4b34      	ldr	r3, [pc, #208]	; (80016fc <DHT22_Read+0xe4>)
 800162c:	601a      	str	r2, [r3, #0]
    cMillis = HAL_GetTick();
 800162e:	f001 f8af 	bl	8002790 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	4b32      	ldr	r3, [pc, #200]	; (8001700 <DHT22_Read+0xe8>)
 8001636:	601a      	str	r2, [r3, #0]
    while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001638:	e004      	b.n	8001644 <DHT22_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 800163a:	f001 f8a9 	bl	8002790 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <DHT22_Read+0xe8>)
 8001642:	601a      	str	r2, [r3, #0]
    while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001644:	2110      	movs	r1, #16
 8001646:	482f      	ldr	r0, [pc, #188]	; (8001704 <DHT22_Read+0xec>)
 8001648:	f002 fce8 	bl	800401c <HAL_GPIO_ReadPin>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d106      	bne.n	8001660 <DHT22_Read+0x48>
 8001652:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <DHT22_Read+0xe4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	1c9a      	adds	r2, r3, #2
 8001658:	4b29      	ldr	r3, [pc, #164]	; (8001700 <DHT22_Read+0xe8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d8ec      	bhi.n	800163a <DHT22_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 8001660:	2028      	movs	r0, #40	; 0x28
 8001662:	f7ff ff4f 	bl	8001504 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8001666:	2110      	movs	r1, #16
 8001668:	4826      	ldr	r0, [pc, #152]	; (8001704 <DHT22_Read+0xec>)
 800166a:	f002 fcd7 	bl	800401c <HAL_GPIO_ReadPin>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10e      	bne.n	8001692 <DHT22_Read+0x7a>
      b&= ~(1<<(7-a));
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	f1c3 0307 	rsb	r3, r3, #7
 800167a:	2201      	movs	r2, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	b25b      	sxtb	r3, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	b25a      	sxtb	r2, r3
 8001686:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800168a:	4013      	ands	r3, r2
 800168c:	b25b      	sxtb	r3, r3
 800168e:	71bb      	strb	r3, [r7, #6]
 8001690:	e00b      	b.n	80016aa <DHT22_Read+0x92>
    else
      b|= (1<<(7-a));
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f1c3 0307 	rsb	r3, r3, #7
 8001698:	2201      	movs	r2, #1
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	b25a      	sxtb	r2, r3
 80016a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 80016aa:	f001 f871 	bl	8002790 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <DHT22_Read+0xe4>)
 80016b2:	601a      	str	r2, [r3, #0]
    cMillis = HAL_GetTick();
 80016b4:	f001 f86c 	bl	8002790 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <DHT22_Read+0xe8>)
 80016bc:	601a      	str	r2, [r3, #0]
    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80016be:	e004      	b.n	80016ca <DHT22_Read+0xb2>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 80016c0:	f001 f866 	bl	8002790 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <DHT22_Read+0xe8>)
 80016c8:	601a      	str	r2, [r3, #0]
    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80016ca:	2110      	movs	r1, #16
 80016cc:	480d      	ldr	r0, [pc, #52]	; (8001704 <DHT22_Read+0xec>)
 80016ce:	f002 fca5 	bl	800401c <HAL_GPIO_ReadPin>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <DHT22_Read+0xce>
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <DHT22_Read+0xe4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	1c9a      	adds	r2, r3, #2
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <DHT22_Read+0xe8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d8ec      	bhi.n	80016c0 <DHT22_Read+0xa8>
  for (a=0;a<8;a++)
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	3301      	adds	r3, #1
 80016ea:	71fb      	strb	r3, [r7, #7]
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	2b07      	cmp	r3, #7
 80016f0:	d998      	bls.n	8001624 <DHT22_Read+0xc>
    }
  }
  return b;
 80016f2:	79bb      	ldrb	r3, [r7, #6]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	2000016c 	.word	0x2000016c
 8001700:	20000168 	.word	0x20000168
 8001704:	40020800 	.word	0x40020800

08001708 <Read_DHT22>:


void Read_DHT22()
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
    if(DHT22_Start())
 800170c:	f7ff ff12 	bl	8001534 <DHT22_Start>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d07c      	beq.n	8001810 <Read_DHT22+0x108>
    {
      RH1 = DHT22_Read(); // First 8bits of humidity
 8001716:	f7ff ff7f 	bl	8001618 <DHT22_Read>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	4b3d      	ldr	r3, [pc, #244]	; (8001814 <Read_DHT22+0x10c>)
 8001720:	701a      	strb	r2, [r3, #0]
      RH2 = DHT22_Read(); // Second 8bits of Relative humidity
 8001722:	f7ff ff79 	bl	8001618 <DHT22_Read>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	4b3b      	ldr	r3, [pc, #236]	; (8001818 <Read_DHT22+0x110>)
 800172c:	701a      	strb	r2, [r3, #0]
      TC1 = DHT22_Read(); // First 8bits of Celsius
 800172e:	f7ff ff73 	bl	8001618 <DHT22_Read>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	4b39      	ldr	r3, [pc, #228]	; (800181c <Read_DHT22+0x114>)
 8001738:	701a      	strb	r2, [r3, #0]
      TC2 = DHT22_Read(); // Second 8bits of Celsius
 800173a:	f7ff ff6d 	bl	8001618 <DHT22_Read>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	4b37      	ldr	r3, [pc, #220]	; (8001820 <Read_DHT22+0x118>)
 8001744:	701a      	strb	r2, [r3, #0]
      SUM = DHT22_Read(); // Check sum
 8001746:	f7ff ff67 	bl	8001618 <DHT22_Read>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	4b35      	ldr	r3, [pc, #212]	; (8001824 <Read_DHT22+0x11c>)
 8001750:	701a      	strb	r2, [r3, #0]
      CHECK = RH1 + RH2 + TC1 + TC2;
 8001752:	4b30      	ldr	r3, [pc, #192]	; (8001814 <Read_DHT22+0x10c>)
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	4b30      	ldr	r3, [pc, #192]	; (8001818 <Read_DHT22+0x110>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4b2f      	ldr	r3, [pc, #188]	; (800181c <Read_DHT22+0x114>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <Read_DHT22+0x118>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	4413      	add	r3, r2
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <Read_DHT22+0x120>)
 8001770:	701a      	strb	r2, [r3, #0]
      if (CHECK == SUM)
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <Read_DHT22+0x120>)
 8001774:	781a      	ldrb	r2, [r3, #0]
 8001776:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <Read_DHT22+0x11c>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d148      	bne.n	8001810 <Read_DHT22+0x108>
      {
        if (TC1>127) // If TC1=10000000, negative temperature
 800177e:	4b27      	ldr	r3, [pc, #156]	; (800181c <Read_DHT22+0x114>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b25b      	sxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	da0f      	bge.n	80017a8 <Read_DHT22+0xa0>
        {
          tCelsius = (float)TC2/10*(-1);
 8001788:	4b25      	ldr	r3, [pc, #148]	; (8001820 <Read_DHT22+0x118>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	ee07 3a90 	vmov	s15, r3
 8001790:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001794:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001798:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800179c:	eef1 7a67 	vneg.f32	s15, s15
 80017a0:	4b22      	ldr	r3, [pc, #136]	; (800182c <Read_DHT22+0x124>)
 80017a2:	edc3 7a00 	vstr	s15, [r3]
 80017a6:	e010      	b.n	80017ca <Read_DHT22+0xc2>
        }
        else
        {
          tCelsius = (float)((TC1<<8)|TC2)/10;
 80017a8:	4b1c      	ldr	r3, [pc, #112]	; (800181c <Read_DHT22+0x114>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	021b      	lsls	r3, r3, #8
 80017ae:	4a1c      	ldr	r2, [pc, #112]	; (8001820 <Read_DHT22+0x118>)
 80017b0:	7812      	ldrb	r2, [r2, #0]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017bc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <Read_DHT22+0x124>)
 80017c6:	edc3 7a00 	vstr	s15, [r3]
        }
        tFahrenheit = tCelsius * 9/5 + 32;
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <Read_DHT22+0x124>)
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80017d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017d8:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80017dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017e0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001830 <Read_DHT22+0x128>
 80017e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <Read_DHT22+0x12c>)
 80017ea:	edc3 7a00 	vstr	s15, [r3]
        RH = (float) ((RH1<<8)|RH2)/10;
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <Read_DHT22+0x10c>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	4a08      	ldr	r2, [pc, #32]	; (8001818 <Read_DHT22+0x110>)
 80017f6:	7812      	ldrb	r2, [r2, #0]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	ee07 3a90 	vmov	s15, r3
 80017fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001802:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001806:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <Read_DHT22+0x130>)
 800180c:	edc3 7a00 	vstr	s15, [r3]
      }
    }
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000348 	.word	0x20000348
 8001818:	2000027c 	.word	0x2000027c
 800181c:	20000170 	.word	0x20000170
 8001820:	200001fc 	.word	0x200001fc
 8001824:	20000148 	.word	0x20000148
 8001828:	20000171 	.word	0x20000171
 800182c:	20000120 	.word	0x20000120
 8001830:	42000000 	.word	0x42000000
 8001834:	20000124 	.word	0x20000124
 8001838:	20000128 	.word	0x20000128

0800183c <adc_read>:
uint32_t khi_doc = 0;
uint32_t khi_CO = 0;
uint32_t khong_khi[2];

void adc_read()
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	  HAL_ADC_Start_DMA(&hadc1, khong_khi, 2);
 8001840:	2202      	movs	r2, #2
 8001842:	4906      	ldr	r1, [pc, #24]	; (800185c <adc_read+0x20>)
 8001844:	4806      	ldr	r0, [pc, #24]	; (8001860 <adc_read+0x24>)
 8001846:	f001 f955 	bl	8002af4 <HAL_ADC_Start_DMA>
	  HAL_Delay(10);
 800184a:	200a      	movs	r0, #10
 800184c:	f000 ffac 	bl	80027a8 <HAL_Delay>
	  HAL_ADC_Stop_DMA(&hadc1);
 8001850:	4803      	ldr	r0, [pc, #12]	; (8001860 <adc_read+0x24>)
 8001852:	f001 fa23 	bl	8002c9c <HAL_ADC_Stop_DMA>
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000300 	.word	0x20000300
 8001860:	20000174 	.word	0x20000174
 8001864:	00000000 	.word	0x00000000

08001868 <cl_khong_khi>:

void cl_khong_khi()
{
 8001868:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800186c:	b094      	sub	sp, #80	; 0x50
 800186e:	af00      	add	r7, sp, #0
	  adc_read();
 8001870:	f7ff ffe4 	bl	800183c <adc_read>
	  float adc_khi_doc;
	  adc_khi_doc = ((float)khong_khi[1] / 4095 * 3.3);
 8001874:	4b8e      	ldr	r3, [pc, #568]	; (8001ab0 <cl_khong_khi+0x248>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	ee07 3a90 	vmov	s15, r3
 800187c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001880:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001ab4 <cl_khong_khi+0x24c>
 8001884:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001888:	ee16 0a90 	vmov	r0, s13
 800188c:	f7fe fe64 	bl	8000558 <__aeabi_f2d>
 8001890:	a385      	add	r3, pc, #532	; (adr r3, 8001aa8 <cl_khong_khi+0x240>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	f7fe feb7 	bl	8000608 <__aeabi_dmul>
 800189a:	4603      	mov	r3, r0
 800189c:	460c      	mov	r4, r1
 800189e:	4618      	mov	r0, r3
 80018a0:	4621      	mov	r1, r4
 80018a2:	f7ff f981 	bl	8000ba8 <__aeabi_d2f>
 80018a6:	4603      	mov	r3, r0
 80018a8:	64fb      	str	r3, [r7, #76]	; 0x4c
	  float CORA = 0.00035;
 80018aa:	4b83      	ldr	r3, [pc, #524]	; (8001ab8 <cl_khong_khi+0x250>)
 80018ac:	64bb      	str	r3, [r7, #72]	; 0x48
	  float CORB = 0.02718;
 80018ae:	4b83      	ldr	r3, [pc, #524]	; (8001abc <cl_khong_khi+0x254>)
 80018b0:	647b      	str	r3, [r7, #68]	; 0x44
	  float CORC = 1.39538;
 80018b2:	4b83      	ldr	r3, [pc, #524]	; (8001ac0 <cl_khong_khi+0x258>)
 80018b4:	643b      	str	r3, [r7, #64]	; 0x40
	  float CORD = 0.0018; //tham so su phu thuoc nhiet do vs do am
 80018b6:	4b83      	ldr	r3, [pc, #524]	; (8001ac4 <cl_khong_khi+0x25c>)
 80018b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	  float tham_so_dc;
	  tham_so_dc = CORA * tCelsius * tCelsius - CORB * tCelsius + CORC - (RH-33.) * CORD;
 80018ba:	4b83      	ldr	r3, [pc, #524]	; (8001ac8 <cl_khong_khi+0x260>)
 80018bc:	ed93 7a00 	vldr	s14, [r3]
 80018c0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018c8:	4b7f      	ldr	r3, [pc, #508]	; (8001ac8 <cl_khong_khi+0x260>)
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018d2:	4b7d      	ldr	r3, [pc, #500]	; (8001ac8 <cl_khong_khi+0x260>)
 80018d4:	edd3 6a00 	vldr	s13, [r3]
 80018d8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018e4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80018e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ec:	ee17 0a90 	vmov	r0, s15
 80018f0:	f7fe fe32 	bl	8000558 <__aeabi_f2d>
 80018f4:	4604      	mov	r4, r0
 80018f6:	460d      	mov	r5, r1
 80018f8:	4b74      	ldr	r3, [pc, #464]	; (8001acc <cl_khong_khi+0x264>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fe2b 	bl	8000558 <__aeabi_f2d>
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	4b72      	ldr	r3, [pc, #456]	; (8001ad0 <cl_khong_khi+0x268>)
 8001908:	f7fe fcc6 	bl	8000298 <__aeabi_dsub>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4690      	mov	r8, r2
 8001912:	4699      	mov	r9, r3
 8001914:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001916:	f7fe fe1f 	bl	8000558 <__aeabi_f2d>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4640      	mov	r0, r8
 8001920:	4649      	mov	r1, r9
 8001922:	f7fe fe71 	bl	8000608 <__aeabi_dmul>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4620      	mov	r0, r4
 800192c:	4629      	mov	r1, r5
 800192e:	f7fe fcb3 	bl	8000298 <__aeabi_dsub>
 8001932:	4603      	mov	r3, r0
 8001934:	460c      	mov	r4, r1
 8001936:	4618      	mov	r0, r3
 8001938:	4621      	mov	r1, r4
 800193a:	f7ff f935 	bl	8000ba8 <__aeabi_d2f>
 800193e:	4603      	mov	r3, r0
 8001940:	63bb      	str	r3, [r7, #56]	; 0x38
	  float RLOAD = 150.0;// gia tri dien tro
 8001942:	4b64      	ldr	r3, [pc, #400]	; (8001ad4 <cl_khong_khi+0x26c>)
 8001944:	637b      	str	r3, [r7, #52]	; 0x34
	  float gt_dien_tro, gt_dien_tro_cs;
	  gt_dien_tro = adc_khi_doc * RLOAD;
 8001946:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800194a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800194e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001952:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	  gt_dien_tro_cs = gt_dien_tro / tham_so_dc;
 8001956:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800195a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800195e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001962:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	  float PARA = 116.6020682;
 8001966:	4b5c      	ldr	r3, [pc, #368]	; (8001ad8 <cl_khong_khi+0x270>)
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
	  float PARB = 2.769034857; //tham so tinh ppm tu dien tro cam bien
 800196a:	4b5c      	ldr	r3, [pc, #368]	; (8001adc <cl_khong_khi+0x274>)
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
	  float RZERO = 76.63; //dt chuan trong khi quyen
 800196e:	4b5c      	ldr	r3, [pc, #368]	; (8001ae0 <cl_khong_khi+0x278>)
 8001970:	623b      	str	r3, [r7, #32]
	  khi_doc = PARA * pow((gt_dien_tro_cs / RZERO), -PARB);
 8001972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001974:	f7fe fdf0 	bl	8000558 <__aeabi_f2d>
 8001978:	4604      	mov	r4, r0
 800197a:	460d      	mov	r5, r1
 800197c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001980:	edd7 7a08 	vldr	s15, [r7, #32]
 8001984:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001988:	ee16 0a90 	vmov	r0, s13
 800198c:	f7fe fde4 	bl	8000558 <__aeabi_f2d>
 8001990:	4680      	mov	r8, r0
 8001992:	4689      	mov	r9, r1
 8001994:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001998:	eef1 7a67 	vneg.f32	s15, s15
 800199c:	ee17 3a90 	vmov	r3, s15
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fdd9 	bl	8000558 <__aeabi_f2d>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	ec43 2b11 	vmov	d1, r2, r3
 80019ae:	ec49 8b10 	vmov	d0, r8, r9
 80019b2:	f004 fdaf 	bl	8006514 <pow>
 80019b6:	ec53 2b10 	vmov	r2, r3, d0
 80019ba:	4620      	mov	r0, r4
 80019bc:	4629      	mov	r1, r5
 80019be:	f7fe fe23 	bl	8000608 <__aeabi_dmul>
 80019c2:	4603      	mov	r3, r0
 80019c4:	460c      	mov	r4, r1
 80019c6:	4618      	mov	r0, r3
 80019c8:	4621      	mov	r1, r4
 80019ca:	f7ff f8cd 	bl	8000b68 <__aeabi_d2uiz>
 80019ce:	4602      	mov	r2, r0
 80019d0:	4b44      	ldr	r3, [pc, #272]	; (8001ae4 <cl_khong_khi+0x27c>)
 80019d2:	601a      	str	r2, [r3, #0]


	  float adc_khi_CO;
	  adc_khi_CO = ((float)khong_khi[0] / 4095 * 3.3);
 80019d4:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <cl_khong_khi+0x248>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	ee07 3a90 	vmov	s15, r3
 80019dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019e0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001ab4 <cl_khong_khi+0x24c>
 80019e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80019e8:	ee16 0a90 	vmov	r0, s13
 80019ec:	f7fe fdb4 	bl	8000558 <__aeabi_f2d>
 80019f0:	a32d      	add	r3, pc, #180	; (adr r3, 8001aa8 <cl_khong_khi+0x240>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe fe07 	bl	8000608 <__aeabi_dmul>
 80019fa:	4603      	mov	r3, r0
 80019fc:	460c      	mov	r4, r1
 80019fe:	4618      	mov	r0, r3
 8001a00:	4621      	mov	r1, r4
 8001a02:	f7ff f8d1 	bl	8000ba8 <__aeabi_d2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	61fb      	str	r3, [r7, #28]
	  float dt_RsRL;
	  dt_RsRL = (5 - adc_khi_CO) / adc_khi_CO;
 8001a0a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001a0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a12:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a16:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a1e:	edc7 7a06 	vstr	s15, [r7, #24]
	  float LOAD_RES = 10.0;
 8001a22:	4b31      	ldr	r3, [pc, #196]	; (8001ae8 <cl_khong_khi+0x280>)
 8001a24:	617b      	str	r3, [r7, #20]
	  float dt_Rs;
	  dt_Rs = LOAD_RES * dt_RsRL;
 8001a26:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a32:	edc7 7a04 	vstr	s15, [r7, #16]
	  float COEF_A0 = 100.0;
 8001a36:	4b2d      	ldr	r3, [pc, #180]	; (8001aec <cl_khong_khi+0x284>)
 8001a38:	60fb      	str	r3, [r7, #12]
	  float COEF_A1 = -1.513;
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <cl_khong_khi+0x288>)
 8001a3c:	60bb      	str	r3, [r7, #8]
	  float R0 = 9;
 8001a3e:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <cl_khong_khi+0x28c>)
 8001a40:	607b      	str	r3, [r7, #4]
	  khi_CO = COEF_A0 * pow(dt_Rs / R0, COEF_A1);
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f7fe fd88 	bl	8000558 <__aeabi_f2d>
 8001a48:	4604      	mov	r4, r0
 8001a4a:	460d      	mov	r5, r1
 8001a4c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a50:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a58:	ee16 0a90 	vmov	r0, s13
 8001a5c:	f7fe fd7c 	bl	8000558 <__aeabi_f2d>
 8001a60:	4680      	mov	r8, r0
 8001a62:	4689      	mov	r9, r1
 8001a64:	68b8      	ldr	r0, [r7, #8]
 8001a66:	f7fe fd77 	bl	8000558 <__aeabi_f2d>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	ec43 2b11 	vmov	d1, r2, r3
 8001a72:	ec49 8b10 	vmov	d0, r8, r9
 8001a76:	f004 fd4d 	bl	8006514 <pow>
 8001a7a:	ec53 2b10 	vmov	r2, r3, d0
 8001a7e:	4620      	mov	r0, r4
 8001a80:	4629      	mov	r1, r5
 8001a82:	f7fe fdc1 	bl	8000608 <__aeabi_dmul>
 8001a86:	4603      	mov	r3, r0
 8001a88:	460c      	mov	r4, r1
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	4621      	mov	r1, r4
 8001a8e:	f7ff f86b 	bl	8000b68 <__aeabi_d2uiz>
 8001a92:	4602      	mov	r2, r0
 8001a94:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <cl_khong_khi+0x290>)
 8001a96:	601a      	str	r2, [r3, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	3750      	adds	r7, #80	; 0x50
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001aa2:	bf00      	nop
 8001aa4:	f3af 8000 	nop.w
 8001aa8:	66666666 	.word	0x66666666
 8001aac:	400a6666 	.word	0x400a6666
 8001ab0:	20000300 	.word	0x20000300
 8001ab4:	457ff000 	.word	0x457ff000
 8001ab8:	39b78034 	.word	0x39b78034
 8001abc:	3cdea897 	.word	0x3cdea897
 8001ac0:	3fb29bd0 	.word	0x3fb29bd0
 8001ac4:	3aebedfa 	.word	0x3aebedfa
 8001ac8:	20000120 	.word	0x20000120
 8001acc:	20000128 	.word	0x20000128
 8001ad0:	40408000 	.word	0x40408000
 8001ad4:	43160000 	.word	0x43160000
 8001ad8:	42e93442 	.word	0x42e93442
 8001adc:	403137de 	.word	0x403137de
 8001ae0:	4299428f 	.word	0x4299428f
 8001ae4:	2000012c 	.word	0x2000012c
 8001ae8:	41200000 	.word	0x41200000
 8001aec:	42c80000 	.word	0x42c80000
 8001af0:	bfc1a9fc 	.word	0xbfc1a9fc
 8001af4:	41100000 	.word	0x41100000
 8001af8:	20000130 	.word	0x20000130

08001afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b00:	f000 fde0 	bl	80026c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b04:	f000 f8a2 	bl	8001c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b08:	f000 fa56 	bl	8001fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b0c:	f000 fa34 	bl	8001f78 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b10:	f000 f904 	bl	8001d1c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001b14:	f000 f962 	bl	8001ddc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001b18:	f000 f9da 	bl	8001ed0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001b1c:	f000 f9ae 	bl	8001e7c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001b20:	f000 fa00 	bl	8001f24 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001b24:	483b      	ldr	r0, [pc, #236]	; (8001c14 <main+0x118>)
 8001b26:	f002 ff12 	bl	800494e <HAL_TIM_Base_Start>
  sdsInit(&sds, &huart6);
 8001b2a:	493b      	ldr	r1, [pc, #236]	; (8001c18 <main+0x11c>)
 8001b2c:	483b      	ldr	r0, [pc, #236]	; (8001c1c <main+0x120>)
 8001b2e:	f000 facd 	bl	80020cc <sdsInit>
  ESP_Init("Tam Duyen 1", "tamduyen");
 8001b32:	493b      	ldr	r1, [pc, #236]	; (8001c20 <main+0x124>)
 8001b34:	483b      	ldr	r0, [pc, #236]	; (8001c24 <main+0x128>)
 8001b36:	f7ff fa23 	bl	8000f80 <ESP_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Read_DataDHT();
	  if (Value_buf[8] == 1)
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	; (8001c28 <main+0x12c>)
 8001b3c:	8a1b      	ldrh	r3, [r3, #16]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d103      	bne.n	8001b4a <main+0x4e>
	  {
		  HAL_Delay(10);
 8001b42:	200a      	movs	r0, #10
 8001b44:	f000 fe30 	bl	80027a8 <HAL_Delay>
 8001b48:	e003      	b.n	8001b52 <main+0x56>
	  }
	  else
	  {
		  ESP_Init("Tam Duyen 1", "tamduyen");
 8001b4a:	4935      	ldr	r1, [pc, #212]	; (8001c20 <main+0x124>)
 8001b4c:	4835      	ldr	r0, [pc, #212]	; (8001c24 <main+0x128>)
 8001b4e:	f7ff fa17 	bl	8000f80 <ESP_Init>
	  }
	  Value_buf[6] = 0;
 8001b52:	4b35      	ldr	r3, [pc, #212]	; (8001c28 <main+0x12c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	819a      	strh	r2, [r3, #12]

	  Read_DHT22();
 8001b58:	f7ff fdd6 	bl	8001708 <Read_DHT22>
	  pm2_5 = sdsGetPm2_5(&sds);
 8001b5c:	482f      	ldr	r0, [pc, #188]	; (8001c1c <main+0x120>)
 8001b5e:	f000 fad3 	bl	8002108 <sdsGetPm2_5>
 8001b62:	4603      	mov	r3, r0
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b31      	ldr	r3, [pc, #196]	; (8001c2c <main+0x130>)
 8001b68:	801a      	strh	r2, [r3, #0]
	  pm10 = sdsGetPm10(&sds);
 8001b6a:	482c      	ldr	r0, [pc, #176]	; (8001c1c <main+0x120>)
 8001b6c:	f000 fad8 	bl	8002120 <sdsGetPm10>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b2e      	ldr	r3, [pc, #184]	; (8001c30 <main+0x134>)
 8001b76:	801a      	strh	r2, [r3, #0]
	  cl_khong_khi();
 8001b78:	f7ff fe76 	bl	8001868 <cl_khong_khi>
	  Value_buf[0] = tCelsius;//nhiet do
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <main+0x138>)
 8001b7e:	edd3 7a00 	vldr	s15, [r3]
 8001b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b86:	ee17 3a90 	vmov	r3, s15
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <main+0x12c>)
 8001b8e:	801a      	strh	r2, [r3, #0]
	  Value_buf[1] = RH;//do am
 8001b90:	4b29      	ldr	r3, [pc, #164]	; (8001c38 <main+0x13c>)
 8001b92:	edd3 7a00 	vldr	s15, [r3]
 8001b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b9a:	ee17 3a90 	vmov	r3, s15
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <main+0x12c>)
 8001ba2:	805a      	strh	r2, [r3, #2]
	  Value_buf[2] = pm2_5;//pm2.5
 8001ba4:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <main+0x130>)
 8001ba6:	881a      	ldrh	r2, [r3, #0]
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <main+0x12c>)
 8001baa:	809a      	strh	r2, [r3, #4]
	  Value_buf[3] = pm10;//pm10
 8001bac:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <main+0x134>)
 8001bae:	881a      	ldrh	r2, [r3, #0]
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <main+0x12c>)
 8001bb2:	80da      	strh	r2, [r3, #6]
	  Value_buf[4] = khi_CO;//COppm
 8001bb4:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <main+0x140>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <main+0x12c>)
 8001bbc:	811a      	strh	r2, [r3, #8]
	  Value_buf[5] = khi_doc;//khi_docppm
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <main+0x144>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <main+0x12c>)
 8001bc6:	815a      	strh	r2, [r3, #10]
	  Value_buf[6] = 160;//kinh do
 8001bc8:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <main+0x12c>)
 8001bca:	22a0      	movs	r2, #160	; 0xa0
 8001bcc:	819a      	strh	r2, [r3, #12]
	  Value_buf[7] = 108;//vi do
 8001bce:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <main+0x12c>)
 8001bd0:	226c      	movs	r2, #108	; 0x6c
 8001bd2:	81da      	strh	r2, [r3, #14]
	  if (Value_buf[0] != 0)
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <main+0x12c>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <main+0xec>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	2120      	movs	r1, #32
 8001be0:	4818      	ldr	r0, [pc, #96]	; (8001c44 <main+0x148>)
 8001be2:	f002 fa33 	bl	800404c <HAL_GPIO_WritePin>
 8001be6:	e004      	b.n	8001bf2 <main+0xf6>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001be8:	2201      	movs	r2, #1
 8001bea:	2120      	movs	r1, #32
 8001bec:	4815      	ldr	r0, [pc, #84]	; (8001c44 <main+0x148>)
 8001bee:	f002 fa2d 	bl	800404c <HAL_GPIO_WritePin>
	  }
	  ESP_Send_Multi("VJZ8T2GZ4TCE9H2V", 8, Value_buf);
 8001bf2:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <main+0x12c>)
 8001bf4:	2108      	movs	r1, #8
 8001bf6:	4814      	ldr	r0, [pc, #80]	; (8001c48 <main+0x14c>)
 8001bf8:	f7ff fa1e 	bl	8001038 <ESP_Send_Multi>
	  Value_buf[8] = 1;
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <main+0x12c>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	821a      	strh	r2, [r3, #16]
	  Value_buf[0] = 0;
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <main+0x12c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(30000);
 8001c08:	f247 5030 	movw	r0, #30000	; 0x7530
 8001c0c:	f000 fdcc 	bl	80027a8 <HAL_Delay>
	  if (Value_buf[8] == 1)
 8001c10:	e793      	b.n	8001b3a <main+0x3e>
 8001c12:	bf00      	nop
 8001c14:	20000280 	.word	0x20000280
 8001c18:	200002c0 	.word	0x200002c0
 8001c1c:	20000260 	.word	0x20000260
 8001c20:	080076e0 	.word	0x080076e0
 8001c24:	080076ec 	.word	0x080076ec
 8001c28:	20000154 	.word	0x20000154
 8001c2c:	20000134 	.word	0x20000134
 8001c30:	20000136 	.word	0x20000136
 8001c34:	20000120 	.word	0x20000120
 8001c38:	20000128 	.word	0x20000128
 8001c3c:	20000130 	.word	0x20000130
 8001c40:	2000012c 	.word	0x2000012c
 8001c44:	40020000 	.word	0x40020000
 8001c48:	080076f8 	.word	0x080076f8

08001c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b094      	sub	sp, #80	; 0x50
 8001c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c52:	f107 0320 	add.w	r3, r7, #32
 8001c56:	2230      	movs	r2, #48	; 0x30
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f004 f83c 	bl	8005cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c70:	2300      	movs	r3, #0
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <SystemClock_Config+0xc8>)
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	4a26      	ldr	r2, [pc, #152]	; (8001d14 <SystemClock_Config+0xc8>)
 8001c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c80:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <SystemClock_Config+0xc8>)
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <SystemClock_Config+0xcc>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a20      	ldr	r2, [pc, #128]	; (8001d18 <SystemClock_Config+0xcc>)
 8001c96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <SystemClock_Config+0xcc>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cac:	2301      	movs	r3, #1
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cb0:	2310      	movs	r3, #16
 8001cb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001cbc:	2308      	movs	r3, #8
 8001cbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001cc0:	2364      	movs	r3, #100	; 0x64
 8001cc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cc8:	2304      	movs	r3, #4
 8001cca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ccc:	f107 0320 	add.w	r3, r7, #32
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f002 f9d5 	bl	8004080 <HAL_RCC_OscConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cdc:	f000 f9ee 	bl	80020bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ce0:	230f      	movs	r3, #15
 8001ce2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	2103      	movs	r1, #3
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f002 fc2f 	bl	8004560 <HAL_RCC_ClockConfig>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d08:	f000 f9d8 	bl	80020bc <Error_Handler>
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	3750      	adds	r7, #80	; 0x50
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40007000 	.word	0x40007000

08001d1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d22:	463b      	mov	r3, r7
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d2e:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <MX_ADC1_Init+0xb4>)
 8001d30:	4a28      	ldr	r2, [pc, #160]	; (8001dd4 <MX_ADC1_Init+0xb8>)
 8001d32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d34:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <MX_ADC1_Init+0xb4>)
 8001d36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d3c:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <MX_ADC1_Init+0xb4>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001d42:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <MX_ADC1_Init+0xb4>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d48:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <MX_ADC1_Init+0xb4>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d4e:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <MX_ADC1_Init+0xb4>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d56:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <MX_ADC1_Init+0xb4>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <MX_ADC1_Init+0xb4>)
 8001d5e:	4a1e      	ldr	r2, [pc, #120]	; (8001dd8 <MX_ADC1_Init+0xbc>)
 8001d60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d62:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <MX_ADC1_Init+0xb4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <MX_ADC1_Init+0xb4>)
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <MX_ADC1_Init+0xb4>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <MX_ADC1_Init+0xb4>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d7c:	4814      	ldr	r0, [pc, #80]	; (8001dd0 <MX_ADC1_Init+0xb4>)
 8001d7e:	f000 fd35 	bl	80027ec <HAL_ADC_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d88:	f000 f998 	bl	80020bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001d8c:	230a      	movs	r3, #10
 8001d8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d90:	2301      	movs	r3, #1
 8001d92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001d94:	2307      	movs	r3, #7
 8001d96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d98:	463b      	mov	r3, r7
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <MX_ADC1_Init+0xb4>)
 8001d9e:	f000 ffef 	bl	8002d80 <HAL_ADC_ConfigChannel>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001da8:	f000 f988 	bl	80020bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001dac:	2308      	movs	r3, #8
 8001dae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001db0:	2302      	movs	r3, #2
 8001db2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001db4:	463b      	mov	r3, r7
 8001db6:	4619      	mov	r1, r3
 8001db8:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <MX_ADC1_Init+0xb4>)
 8001dba:	f000 ffe1 	bl	8002d80 <HAL_ADC_ConfigChannel>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001dc4:	f000 f97a 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000174 	.word	0x20000174
 8001dd4:	40012000 	.word	0x40012000
 8001dd8:	0f000001 	.word	0x0f000001

08001ddc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001de2:	f107 0308 	add.w	r3, r7, #8
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df0:	463b      	mov	r3, r7
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001df8:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <MX_TIM1_Init+0x98>)
 8001dfa:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <MX_TIM1_Init+0x9c>)
 8001dfc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <MX_TIM1_Init+0x98>)
 8001e00:	2263      	movs	r2, #99	; 0x63
 8001e02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <MX_TIM1_Init+0x98>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <MX_TIM1_Init+0x98>)
 8001e0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <MX_TIM1_Init+0x98>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e18:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <MX_TIM1_Init+0x98>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e1e:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <MX_TIM1_Init+0x98>)
 8001e20:	2280      	movs	r2, #128	; 0x80
 8001e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e24:	4813      	ldr	r0, [pc, #76]	; (8001e74 <MX_TIM1_Init+0x98>)
 8001e26:	f002 fd67 	bl	80048f8 <HAL_TIM_Base_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001e30:	f000 f944 	bl	80020bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e3a:	f107 0308 	add.w	r3, r7, #8
 8001e3e:	4619      	mov	r1, r3
 8001e40:	480c      	ldr	r0, [pc, #48]	; (8001e74 <MX_TIM1_Init+0x98>)
 8001e42:	f002 fda8 	bl	8004996 <HAL_TIM_ConfigClockSource>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001e4c:	f000 f936 	bl	80020bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e50:	2300      	movs	r3, #0
 8001e52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e58:	463b      	mov	r3, r7
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4805      	ldr	r0, [pc, #20]	; (8001e74 <MX_TIM1_Init+0x98>)
 8001e5e:	f002 ff6b 	bl	8004d38 <HAL_TIMEx_MasterConfigSynchronization>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e68:	f000 f928 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e6c:	bf00      	nop
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000280 	.word	0x20000280
 8001e78:	40010000 	.word	0x40010000

08001e7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <MX_USART1_UART_Init+0x4c>)
 8001e82:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <MX_USART1_UART_Init+0x50>)
 8001e84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <MX_USART1_UART_Init+0x4c>)
 8001e88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <MX_USART1_UART_Init+0x4c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <MX_USART1_UART_Init+0x4c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <MX_USART1_UART_Init+0x4c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ea0:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <MX_USART1_UART_Init+0x4c>)
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <MX_USART1_UART_Init+0x4c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <MX_USART1_UART_Init+0x4c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eb2:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <MX_USART1_UART_Init+0x4c>)
 8001eb4:	f002 ffae 	bl	8004e14 <HAL_UART_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ebe:	f000 f8fd 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200001bc 	.word	0x200001bc
 8001ecc:	40011000 	.word	0x40011000

08001ed0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001ed6:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <MX_USART2_UART_Init+0x50>)
 8001ed8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001edc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ee0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f06:	4805      	ldr	r0, [pc, #20]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001f08:	f002 ff84 	bl	8004e14 <HAL_UART_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f12:	f000 f8d3 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000308 	.word	0x20000308
 8001f20:	40004400 	.word	0x40004400

08001f24 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f2a:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <MX_USART6_UART_Init+0x50>)
 8001f2c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f30:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f34:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f42:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f5a:	4805      	ldr	r0, [pc, #20]	; (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f5c:	f002 ff5a 	bl	8004e14 <HAL_UART_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f66:	f000 f8a9 	bl	80020bc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200002c0 	.word	0x200002c0
 8001f74:	40011400 	.word	0x40011400

08001f78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <MX_DMA_Init+0x3c>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <MX_DMA_Init+0x3c>)
 8001f88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <MX_DMA_Init+0x3c>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2038      	movs	r0, #56	; 0x38
 8001fa0:	f001 fa83 	bl	80034aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001fa4:	2038      	movs	r0, #56	; 0x38
 8001fa6:	f001 fa9c 	bl	80034e2 <HAL_NVIC_EnableIRQ>

}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800

08001fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	; 0x28
 8001fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	4b30      	ldr	r3, [pc, #192]	; (8002094 <MX_GPIO_Init+0xdc>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a2f      	ldr	r2, [pc, #188]	; (8002094 <MX_GPIO_Init+0xdc>)
 8001fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b2d      	ldr	r3, [pc, #180]	; (8002094 <MX_GPIO_Init+0xdc>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	4b29      	ldr	r3, [pc, #164]	; (8002094 <MX_GPIO_Init+0xdc>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a28      	ldr	r2, [pc, #160]	; (8002094 <MX_GPIO_Init+0xdc>)
 8001ff4:	f043 0304 	orr.w	r3, r3, #4
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b26      	ldr	r3, [pc, #152]	; (8002094 <MX_GPIO_Init+0xdc>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	4b22      	ldr	r3, [pc, #136]	; (8002094 <MX_GPIO_Init+0xdc>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	4a21      	ldr	r2, [pc, #132]	; (8002094 <MX_GPIO_Init+0xdc>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	6313      	str	r3, [r2, #48]	; 0x30
 8002016:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <MX_GPIO_Init+0xdc>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <MX_GPIO_Init+0xdc>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4a1a      	ldr	r2, [pc, #104]	; (8002094 <MX_GPIO_Init+0xdc>)
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
 8002032:	4b18      	ldr	r3, [pc, #96]	; (8002094 <MX_GPIO_Init+0xdc>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800203e:	2200      	movs	r2, #0
 8002040:	2108      	movs	r1, #8
 8002042:	4815      	ldr	r0, [pc, #84]	; (8002098 <MX_GPIO_Init+0xe0>)
 8002044:	f002 f802 	bl	800404c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002048:	2200      	movs	r2, #0
 800204a:	2120      	movs	r1, #32
 800204c:	4813      	ldr	r0, [pc, #76]	; (800209c <MX_GPIO_Init+0xe4>)
 800204e:	f001 fffd 	bl	800404c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002052:	2308      	movs	r3, #8
 8002054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002056:	2301      	movs	r3, #1
 8002058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002062:	f107 0314 	add.w	r3, r7, #20
 8002066:	4619      	mov	r1, r3
 8002068:	480b      	ldr	r0, [pc, #44]	; (8002098 <MX_GPIO_Init+0xe0>)
 800206a:	f001 fe55 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800206e:	2320      	movs	r3, #32
 8002070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002072:	2301      	movs	r3, #1
 8002074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	4805      	ldr	r0, [pc, #20]	; (800209c <MX_GPIO_Init+0xe4>)
 8002086:	f001 fe47 	bl	8003d18 <HAL_GPIO_Init>

}
 800208a:	bf00      	nop
 800208c:	3728      	adds	r7, #40	; 0x28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800
 8002098:	40020800 	.word	0x40020800
 800209c:	40020000 	.word	0x40020000

080020a0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
sds_uart_RxCpltCallback(&sds,huart);
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4803      	ldr	r0, [pc, #12]	; (80020b8 <HAL_UART_RxCpltCallback+0x18>)
 80020ac:	f000 f844 	bl	8002138 <sds_uart_RxCpltCallback>
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000260 	.word	0x20000260

080020bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <sdsInit>:
 *
 *   @param sds pointer to SDS_t handle structure
 *   @param huart_sds pointer to UART handle structure
*/
void sdsInit(SDS* sds, const UART_HandleTypeDef* huart_sds)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
sds->huart_sds=(UART_HandleTypeDef *)huart_sds;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	601a      	str	r2, [r3, #0]
HAL_UART_Transmit(sds->huart_sds,(uint8_t*)Sds011_WorkingMode, 19,30);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	231e      	movs	r3, #30
 80020e2:	2213      	movs	r2, #19
 80020e4:	4907      	ldr	r1, [pc, #28]	; (8002104 <sdsInit+0x38>)
 80020e6:	f002 fee2 	bl	8004eae <HAL_UART_Transmit>
HAL_UART_Receive_IT(sds->huart_sds, sds->data_receive, 10);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3308      	adds	r3, #8
 80020f2:	220a      	movs	r2, #10
 80020f4:	4619      	mov	r1, r3
 80020f6:	f002 ff73 	bl	8004fe0 <HAL_UART_Receive_IT>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	0800770c 	.word	0x0800770c

08002108 <sdsGetPm2_5>:
 *
 *   @param sds pointer to SDS_t handle structure
 *   @return value of PM 2.5
*/
uint16_t sdsGetPm2_5(SDS* sds)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	return  sds->pm_2_5;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	889b      	ldrh	r3, [r3, #4]
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <sdsGetPm10>:
 *
 *   @param sds pointer to SDS_t handle structure
 *   @return value of PM 10
*/
uint16_t sdsGetPm10(SDS* sds)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	return  sds->pm_10;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	88db      	ldrh	r3, [r3, #6]
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <sds_uart_RxCpltCallback>:
 *
 *   @param sds pointer to SDS_t handle structure
 *   @param huart pointer to UART handle structure
*/
void sds_uart_RxCpltCallback(SDS* sds, UART_HandleTypeDef *huart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
	if(huart == sds->huart_sds)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d129      	bne.n	80021a0 <sds_uart_RxCpltCallback+0x68>
		{
				if((sds->data_receive[1] == 0xC0))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	7a5b      	ldrb	r3, [r3, #9]
 8002150:	2bc0      	cmp	r3, #192	; 0xc0
 8002152:	d11d      	bne.n	8002190 <sds_uart_RxCpltCallback+0x58>
				{
					sds->pm_2_5 = ((sds->data_receive[3]<<8)| sds->data_receive[2])/10;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7adb      	ldrb	r3, [r3, #11]
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	7a92      	ldrb	r2, [r2, #10]
 800215e:	4313      	orrs	r3, r2
 8002160:	4a11      	ldr	r2, [pc, #68]	; (80021a8 <sds_uart_RxCpltCallback+0x70>)
 8002162:	fb82 1203 	smull	r1, r2, r2, r3
 8002166:	1092      	asrs	r2, r2, #2
 8002168:	17db      	asrs	r3, r3, #31
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	b29a      	uxth	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	809a      	strh	r2, [r3, #4]
					sds->pm_10 = ((sds->data_receive[5]<<8)| sds->data_receive[4])/10;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7b5b      	ldrb	r3, [r3, #13]
 8002176:	021b      	lsls	r3, r3, #8
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	7b12      	ldrb	r2, [r2, #12]
 800217c:	4313      	orrs	r3, r2
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <sds_uart_RxCpltCallback+0x70>)
 8002180:	fb82 1203 	smull	r1, r2, r2, r3
 8002184:	1092      	asrs	r2, r2, #2
 8002186:	17db      	asrs	r3, r3, #31
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	b29a      	uxth	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	80da      	strh	r2, [r3, #6]
			}
			HAL_UART_Receive_IT(sds->huart_sds, sds->data_receive, 10);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3308      	adds	r3, #8
 8002198:	220a      	movs	r2, #10
 800219a:	4619      	mov	r1, r3
 800219c:	f002 ff20 	bl	8004fe0 <HAL_UART_Receive_IT>
		}
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	66666667 	.word	0x66666667

080021ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <HAL_MspInit+0x4c>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	4a0f      	ldr	r2, [pc, #60]	; (80021f8 <HAL_MspInit+0x4c>)
 80021bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c0:	6453      	str	r3, [r2, #68]	; 0x44
 80021c2:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <HAL_MspInit+0x4c>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	603b      	str	r3, [r7, #0]
 80021d2:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <HAL_MspInit+0x4c>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	4a08      	ldr	r2, [pc, #32]	; (80021f8 <HAL_MspInit+0x4c>)
 80021d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021dc:	6413      	str	r3, [r2, #64]	; 0x40
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_MspInit+0x4c>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e6:	603b      	str	r3, [r7, #0]
 80021e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800

080021fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a40      	ldr	r2, [pc, #256]	; (800231c <HAL_ADC_MspInit+0x120>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d179      	bne.n	8002312 <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	4b3f      	ldr	r3, [pc, #252]	; (8002320 <HAL_ADC_MspInit+0x124>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	4a3e      	ldr	r2, [pc, #248]	; (8002320 <HAL_ADC_MspInit+0x124>)
 8002228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222c:	6453      	str	r3, [r2, #68]	; 0x44
 800222e:	4b3c      	ldr	r3, [pc, #240]	; (8002320 <HAL_ADC_MspInit+0x124>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	4b38      	ldr	r3, [pc, #224]	; (8002320 <HAL_ADC_MspInit+0x124>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a37      	ldr	r2, [pc, #220]	; (8002320 <HAL_ADC_MspInit+0x124>)
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b35      	ldr	r3, [pc, #212]	; (8002320 <HAL_ADC_MspInit+0x124>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	4b31      	ldr	r3, [pc, #196]	; (8002320 <HAL_ADC_MspInit+0x124>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a30      	ldr	r2, [pc, #192]	; (8002320 <HAL_ADC_MspInit+0x124>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <HAL_ADC_MspInit+0x124>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002272:	2301      	movs	r3, #1
 8002274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002276:	2303      	movs	r3, #3
 8002278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800227e:	f107 0314 	add.w	r3, r7, #20
 8002282:	4619      	mov	r1, r3
 8002284:	4827      	ldr	r0, [pc, #156]	; (8002324 <HAL_ADC_MspInit+0x128>)
 8002286:	f001 fd47 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800228a:	2301      	movs	r3, #1
 800228c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800228e:	2303      	movs	r3, #3
 8002290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	4619      	mov	r1, r3
 800229c:	4822      	ldr	r0, [pc, #136]	; (8002328 <HAL_ADC_MspInit+0x12c>)
 800229e:	f001 fd3b 	bl	8003d18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80022a2:	4b22      	ldr	r3, [pc, #136]	; (800232c <HAL_ADC_MspInit+0x130>)
 80022a4:	4a22      	ldr	r2, [pc, #136]	; (8002330 <HAL_ADC_MspInit+0x134>)
 80022a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80022a8:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_ADC_MspInit+0x130>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022ae:	4b1f      	ldr	r3, [pc, #124]	; (800232c <HAL_ADC_MspInit+0x130>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022b4:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_ADC_MspInit+0x130>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022ba:	4b1c      	ldr	r3, [pc, #112]	; (800232c <HAL_ADC_MspInit+0x130>)
 80022bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022c2:	4b1a      	ldr	r3, [pc, #104]	; (800232c <HAL_ADC_MspInit+0x130>)
 80022c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022c8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <HAL_ADC_MspInit+0x130>)
 80022cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022d2:	4b16      	ldr	r3, [pc, #88]	; (800232c <HAL_ADC_MspInit+0x130>)
 80022d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022da:	4b14      	ldr	r3, [pc, #80]	; (800232c <HAL_ADC_MspInit+0x130>)
 80022dc:	2200      	movs	r2, #0
 80022de:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_ADC_MspInit+0x130>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022e6:	4811      	ldr	r0, [pc, #68]	; (800232c <HAL_ADC_MspInit+0x130>)
 80022e8:	f001 f916 	bl	8003518 <HAL_DMA_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80022f2:	f7ff fee3 	bl	80020bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a0c      	ldr	r2, [pc, #48]	; (800232c <HAL_ADC_MspInit+0x130>)
 80022fa:	639a      	str	r2, [r3, #56]	; 0x38
 80022fc:	4a0b      	ldr	r2, [pc, #44]	; (800232c <HAL_ADC_MspInit+0x130>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	2100      	movs	r1, #0
 8002306:	2012      	movs	r0, #18
 8002308:	f001 f8cf 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800230c:	2012      	movs	r0, #18
 800230e:	f001 f8e8 	bl	80034e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002312:	bf00      	nop
 8002314:	3728      	adds	r7, #40	; 0x28
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40012000 	.word	0x40012000
 8002320:	40023800 	.word	0x40023800
 8002324:	40020800 	.word	0x40020800
 8002328:	40020400 	.word	0x40020400
 800232c:	20000200 	.word	0x20000200
 8002330:	40026410 	.word	0x40026410

08002334 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0b      	ldr	r2, [pc, #44]	; (8002370 <HAL_TIM_Base_MspInit+0x3c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d10d      	bne.n	8002362 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <HAL_TIM_Base_MspInit+0x40>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	4a09      	ldr	r2, [pc, #36]	; (8002374 <HAL_TIM_Base_MspInit+0x40>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	6453      	str	r3, [r2, #68]	; 0x44
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <HAL_TIM_Base_MspInit+0x40>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002362:	bf00      	nop
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40010000 	.word	0x40010000
 8002374:	40023800 	.word	0x40023800

08002378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08e      	sub	sp, #56	; 0x38
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a58      	ldr	r2, [pc, #352]	; (80024f8 <HAL_UART_MspInit+0x180>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d135      	bne.n	8002406 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
 800239e:	4b57      	ldr	r3, [pc, #348]	; (80024fc <HAL_UART_MspInit+0x184>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a56      	ldr	r2, [pc, #344]	; (80024fc <HAL_UART_MspInit+0x184>)
 80023a4:	f043 0310 	orr.w	r3, r3, #16
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b54      	ldr	r3, [pc, #336]	; (80024fc <HAL_UART_MspInit+0x184>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	623b      	str	r3, [r7, #32]
 80023b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	4b50      	ldr	r3, [pc, #320]	; (80024fc <HAL_UART_MspInit+0x184>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a4f      	ldr	r2, [pc, #316]	; (80024fc <HAL_UART_MspInit+0x184>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b4d      	ldr	r3, [pc, #308]	; (80024fc <HAL_UART_MspInit+0x184>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d8:	2302      	movs	r3, #2
 80023da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e0:	2303      	movs	r3, #3
 80023e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023e4:	2307      	movs	r3, #7
 80023e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ec:	4619      	mov	r1, r3
 80023ee:	4844      	ldr	r0, [pc, #272]	; (8002500 <HAL_UART_MspInit+0x188>)
 80023f0:	f001 fc92 	bl	8003d18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2101      	movs	r1, #1
 80023f8:	2025      	movs	r0, #37	; 0x25
 80023fa:	f001 f856 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023fe:	2025      	movs	r0, #37	; 0x25
 8002400:	f001 f86f 	bl	80034e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002404:	e073      	b.n	80024ee <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a3e      	ldr	r2, [pc, #248]	; (8002504 <HAL_UART_MspInit+0x18c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d134      	bne.n	800247a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002410:	2300      	movs	r3, #0
 8002412:	61bb      	str	r3, [r7, #24]
 8002414:	4b39      	ldr	r3, [pc, #228]	; (80024fc <HAL_UART_MspInit+0x184>)
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	4a38      	ldr	r2, [pc, #224]	; (80024fc <HAL_UART_MspInit+0x184>)
 800241a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241e:	6413      	str	r3, [r2, #64]	; 0x40
 8002420:	4b36      	ldr	r3, [pc, #216]	; (80024fc <HAL_UART_MspInit+0x184>)
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002428:	61bb      	str	r3, [r7, #24]
 800242a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	4b32      	ldr	r3, [pc, #200]	; (80024fc <HAL_UART_MspInit+0x184>)
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	4a31      	ldr	r2, [pc, #196]	; (80024fc <HAL_UART_MspInit+0x184>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6313      	str	r3, [r2, #48]	; 0x30
 800243c:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <HAL_UART_MspInit+0x184>)
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002448:	230c      	movs	r3, #12
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244c:	2302      	movs	r3, #2
 800244e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002454:	2303      	movs	r3, #3
 8002456:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002458:	2307      	movs	r3, #7
 800245a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002460:	4619      	mov	r1, r3
 8002462:	4827      	ldr	r0, [pc, #156]	; (8002500 <HAL_UART_MspInit+0x188>)
 8002464:	f001 fc58 	bl	8003d18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002468:	2200      	movs	r2, #0
 800246a:	2101      	movs	r1, #1
 800246c:	2026      	movs	r0, #38	; 0x26
 800246e:	f001 f81c 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002472:	2026      	movs	r0, #38	; 0x26
 8002474:	f001 f835 	bl	80034e2 <HAL_NVIC_EnableIRQ>
}
 8002478:	e039      	b.n	80024ee <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART6)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a22      	ldr	r2, [pc, #136]	; (8002508 <HAL_UART_MspInit+0x190>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d134      	bne.n	80024ee <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002484:	2300      	movs	r3, #0
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	4b1c      	ldr	r3, [pc, #112]	; (80024fc <HAL_UART_MspInit+0x184>)
 800248a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248c:	4a1b      	ldr	r2, [pc, #108]	; (80024fc <HAL_UART_MspInit+0x184>)
 800248e:	f043 0320 	orr.w	r3, r3, #32
 8002492:	6453      	str	r3, [r2, #68]	; 0x44
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <HAL_UART_MspInit+0x184>)
 8002496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	4b15      	ldr	r3, [pc, #84]	; (80024fc <HAL_UART_MspInit+0x184>)
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a8:	4a14      	ldr	r2, [pc, #80]	; (80024fc <HAL_UART_MspInit+0x184>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6313      	str	r3, [r2, #48]	; 0x30
 80024b0:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_UART_MspInit+0x184>)
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80024bc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c2:	2302      	movs	r3, #2
 80024c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ca:	2303      	movs	r3, #3
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80024ce:	2308      	movs	r3, #8
 80024d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d6:	4619      	mov	r1, r3
 80024d8:	4809      	ldr	r0, [pc, #36]	; (8002500 <HAL_UART_MspInit+0x188>)
 80024da:	f001 fc1d 	bl	8003d18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2100      	movs	r1, #0
 80024e2:	2047      	movs	r0, #71	; 0x47
 80024e4:	f000 ffe1 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80024e8:	2047      	movs	r0, #71	; 0x47
 80024ea:	f000 fffa 	bl	80034e2 <HAL_NVIC_EnableIRQ>
}
 80024ee:	bf00      	nop
 80024f0:	3738      	adds	r7, #56	; 0x38
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40011000 	.word	0x40011000
 80024fc:	40023800 	.word	0x40023800
 8002500:	40020000 	.word	0x40020000
 8002504:	40004400 	.word	0x40004400
 8002508:	40011400 	.word	0x40011400

0800250c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800251e:	e7fe      	b.n	800251e <HardFault_Handler+0x4>

08002520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <MemManage_Handler+0x4>

08002526 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800252a:	e7fe      	b.n	800252a <BusFault_Handler+0x4>

0800252c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002530:	e7fe      	b.n	8002530 <UsageFault_Handler+0x4>

08002532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002560:	f000 f902 	bl	8002768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}

08002568 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800256c:	4802      	ldr	r0, [pc, #8]	; (8002578 <ADC_IRQHandler+0x10>)
 800256e:	f000 f980 	bl	8002872 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000174 	.word	0x20000174

0800257c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  Uart_isr(&huart1);
 8002580:	4803      	ldr	r0, [pc, #12]	; (8002590 <USART1_IRQHandler+0x14>)
 8002582:	f7fe ff65 	bl	8001450 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002586:	4802      	ldr	r0, [pc, #8]	; (8002590 <USART1_IRQHandler+0x14>)
 8002588:	f002 fd80 	bl	800508c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}
 8002590:	200001bc 	.word	0x200001bc

08002594 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  Uart_isr(&huart1);
 8002598:	4803      	ldr	r0, [pc, #12]	; (80025a8 <USART2_IRQHandler+0x14>)
 800259a:	f7fe ff59 	bl	8001450 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800259e:	4803      	ldr	r0, [pc, #12]	; (80025ac <USART2_IRQHandler+0x18>)
 80025a0:	f002 fd74 	bl	800508c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	200001bc 	.word	0x200001bc
 80025ac:	20000308 	.word	0x20000308

080025b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <DMA2_Stream0_IRQHandler+0x10>)
 80025b6:	f001 f947 	bl	8003848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000200 	.word	0x20000200

080025c4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <USART6_IRQHandler+0x10>)
 80025ca:	f002 fd5f 	bl	800508c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200002c0 	.word	0x200002c0

080025d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025e0:	4a14      	ldr	r2, [pc, #80]	; (8002634 <_sbrk+0x5c>)
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <_sbrk+0x60>)
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025ec:	4b13      	ldr	r3, [pc, #76]	; (800263c <_sbrk+0x64>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d102      	bne.n	80025fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025f4:	4b11      	ldr	r3, [pc, #68]	; (800263c <_sbrk+0x64>)
 80025f6:	4a12      	ldr	r2, [pc, #72]	; (8002640 <_sbrk+0x68>)
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <_sbrk+0x64>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	429a      	cmp	r2, r3
 8002606:	d207      	bcs.n	8002618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002608:	f003 fb3c 	bl	8005c84 <__errno>
 800260c:	4602      	mov	r2, r0
 800260e:	230c      	movs	r3, #12
 8002610:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002612:	f04f 33ff 	mov.w	r3, #4294967295
 8002616:	e009      	b.n	800262c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002618:	4b08      	ldr	r3, [pc, #32]	; (800263c <_sbrk+0x64>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800261e:	4b07      	ldr	r3, [pc, #28]	; (800263c <_sbrk+0x64>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	4a05      	ldr	r2, [pc, #20]	; (800263c <_sbrk+0x64>)
 8002628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800262a:	68fb      	ldr	r3, [r7, #12]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20020000 	.word	0x20020000
 8002638:	00000400 	.word	0x00000400
 800263c:	20000138 	.word	0x20000138
 8002640:	20000358 	.word	0x20000358

08002644 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002648:	4b08      	ldr	r3, [pc, #32]	; (800266c <SystemInit+0x28>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264e:	4a07      	ldr	r2, [pc, #28]	; (800266c <SystemInit+0x28>)
 8002650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002654:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <SystemInit+0x28>)
 800265a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800265e:	609a      	str	r2, [r3, #8]
#endif
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002670:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002674:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002676:	e003      	b.n	8002680 <LoopCopyDataInit>

08002678 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800267a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800267c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800267e:	3104      	adds	r1, #4

08002680 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002680:	480b      	ldr	r0, [pc, #44]	; (80026b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002682:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002684:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002686:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002688:	d3f6      	bcc.n	8002678 <CopyDataInit>
  ldr  r2, =_sbss
 800268a:	4a0b      	ldr	r2, [pc, #44]	; (80026b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800268c:	e002      	b.n	8002694 <LoopFillZerobss>

0800268e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800268e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002690:	f842 3b04 	str.w	r3, [r2], #4

08002694 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002696:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002698:	d3f9      	bcc.n	800268e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800269a:	f7ff ffd3 	bl	8002644 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800269e:	f003 faf7 	bl	8005c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026a2:	f7ff fa2b 	bl	8001afc <main>
  bx  lr    
 80026a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80026ac:	080077c8 	.word	0x080077c8
  ldr  r0, =_sdata
 80026b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026b4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80026b8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80026bc:	20000354 	.word	0x20000354

080026c0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026c0:	e7fe      	b.n	80026c0 <DMA1_Stream0_IRQHandler>
	...

080026c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026c8:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <HAL_Init+0x40>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a0d      	ldr	r2, [pc, #52]	; (8002704 <HAL_Init+0x40>)
 80026ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_Init+0x40>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <HAL_Init+0x40>)
 80026da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026e0:	4b08      	ldr	r3, [pc, #32]	; (8002704 <HAL_Init+0x40>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a07      	ldr	r2, [pc, #28]	; (8002704 <HAL_Init+0x40>)
 80026e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ec:	2003      	movs	r0, #3
 80026ee:	f000 fed1 	bl	8003494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026f2:	2000      	movs	r0, #0
 80026f4:	f000 f808 	bl	8002708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026f8:	f7ff fd58 	bl	80021ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40023c00 	.word	0x40023c00

08002708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002710:	4b12      	ldr	r3, [pc, #72]	; (800275c <HAL_InitTick+0x54>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4b12      	ldr	r3, [pc, #72]	; (8002760 <HAL_InitTick+0x58>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	4619      	mov	r1, r3
 800271a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800271e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002722:	fbb2 f3f3 	udiv	r3, r2, r3
 8002726:	4618      	mov	r0, r3
 8002728:	f000 fee9 	bl	80034fe <HAL_SYSTICK_Config>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e00e      	b.n	8002754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b0f      	cmp	r3, #15
 800273a:	d80a      	bhi.n	8002752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800273c:	2200      	movs	r2, #0
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	f04f 30ff 	mov.w	r0, #4294967295
 8002744:	f000 feb1 	bl	80034aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002748:	4a06      	ldr	r2, [pc, #24]	; (8002764 <HAL_InitTick+0x5c>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	e000      	b.n	8002754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000000 	.word	0x20000000
 8002760:	20000008 	.word	0x20000008
 8002764:	20000004 	.word	0x20000004

08002768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_IncTick+0x20>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_IncTick+0x24>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4413      	add	r3, r2
 8002778:	4a04      	ldr	r2, [pc, #16]	; (800278c <HAL_IncTick+0x24>)
 800277a:	6013      	str	r3, [r2, #0]
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000008 	.word	0x20000008
 800278c:	2000034c 	.word	0x2000034c

08002790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return uwTick;
 8002794:	4b03      	ldr	r3, [pc, #12]	; (80027a4 <HAL_GetTick+0x14>)
 8002796:	681b      	ldr	r3, [r3, #0]
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	2000034c 	.word	0x2000034c

080027a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027b0:	f7ff ffee 	bl	8002790 <HAL_GetTick>
 80027b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c0:	d005      	beq.n	80027ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_Delay+0x40>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4413      	add	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027ce:	bf00      	nop
 80027d0:	f7ff ffde 	bl	8002790 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d8f7      	bhi.n	80027d0 <HAL_Delay+0x28>
  {
  }
}
 80027e0:	bf00      	nop
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000008 	.word	0x20000008

080027ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e033      	b.n	800286a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff fcf6 	bl	80021fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b00      	cmp	r3, #0
 8002828:	d118      	bne.n	800285c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002832:	f023 0302 	bic.w	r3, r3, #2
 8002836:	f043 0202 	orr.w	r2, r3, #2
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fbd0 	bl	8002fe4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f023 0303 	bic.w	r3, r3, #3
 8002852:	f043 0201 	orr.w	r2, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	641a      	str	r2, [r3, #64]	; 0x40
 800285a:	e001      	b.n	8002860 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002868:	7bfb      	ldrb	r3, [r7, #15]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b02      	cmp	r3, #2
 800288e:	bf0c      	ite	eq
 8002890:	2301      	moveq	r3, #1
 8002892:	2300      	movne	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	bf0c      	ite	eq
 80028a6:	2301      	moveq	r3, #1
 80028a8:	2300      	movne	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d049      	beq.n	8002948 <HAL_ADC_IRQHandler+0xd6>
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d046      	beq.n	8002948 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d105      	bne.n	80028d2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d12b      	bne.n	8002938 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d127      	bne.n	8002938 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d006      	beq.n	8002904 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002900:	2b00      	cmp	r3, #0
 8002902:	d119      	bne.n	8002938 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0220 	bic.w	r2, r2, #32
 8002912:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d105      	bne.n	8002938 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f043 0201 	orr.w	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f9f9 	bl	8002d30 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f06f 0212 	mvn.w	r2, #18
 8002946:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b04      	cmp	r3, #4
 8002954:	bf0c      	ite	eq
 8002956:	2301      	moveq	r3, #1
 8002958:	2300      	movne	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002968:	2b80      	cmp	r3, #128	; 0x80
 800296a:	bf0c      	ite	eq
 800296c:	2301      	moveq	r3, #1
 800296e:	2300      	movne	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d057      	beq.n	8002a2a <HAL_ADC_IRQHandler+0x1b8>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d054      	beq.n	8002a2a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	2b00      	cmp	r3, #0
 800298a:	d105      	bne.n	8002998 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d139      	bne.n	8002a1a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d006      	beq.n	80029c2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d12b      	bne.n	8002a1a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d124      	bne.n	8002a1a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d11d      	bne.n	8002a1a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d119      	bne.n	8002a1a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029f4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d105      	bne.n	8002a1a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f043 0201 	orr.w	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fc60 	bl	80032e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 020c 	mvn.w	r2, #12
 8002a28:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4a:	2b40      	cmp	r3, #64	; 0x40
 8002a4c:	bf0c      	ite	eq
 8002a4e:	2301      	moveq	r3, #1
 8002a50:	2300      	movne	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d017      	beq.n	8002a8c <HAL_ADC_IRQHandler+0x21a>
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d014      	beq.n	8002a8c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d10d      	bne.n	8002a8c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f96b 	bl	8002d58 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f06f 0201 	mvn.w	r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	bf0c      	ite	eq
 8002a9a:	2301      	moveq	r3, #1
 8002a9c:	2300      	movne	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ab0:	bf0c      	ite	eq
 8002ab2:	2301      	moveq	r3, #1
 8002ab4:	2300      	movne	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d015      	beq.n	8002aec <HAL_ADC_IRQHandler+0x27a>
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d012      	beq.n	8002aec <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f043 0202 	orr.w	r2, r3, #2
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f06f 0220 	mvn.w	r2, #32
 8002ada:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f945 	bl	8002d6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f06f 0220 	mvn.w	r2, #32
 8002aea:	601a      	str	r2, [r3, #0]
  }
}
 8002aec:	bf00      	nop
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_Start_DMA+0x1e>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e0b1      	b.n	8002c76 <HAL_ADC_Start_DMA+0x182>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d018      	beq.n	8002b5a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b38:	4b51      	ldr	r3, [pc, #324]	; (8002c80 <HAL_ADC_Start_DMA+0x18c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a51      	ldr	r2, [pc, #324]	; (8002c84 <HAL_ADC_Start_DMA+0x190>)
 8002b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b42:	0c9a      	lsrs	r2, r3, #18
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002b4c:	e002      	b.n	8002b54 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	3b01      	subs	r3, #1
 8002b52:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f9      	bne.n	8002b4e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	f040 8085 	bne.w	8002c74 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b72:	f023 0301 	bic.w	r3, r3, #1
 8002b76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d007      	beq.n	8002b9c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba8:	d106      	bne.n	8002bb8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	f023 0206 	bic.w	r2, r3, #6
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	645a      	str	r2, [r3, #68]	; 0x44
 8002bb6:	e002      	b.n	8002bbe <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bc6:	4b30      	ldr	r3, [pc, #192]	; (8002c88 <HAL_ADC_Start_DMA+0x194>)
 8002bc8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	4a2f      	ldr	r2, [pc, #188]	; (8002c8c <HAL_ADC_Start_DMA+0x198>)
 8002bd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd6:	4a2e      	ldr	r2, [pc, #184]	; (8002c90 <HAL_ADC_Start_DMA+0x19c>)
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bde:	4a2d      	ldr	r2, [pc, #180]	; (8002c94 <HAL_ADC_Start_DMA+0x1a0>)
 8002be0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002bea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002bfa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c0a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	334c      	adds	r3, #76	; 0x4c
 8002c16:	4619      	mov	r1, r3
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f000 fd2a 	bl	8003674 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 031f 	and.w	r3, r3, #31
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10f      	bne.n	8002c4c <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d11c      	bne.n	8002c74 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c48:	609a      	str	r2, [r3, #8]
 8002c4a:	e013      	b.n	8002c74 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a11      	ldr	r2, [pc, #68]	; (8002c98 <HAL_ADC_Start_DMA+0x1a4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d10e      	bne.n	8002c74 <HAL_ADC_Start_DMA+0x180>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d107      	bne.n	8002c74 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c72:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000000 	.word	0x20000000
 8002c84:	431bde83 	.word	0x431bde83
 8002c88:	40012300 	.word	0x40012300
 8002c8c:	080031dd 	.word	0x080031dd
 8002c90:	08003297 	.word	0x08003297
 8002c94:	080032b3 	.word	0x080032b3
 8002c98:	40012000 	.word	0x40012000

08002c9c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <HAL_ADC_Stop_DMA+0x1a>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e038      	b.n	8002d28 <HAL_ADC_Stop_DMA+0x8c>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0201 	bic.w	r2, r2, #1
 8002ccc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d120      	bne.n	8002d1e <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cea:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 fd17 	bl	8003724 <HAL_DMA_Abort>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002d08:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d12:	f023 0301 	bic.w	r3, r3, #1
 8002d16:	f043 0201 	orr.w	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x1c>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e113      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x244>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b09      	cmp	r3, #9
 8002daa:	d925      	bls.n	8002df8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68d9      	ldr	r1, [r3, #12]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	461a      	mov	r2, r3
 8002dba:	4613      	mov	r3, r2
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3b1e      	subs	r3, #30
 8002dc2:	2207      	movs	r2, #7
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43da      	mvns	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	400a      	ands	r2, r1
 8002dd0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68d9      	ldr	r1, [r3, #12]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	4618      	mov	r0, r3
 8002de4:	4603      	mov	r3, r0
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4403      	add	r3, r0
 8002dea:	3b1e      	subs	r3, #30
 8002dec:	409a      	lsls	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	e022      	b.n	8002e3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6919      	ldr	r1, [r3, #16]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	4613      	mov	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4413      	add	r3, r2
 8002e0c:	2207      	movs	r2, #7
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43da      	mvns	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	400a      	ands	r2, r1
 8002e1a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6919      	ldr	r1, [r3, #16]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	4603      	mov	r3, r0
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4403      	add	r3, r0
 8002e34:	409a      	lsls	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b06      	cmp	r3, #6
 8002e44:	d824      	bhi.n	8002e90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	3b05      	subs	r3, #5
 8002e58:	221f      	movs	r2, #31
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	400a      	ands	r2, r1
 8002e66:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	4618      	mov	r0, r3
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	3b05      	subs	r3, #5
 8002e82:	fa00 f203 	lsl.w	r2, r0, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e8e:	e04c      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b0c      	cmp	r3, #12
 8002e96:	d824      	bhi.n	8002ee2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3b23      	subs	r3, #35	; 0x23
 8002eaa:	221f      	movs	r2, #31
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43da      	mvns	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	400a      	ands	r2, r1
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3b23      	subs	r3, #35	; 0x23
 8002ed4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30
 8002ee0:	e023      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3b41      	subs	r3, #65	; 0x41
 8002ef4:	221f      	movs	r2, #31
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43da      	mvns	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	400a      	ands	r2, r1
 8002f02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	4618      	mov	r0, r3
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3b41      	subs	r3, #65	; 0x41
 8002f1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f2a:	4b29      	ldr	r3, [pc, #164]	; (8002fd0 <HAL_ADC_ConfigChannel+0x250>)
 8002f2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a28      	ldr	r2, [pc, #160]	; (8002fd4 <HAL_ADC_ConfigChannel+0x254>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d10f      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x1d8>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b12      	cmp	r3, #18
 8002f3e:	d10b      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1d      	ldr	r2, [pc, #116]	; (8002fd4 <HAL_ADC_ConfigChannel+0x254>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d12b      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x23a>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1c      	ldr	r2, [pc, #112]	; (8002fd8 <HAL_ADC_ConfigChannel+0x258>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d003      	beq.n	8002f74 <HAL_ADC_ConfigChannel+0x1f4>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b11      	cmp	r3, #17
 8002f72:	d122      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a11      	ldr	r2, [pc, #68]	; (8002fd8 <HAL_ADC_ConfigChannel+0x258>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d111      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f96:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <HAL_ADC_ConfigChannel+0x25c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a11      	ldr	r2, [pc, #68]	; (8002fe0 <HAL_ADC_ConfigChannel+0x260>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	0c9a      	lsrs	r2, r3, #18
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fac:	e002      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f9      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	40012300 	.word	0x40012300
 8002fd4:	40012000 	.word	0x40012000
 8002fd8:	10000012 	.word	0x10000012
 8002fdc:	20000000 	.word	0x20000000
 8002fe0:	431bde83 	.word	0x431bde83

08002fe4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fec:	4b79      	ldr	r3, [pc, #484]	; (80031d4 <ADC_Init+0x1f0>)
 8002fee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	431a      	orrs	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003018:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6859      	ldr	r1, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	021a      	lsls	r2, r3, #8
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800303c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6859      	ldr	r1, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800305e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6899      	ldr	r1, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	4a58      	ldr	r2, [pc, #352]	; (80031d8 <ADC_Init+0x1f4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d022      	beq.n	80030c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800308a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6899      	ldr	r1, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6899      	ldr	r1, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	e00f      	b.n	80030e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0202 	bic.w	r2, r2, #2
 80030f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6899      	ldr	r1, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	7e1b      	ldrb	r3, [r3, #24]
 80030fc:	005a      	lsls	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3020 	ldrb.w	r3, [r3, #32]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01b      	beq.n	8003148 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800311e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800312e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6859      	ldr	r1, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	3b01      	subs	r3, #1
 800313c:	035a      	lsls	r2, r3, #13
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	e007      	b.n	8003158 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003156:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003166:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	3b01      	subs	r3, #1
 8003174:	051a      	lsls	r2, r3, #20
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800318c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6899      	ldr	r1, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800319a:	025a      	lsls	r2, r3, #9
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6899      	ldr	r1, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	029a      	lsls	r2, r3, #10
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	609a      	str	r2, [r3, #8]
}
 80031c8:	bf00      	nop
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	40012300 	.word	0x40012300
 80031d8:	0f000001 	.word	0x0f000001

080031dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d13c      	bne.n	8003270 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d12b      	bne.n	8003268 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003214:	2b00      	cmp	r3, #0
 8003216:	d127      	bne.n	8003268 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003222:	2b00      	cmp	r3, #0
 8003224:	d006      	beq.n	8003234 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003230:	2b00      	cmp	r3, #0
 8003232:	d119      	bne.n	8003268 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0220 	bic.w	r2, r2, #32
 8003242:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d105      	bne.n	8003268 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	f043 0201 	orr.w	r2, r3, #1
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f7ff fd61 	bl	8002d30 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800326e:	e00e      	b.n	800328e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f7ff fd75 	bl	8002d6c <HAL_ADC_ErrorCallback>
}
 8003282:	e004      	b.n	800328e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	4798      	blx	r3
}
 800328e:	bf00      	nop
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f7ff fd4d 	bl	8002d44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032aa:	bf00      	nop
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032be:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2240      	movs	r2, #64	; 0x40
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	f043 0204 	orr.w	r2, r3, #4
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f7ff fd4a 	bl	8002d6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003304:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <__NVIC_SetPriorityGrouping+0x44>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003310:	4013      	ands	r3, r2
 8003312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800331c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003326:	4a04      	ldr	r2, [pc, #16]	; (8003338 <__NVIC_SetPriorityGrouping+0x44>)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	60d3      	str	r3, [r2, #12]
}
 800332c:	bf00      	nop
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003340:	4b04      	ldr	r3, [pc, #16]	; (8003354 <__NVIC_GetPriorityGrouping+0x18>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	0a1b      	lsrs	r3, r3, #8
 8003346:	f003 0307 	and.w	r3, r3, #7
}
 800334a:	4618      	mov	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	2b00      	cmp	r3, #0
 8003368:	db0b      	blt.n	8003382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	f003 021f 	and.w	r2, r3, #31
 8003370:	4907      	ldr	r1, [pc, #28]	; (8003390 <__NVIC_EnableIRQ+0x38>)
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	2001      	movs	r0, #1
 800337a:	fa00 f202 	lsl.w	r2, r0, r2
 800337e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	e000e100 	.word	0xe000e100

08003394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	6039      	str	r1, [r7, #0]
 800339e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	db0a      	blt.n	80033be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	490c      	ldr	r1, [pc, #48]	; (80033e0 <__NVIC_SetPriority+0x4c>)
 80033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b2:	0112      	lsls	r2, r2, #4
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	440b      	add	r3, r1
 80033b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033bc:	e00a      	b.n	80033d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	4908      	ldr	r1, [pc, #32]	; (80033e4 <__NVIC_SetPriority+0x50>)
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	3b04      	subs	r3, #4
 80033cc:	0112      	lsls	r2, r2, #4
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	440b      	add	r3, r1
 80033d2:	761a      	strb	r2, [r3, #24]
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	e000e100 	.word	0xe000e100
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b089      	sub	sp, #36	; 0x24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f1c3 0307 	rsb	r3, r3, #7
 8003402:	2b04      	cmp	r3, #4
 8003404:	bf28      	it	cs
 8003406:	2304      	movcs	r3, #4
 8003408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3304      	adds	r3, #4
 800340e:	2b06      	cmp	r3, #6
 8003410:	d902      	bls.n	8003418 <NVIC_EncodePriority+0x30>
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3b03      	subs	r3, #3
 8003416:	e000      	b.n	800341a <NVIC_EncodePriority+0x32>
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800341c:	f04f 32ff 	mov.w	r2, #4294967295
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43da      	mvns	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	401a      	ands	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003430:	f04f 31ff 	mov.w	r1, #4294967295
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	fa01 f303 	lsl.w	r3, r1, r3
 800343a:	43d9      	mvns	r1, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003440:	4313      	orrs	r3, r2
         );
}
 8003442:	4618      	mov	r0, r3
 8003444:	3724      	adds	r7, #36	; 0x24
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3b01      	subs	r3, #1
 800345c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003460:	d301      	bcc.n	8003466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003462:	2301      	movs	r3, #1
 8003464:	e00f      	b.n	8003486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003466:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <SysTick_Config+0x40>)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3b01      	subs	r3, #1
 800346c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800346e:	210f      	movs	r1, #15
 8003470:	f04f 30ff 	mov.w	r0, #4294967295
 8003474:	f7ff ff8e 	bl	8003394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <SysTick_Config+0x40>)
 800347a:	2200      	movs	r2, #0
 800347c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800347e:	4b04      	ldr	r3, [pc, #16]	; (8003490 <SysTick_Config+0x40>)
 8003480:	2207      	movs	r2, #7
 8003482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	e000e010 	.word	0xe000e010

08003494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff ff29 	bl	80032f4 <__NVIC_SetPriorityGrouping>
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	4603      	mov	r3, r0
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034bc:	f7ff ff3e 	bl	800333c <__NVIC_GetPriorityGrouping>
 80034c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	6978      	ldr	r0, [r7, #20]
 80034c8:	f7ff ff8e 	bl	80033e8 <NVIC_EncodePriority>
 80034cc:	4602      	mov	r2, r0
 80034ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d2:	4611      	mov	r1, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff ff5d 	bl	8003394 <__NVIC_SetPriority>
}
 80034da:	bf00      	nop
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	4603      	mov	r3, r0
 80034ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff ff31 	bl	8003358 <__NVIC_EnableIRQ>
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff ffa2 	bl	8003450 <SysTick_Config>
 800350c:	4603      	mov	r3, r0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003524:	f7ff f934 	bl	8002790 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e099      	b.n	8003668 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0201 	bic.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003554:	e00f      	b.n	8003576 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003556:	f7ff f91b 	bl	8002790 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b05      	cmp	r3, #5
 8003562:	d908      	bls.n	8003576 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2220      	movs	r2, #32
 8003568:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2203      	movs	r2, #3
 800356e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e078      	b.n	8003668 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1e8      	bne.n	8003556 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	4b38      	ldr	r3, [pc, #224]	; (8003670 <HAL_DMA_Init+0x158>)
 8003590:	4013      	ands	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d107      	bne.n	80035e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	4313      	orrs	r3, r2
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4313      	orrs	r3, r2
 80035de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f023 0307 	bic.w	r3, r3, #7
 80035f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	4313      	orrs	r3, r2
 8003600:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	2b04      	cmp	r3, #4
 8003608:	d117      	bne.n	800363a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	4313      	orrs	r3, r2
 8003612:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00e      	beq.n	800363a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fb01 	bl	8003c24 <DMA_CheckFifoParam>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2240      	movs	r2, #64	; 0x40
 800362c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003636:	2301      	movs	r3, #1
 8003638:	e016      	b.n	8003668 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fab8 	bl	8003bb8 <DMA_CalcBaseAndBitshift>
 8003648:	4603      	mov	r3, r0
 800364a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003650:	223f      	movs	r2, #63	; 0x3f
 8003652:	409a      	lsls	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	f010803f 	.word	0xf010803f

08003674 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_DMA_Start_IT+0x26>
 8003696:	2302      	movs	r3, #2
 8003698:	e040      	b.n	800371c <HAL_DMA_Start_IT+0xa8>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d12f      	bne.n	800370e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2202      	movs	r2, #2
 80036b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 fa4a 	bl	8003b5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036cc:	223f      	movs	r2, #63	; 0x3f
 80036ce:	409a      	lsls	r2, r3
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0216 	orr.w	r2, r2, #22
 80036e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d007      	beq.n	80036fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0208 	orr.w	r2, r2, #8
 80036fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0201 	orr.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	e005      	b.n	800371a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003716:	2302      	movs	r3, #2
 8003718:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800371a:	7dfb      	ldrb	r3, [r7, #23]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003730:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003732:	f7ff f82d 	bl	8002790 <HAL_GetTick>
 8003736:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d008      	beq.n	8003756 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2280      	movs	r2, #128	; 0x80
 8003748:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e052      	b.n	80037fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0216 	bic.w	r2, r2, #22
 8003764:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003774:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d103      	bne.n	8003786 <HAL_DMA_Abort+0x62>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0208 	bic.w	r2, r2, #8
 8003794:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0201 	bic.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037a6:	e013      	b.n	80037d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037a8:	f7fe fff2 	bl	8002790 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b05      	cmp	r3, #5
 80037b4:	d90c      	bls.n	80037d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2203      	movs	r2, #3
 80037c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e015      	b.n	80037fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1e4      	bne.n	80037a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e2:	223f      	movs	r2, #63	; 0x3f
 80037e4:	409a      	lsls	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d004      	beq.n	8003822 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2280      	movs	r2, #128	; 0x80
 800381c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e00c      	b.n	800383c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2205      	movs	r2, #5
 8003826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003854:	4b92      	ldr	r3, [pc, #584]	; (8003aa0 <HAL_DMA_IRQHandler+0x258>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a92      	ldr	r2, [pc, #584]	; (8003aa4 <HAL_DMA_IRQHandler+0x25c>)
 800385a:	fba2 2303 	umull	r2, r3, r2, r3
 800385e:	0a9b      	lsrs	r3, r3, #10
 8003860:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003866:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003872:	2208      	movs	r2, #8
 8003874:	409a      	lsls	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4013      	ands	r3, r2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d01a      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d013      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0204 	bic.w	r2, r2, #4
 800389a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a0:	2208      	movs	r2, #8
 80038a2:	409a      	lsls	r2, r3
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	f043 0201 	orr.w	r2, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b8:	2201      	movs	r2, #1
 80038ba:	409a      	lsls	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d012      	beq.n	80038ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00b      	beq.n	80038ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d6:	2201      	movs	r2, #1
 80038d8:	409a      	lsls	r2, r3
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e2:	f043 0202 	orr.w	r2, r3, #2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ee:	2204      	movs	r2, #4
 80038f0:	409a      	lsls	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d012      	beq.n	8003920 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00b      	beq.n	8003920 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390c:	2204      	movs	r2, #4
 800390e:	409a      	lsls	r2, r3
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003918:	f043 0204 	orr.w	r2, r3, #4
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003924:	2210      	movs	r2, #16
 8003926:	409a      	lsls	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4013      	ands	r3, r2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d043      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d03c      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003942:	2210      	movs	r2, #16
 8003944:	409a      	lsls	r2, r3
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d018      	beq.n	800398a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d108      	bne.n	8003978 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d024      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	4798      	blx	r3
 8003976:	e01f      	b.n	80039b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01b      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4798      	blx	r3
 8003988:	e016      	b.n	80039b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d107      	bne.n	80039a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0208 	bic.w	r2, r2, #8
 80039a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039bc:	2220      	movs	r2, #32
 80039be:	409a      	lsls	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 808e 	beq.w	8003ae6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 8086 	beq.w	8003ae6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039de:	2220      	movs	r2, #32
 80039e0:	409a      	lsls	r2, r3
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b05      	cmp	r3, #5
 80039f0:	d136      	bne.n	8003a60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0216 	bic.w	r2, r2, #22
 8003a00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d103      	bne.n	8003a22 <HAL_DMA_IRQHandler+0x1da>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d007      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0208 	bic.w	r2, r2, #8
 8003a30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a36:	223f      	movs	r2, #63	; 0x3f
 8003a38:	409a      	lsls	r2, r3
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d07d      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	4798      	blx	r3
        }
        return;
 8003a5e:	e078      	b.n	8003b52 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01c      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d108      	bne.n	8003a8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d030      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	4798      	blx	r3
 8003a8c:	e02b      	b.n	8003ae6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d027      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	4798      	blx	r3
 8003a9e:	e022      	b.n	8003ae6 <HAL_DMA_IRQHandler+0x29e>
 8003aa0:	20000000 	.word	0x20000000
 8003aa4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10f      	bne.n	8003ad6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0210 	bic.w	r2, r2, #16
 8003ac4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d032      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d022      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2205      	movs	r2, #5
 8003afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0201 	bic.w	r2, r2, #1
 8003b10:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	3301      	adds	r3, #1
 8003b16:	60bb      	str	r3, [r7, #8]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d307      	bcc.n	8003b2e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1f2      	bne.n	8003b12 <HAL_DMA_IRQHandler+0x2ca>
 8003b2c:	e000      	b.n	8003b30 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003b2e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	4798      	blx	r3
 8003b50:	e000      	b.n	8003b54 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003b52:	bf00      	nop
    }
  }
}
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop

08003b5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b40      	cmp	r3, #64	; 0x40
 8003b88:	d108      	bne.n	8003b9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b9a:	e007      	b.n	8003bac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	60da      	str	r2, [r3, #12]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	3b10      	subs	r3, #16
 8003bc8:	4a14      	ldr	r2, [pc, #80]	; (8003c1c <DMA_CalcBaseAndBitshift+0x64>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	091b      	lsrs	r3, r3, #4
 8003bd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bd2:	4a13      	ldr	r2, [pc, #76]	; (8003c20 <DMA_CalcBaseAndBitshift+0x68>)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d909      	bls.n	8003bfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bee:	f023 0303 	bic.w	r3, r3, #3
 8003bf2:	1d1a      	adds	r2, r3, #4
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	659a      	str	r2, [r3, #88]	; 0x58
 8003bf8:	e007      	b.n	8003c0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c02:	f023 0303 	bic.w	r3, r3, #3
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	aaaaaaab 	.word	0xaaaaaaab
 8003c20:	08007738 	.word	0x08007738

08003c24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d11f      	bne.n	8003c7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d855      	bhi.n	8003cf0 <DMA_CheckFifoParam+0xcc>
 8003c44:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <DMA_CheckFifoParam+0x28>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c5d 	.word	0x08003c5d
 8003c50:	08003c6f 	.word	0x08003c6f
 8003c54:	08003c5d 	.word	0x08003c5d
 8003c58:	08003cf1 	.word	0x08003cf1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d045      	beq.n	8003cf4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c6c:	e042      	b.n	8003cf4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c76:	d13f      	bne.n	8003cf8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c7c:	e03c      	b.n	8003cf8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c86:	d121      	bne.n	8003ccc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d836      	bhi.n	8003cfc <DMA_CheckFifoParam+0xd8>
 8003c8e:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <DMA_CheckFifoParam+0x70>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003ca5 	.word	0x08003ca5
 8003c98:	08003cab 	.word	0x08003cab
 8003c9c:	08003ca5 	.word	0x08003ca5
 8003ca0:	08003cbd 	.word	0x08003cbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca8:	e02f      	b.n	8003d0a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d024      	beq.n	8003d00 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cba:	e021      	b.n	8003d00 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cc4:	d11e      	bne.n	8003d04 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cca:	e01b      	b.n	8003d04 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d902      	bls.n	8003cd8 <DMA_CheckFifoParam+0xb4>
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	d003      	beq.n	8003cde <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003cd6:	e018      	b.n	8003d0a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]
      break;
 8003cdc:	e015      	b.n	8003d0a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00e      	beq.n	8003d08 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	73fb      	strb	r3, [r7, #15]
      break;
 8003cee:	e00b      	b.n	8003d08 <DMA_CheckFifoParam+0xe4>
      break;
 8003cf0:	bf00      	nop
 8003cf2:	e00a      	b.n	8003d0a <DMA_CheckFifoParam+0xe6>
      break;
 8003cf4:	bf00      	nop
 8003cf6:	e008      	b.n	8003d0a <DMA_CheckFifoParam+0xe6>
      break;
 8003cf8:	bf00      	nop
 8003cfa:	e006      	b.n	8003d0a <DMA_CheckFifoParam+0xe6>
      break;
 8003cfc:	bf00      	nop
 8003cfe:	e004      	b.n	8003d0a <DMA_CheckFifoParam+0xe6>
      break;
 8003d00:	bf00      	nop
 8003d02:	e002      	b.n	8003d0a <DMA_CheckFifoParam+0xe6>
      break;   
 8003d04:	bf00      	nop
 8003d06:	e000      	b.n	8003d0a <DMA_CheckFifoParam+0xe6>
      break;
 8003d08:	bf00      	nop
    }
  } 
  
  return status; 
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b089      	sub	sp, #36	; 0x24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
 8003d32:	e159      	b.n	8003fe8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d34:	2201      	movs	r2, #1
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4013      	ands	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	f040 8148 	bne.w	8003fe2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d00b      	beq.n	8003d72 <HAL_GPIO_Init+0x5a>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d007      	beq.n	8003d72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d66:	2b11      	cmp	r3, #17
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b12      	cmp	r3, #18
 8003d70:	d130      	bne.n	8003dd4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	2203      	movs	r2, #3
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43db      	mvns	r3, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4013      	ands	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003da8:	2201      	movs	r2, #1
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	43db      	mvns	r3, r3
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4013      	ands	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	091b      	lsrs	r3, r3, #4
 8003dbe:	f003 0201 	and.w	r2, r3, #1
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	2203      	movs	r2, #3
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4013      	ands	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d003      	beq.n	8003e14 <HAL_GPIO_Init+0xfc>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b12      	cmp	r3, #18
 8003e12:	d123      	bne.n	8003e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	08da      	lsrs	r2, r3, #3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3208      	adds	r2, #8
 8003e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	220f      	movs	r2, #15
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	43db      	mvns	r3, r3
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	4013      	ands	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	08da      	lsrs	r2, r3, #3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3208      	adds	r2, #8
 8003e56:	69b9      	ldr	r1, [r7, #24]
 8003e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	2203      	movs	r2, #3
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f003 0203 	and.w	r2, r3, #3
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 80a2 	beq.w	8003fe2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	4b56      	ldr	r3, [pc, #344]	; (8003ffc <HAL_GPIO_Init+0x2e4>)
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	4a55      	ldr	r2, [pc, #340]	; (8003ffc <HAL_GPIO_Init+0x2e4>)
 8003ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eac:	6453      	str	r3, [r2, #68]	; 0x44
 8003eae:	4b53      	ldr	r3, [pc, #332]	; (8003ffc <HAL_GPIO_Init+0x2e4>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003eba:	4a51      	ldr	r2, [pc, #324]	; (8004000 <HAL_GPIO_Init+0x2e8>)
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	089b      	lsrs	r3, r3, #2
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	220f      	movs	r2, #15
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a48      	ldr	r2, [pc, #288]	; (8004004 <HAL_GPIO_Init+0x2ec>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d019      	beq.n	8003f1a <HAL_GPIO_Init+0x202>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a47      	ldr	r2, [pc, #284]	; (8004008 <HAL_GPIO_Init+0x2f0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <HAL_GPIO_Init+0x1fe>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a46      	ldr	r2, [pc, #280]	; (800400c <HAL_GPIO_Init+0x2f4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00d      	beq.n	8003f12 <HAL_GPIO_Init+0x1fa>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a45      	ldr	r2, [pc, #276]	; (8004010 <HAL_GPIO_Init+0x2f8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d007      	beq.n	8003f0e <HAL_GPIO_Init+0x1f6>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a44      	ldr	r2, [pc, #272]	; (8004014 <HAL_GPIO_Init+0x2fc>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d101      	bne.n	8003f0a <HAL_GPIO_Init+0x1f2>
 8003f06:	2304      	movs	r3, #4
 8003f08:	e008      	b.n	8003f1c <HAL_GPIO_Init+0x204>
 8003f0a:	2307      	movs	r3, #7
 8003f0c:	e006      	b.n	8003f1c <HAL_GPIO_Init+0x204>
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e004      	b.n	8003f1c <HAL_GPIO_Init+0x204>
 8003f12:	2302      	movs	r3, #2
 8003f14:	e002      	b.n	8003f1c <HAL_GPIO_Init+0x204>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <HAL_GPIO_Init+0x204>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	69fa      	ldr	r2, [r7, #28]
 8003f1e:	f002 0203 	and.w	r2, r2, #3
 8003f22:	0092      	lsls	r2, r2, #2
 8003f24:	4093      	lsls	r3, r2
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f2c:	4934      	ldr	r1, [pc, #208]	; (8004000 <HAL_GPIO_Init+0x2e8>)
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	089b      	lsrs	r3, r3, #2
 8003f32:	3302      	adds	r3, #2
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f3a:	4b37      	ldr	r3, [pc, #220]	; (8004018 <HAL_GPIO_Init+0x300>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	43db      	mvns	r3, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4013      	ands	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f5e:	4a2e      	ldr	r2, [pc, #184]	; (8004018 <HAL_GPIO_Init+0x300>)
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f64:	4b2c      	ldr	r3, [pc, #176]	; (8004018 <HAL_GPIO_Init+0x300>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4013      	ands	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f88:	4a23      	ldr	r2, [pc, #140]	; (8004018 <HAL_GPIO_Init+0x300>)
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f8e:	4b22      	ldr	r3, [pc, #136]	; (8004018 <HAL_GPIO_Init+0x300>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	43db      	mvns	r3, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fb2:	4a19      	ldr	r2, [pc, #100]	; (8004018 <HAL_GPIO_Init+0x300>)
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fb8:	4b17      	ldr	r3, [pc, #92]	; (8004018 <HAL_GPIO_Init+0x300>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fdc:	4a0e      	ldr	r2, [pc, #56]	; (8004018 <HAL_GPIO_Init+0x300>)
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	61fb      	str	r3, [r7, #28]
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	2b0f      	cmp	r3, #15
 8003fec:	f67f aea2 	bls.w	8003d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ff0:	bf00      	nop
 8003ff2:	3724      	adds	r7, #36	; 0x24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	40023800 	.word	0x40023800
 8004000:	40013800 	.word	0x40013800
 8004004:	40020000 	.word	0x40020000
 8004008:	40020400 	.word	0x40020400
 800400c:	40020800 	.word	0x40020800
 8004010:	40020c00 	.word	0x40020c00
 8004014:	40021000 	.word	0x40021000
 8004018:	40013c00 	.word	0x40013c00

0800401c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	887b      	ldrh	r3, [r7, #2]
 800402e:	4013      	ands	r3, r2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004034:	2301      	movs	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]
 8004038:	e001      	b.n	800403e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800403a:	2300      	movs	r3, #0
 800403c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800403e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	807b      	strh	r3, [r7, #2]
 8004058:	4613      	mov	r3, r2
 800405a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800405c:	787b      	ldrb	r3, [r7, #1]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004062:	887a      	ldrh	r2, [r7, #2]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004068:	e003      	b.n	8004072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800406a:	887b      	ldrh	r3, [r7, #2]
 800406c:	041a      	lsls	r2, r3, #16
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	619a      	str	r2, [r3, #24]
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e25b      	b.n	800454a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d075      	beq.n	800418a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800409e:	4ba3      	ldr	r3, [pc, #652]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 030c 	and.w	r3, r3, #12
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d00c      	beq.n	80040c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040aa:	4ba0      	ldr	r3, [pc, #640]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d112      	bne.n	80040dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b6:	4b9d      	ldr	r3, [pc, #628]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c2:	d10b      	bne.n	80040dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	4b99      	ldr	r3, [pc, #612]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d05b      	beq.n	8004188 <HAL_RCC_OscConfig+0x108>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d157      	bne.n	8004188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e236      	b.n	800454a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e4:	d106      	bne.n	80040f4 <HAL_RCC_OscConfig+0x74>
 80040e6:	4b91      	ldr	r3, [pc, #580]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a90      	ldr	r2, [pc, #576]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80040ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e01d      	b.n	8004130 <HAL_RCC_OscConfig+0xb0>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040fc:	d10c      	bne.n	8004118 <HAL_RCC_OscConfig+0x98>
 80040fe:	4b8b      	ldr	r3, [pc, #556]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a8a      	ldr	r2, [pc, #552]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 8004104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	4b88      	ldr	r3, [pc, #544]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a87      	ldr	r2, [pc, #540]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e00b      	b.n	8004130 <HAL_RCC_OscConfig+0xb0>
 8004118:	4b84      	ldr	r3, [pc, #528]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a83      	ldr	r2, [pc, #524]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 800411e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	4b81      	ldr	r3, [pc, #516]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a80      	ldr	r2, [pc, #512]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 800412a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800412e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d013      	beq.n	8004160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004138:	f7fe fb2a 	bl	8002790 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004140:	f7fe fb26 	bl	8002790 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b64      	cmp	r3, #100	; 0x64
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e1fb      	b.n	800454a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004152:	4b76      	ldr	r3, [pc, #472]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0xc0>
 800415e:	e014      	b.n	800418a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004160:	f7fe fb16 	bl	8002790 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004168:	f7fe fb12 	bl	8002790 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b64      	cmp	r3, #100	; 0x64
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e1e7      	b.n	800454a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417a:	4b6c      	ldr	r3, [pc, #432]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f0      	bne.n	8004168 <HAL_RCC_OscConfig+0xe8>
 8004186:	e000      	b.n	800418a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d063      	beq.n	800425e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004196:	4b65      	ldr	r3, [pc, #404]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00b      	beq.n	80041ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041a2:	4b62      	ldr	r3, [pc, #392]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d11c      	bne.n	80041e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ae:	4b5f      	ldr	r3, [pc, #380]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d116      	bne.n	80041e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ba:	4b5c      	ldr	r3, [pc, #368]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <HAL_RCC_OscConfig+0x152>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d001      	beq.n	80041d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e1bb      	b.n	800454a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d2:	4b56      	ldr	r3, [pc, #344]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	4952      	ldr	r1, [pc, #328]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e6:	e03a      	b.n	800425e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d020      	beq.n	8004232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f0:	4b4f      	ldr	r3, [pc, #316]	; (8004330 <HAL_RCC_OscConfig+0x2b0>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f6:	f7fe facb 	bl	8002790 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041fe:	f7fe fac7 	bl	8002790 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e19c      	b.n	800454a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004210:	4b46      	ldr	r3, [pc, #280]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421c:	4b43      	ldr	r3, [pc, #268]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	4940      	ldr	r1, [pc, #256]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 800422c:	4313      	orrs	r3, r2
 800422e:	600b      	str	r3, [r1, #0]
 8004230:	e015      	b.n	800425e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004232:	4b3f      	ldr	r3, [pc, #252]	; (8004330 <HAL_RCC_OscConfig+0x2b0>)
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004238:	f7fe faaa 	bl	8002790 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004240:	f7fe faa6 	bl	8002790 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e17b      	b.n	800454a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004252:	4b36      	ldr	r3, [pc, #216]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d030      	beq.n	80042cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d016      	beq.n	80042a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004272:	4b30      	ldr	r3, [pc, #192]	; (8004334 <HAL_RCC_OscConfig+0x2b4>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fe fa8a 	bl	8002790 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004280:	f7fe fa86 	bl	8002790 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e15b      	b.n	800454a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004292:	4b26      	ldr	r3, [pc, #152]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 8004294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0x200>
 800429e:	e015      	b.n	80042cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a0:	4b24      	ldr	r3, [pc, #144]	; (8004334 <HAL_RCC_OscConfig+0x2b4>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a6:	f7fe fa73 	bl	8002790 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ae:	f7fe fa6f 	bl	8002790 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e144      	b.n	800454a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c0:	4b1a      	ldr	r3, [pc, #104]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80042c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f0      	bne.n	80042ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 80a0 	beq.w	800441a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042da:	2300      	movs	r3, #0
 80042dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042de:	4b13      	ldr	r3, [pc, #76]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10f      	bne.n	800430a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ea:	2300      	movs	r3, #0
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	4b0f      	ldr	r3, [pc, #60]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	4a0e      	ldr	r2, [pc, #56]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80042f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f8:	6413      	str	r3, [r2, #64]	; 0x40
 80042fa:	4b0c      	ldr	r3, [pc, #48]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004302:	60bb      	str	r3, [r7, #8]
 8004304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004306:	2301      	movs	r3, #1
 8004308:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430a:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <HAL_RCC_OscConfig+0x2b8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004312:	2b00      	cmp	r3, #0
 8004314:	d121      	bne.n	800435a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004316:	4b08      	ldr	r3, [pc, #32]	; (8004338 <HAL_RCC_OscConfig+0x2b8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a07      	ldr	r2, [pc, #28]	; (8004338 <HAL_RCC_OscConfig+0x2b8>)
 800431c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004322:	f7fe fa35 	bl	8002790 <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004328:	e011      	b.n	800434e <HAL_RCC_OscConfig+0x2ce>
 800432a:	bf00      	nop
 800432c:	40023800 	.word	0x40023800
 8004330:	42470000 	.word	0x42470000
 8004334:	42470e80 	.word	0x42470e80
 8004338:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800433c:	f7fe fa28 	bl	8002790 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e0fd      	b.n	800454a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434e:	4b81      	ldr	r3, [pc, #516]	; (8004554 <HAL_RCC_OscConfig+0x4d4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d106      	bne.n	8004370 <HAL_RCC_OscConfig+0x2f0>
 8004362:	4b7d      	ldr	r3, [pc, #500]	; (8004558 <HAL_RCC_OscConfig+0x4d8>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004366:	4a7c      	ldr	r2, [pc, #496]	; (8004558 <HAL_RCC_OscConfig+0x4d8>)
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	6713      	str	r3, [r2, #112]	; 0x70
 800436e:	e01c      	b.n	80043aa <HAL_RCC_OscConfig+0x32a>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b05      	cmp	r3, #5
 8004376:	d10c      	bne.n	8004392 <HAL_RCC_OscConfig+0x312>
 8004378:	4b77      	ldr	r3, [pc, #476]	; (8004558 <HAL_RCC_OscConfig+0x4d8>)
 800437a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437c:	4a76      	ldr	r2, [pc, #472]	; (8004558 <HAL_RCC_OscConfig+0x4d8>)
 800437e:	f043 0304 	orr.w	r3, r3, #4
 8004382:	6713      	str	r3, [r2, #112]	; 0x70
 8004384:	4b74      	ldr	r3, [pc, #464]	; (8004558 <HAL_RCC_OscConfig+0x4d8>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004388:	4a73      	ldr	r2, [pc, #460]	; (8004558 <HAL_RCC_OscConfig+0x4d8>)
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	6713      	str	r3, [r2, #112]	; 0x70
 8004390:	e00b      	b.n	80043aa <HAL_RCC_OscConfig+0x32a>
 8004392:	4b71      	ldr	r3, [pc, #452]	; (8004558 <HAL_RCC_OscConfig+0x4d8>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	4a70      	ldr	r2, [pc, #448]	; (8004558 <HAL_RCC_OscConfig+0x4d8>)
 8004398:	f023 0301 	bic.w	r3, r3, #1
 800439c:	6713      	str	r3, [r2, #112]	; 0x70
 800439e:	4b6e      	ldr	r3, [pc, #440]	; (8004558 <HAL_RCC_OscConfig+0x4d8>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a2:	4a6d      	ldr	r2, [pc, #436]	; (8004558 <HAL_RCC_OscConfig+0x4d8>)
 80043a4:	f023 0304 	bic.w	r3, r3, #4
 80043a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d015      	beq.n	80043de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b2:	f7fe f9ed 	bl	8002790 <HAL_GetTick>
 80043b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b8:	e00a      	b.n	80043d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ba:	f7fe f9e9 	bl	8002790 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e0bc      	b.n	800454a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d0:	4b61      	ldr	r3, [pc, #388]	; (8004558 <HAL_RCC_OscConfig+0x4d8>)
 80043d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0ee      	beq.n	80043ba <HAL_RCC_OscConfig+0x33a>
 80043dc:	e014      	b.n	8004408 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043de:	f7fe f9d7 	bl	8002790 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e4:	e00a      	b.n	80043fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e6:	f7fe f9d3 	bl	8002790 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e0a6      	b.n	800454a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043fc:	4b56      	ldr	r3, [pc, #344]	; (8004558 <HAL_RCC_OscConfig+0x4d8>)
 80043fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1ee      	bne.n	80043e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004408:	7dfb      	ldrb	r3, [r7, #23]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d105      	bne.n	800441a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800440e:	4b52      	ldr	r3, [pc, #328]	; (8004558 <HAL_RCC_OscConfig+0x4d8>)
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	4a51      	ldr	r2, [pc, #324]	; (8004558 <HAL_RCC_OscConfig+0x4d8>)
 8004414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004418:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 8092 	beq.w	8004548 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004424:	4b4c      	ldr	r3, [pc, #304]	; (8004558 <HAL_RCC_OscConfig+0x4d8>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 030c 	and.w	r3, r3, #12
 800442c:	2b08      	cmp	r3, #8
 800442e:	d05c      	beq.n	80044ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	2b02      	cmp	r3, #2
 8004436:	d141      	bne.n	80044bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004438:	4b48      	ldr	r3, [pc, #288]	; (800455c <HAL_RCC_OscConfig+0x4dc>)
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443e:	f7fe f9a7 	bl	8002790 <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004446:	f7fe f9a3 	bl	8002790 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e078      	b.n	800454a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004458:	4b3f      	ldr	r3, [pc, #252]	; (8004558 <HAL_RCC_OscConfig+0x4d8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1f0      	bne.n	8004446 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	019b      	lsls	r3, r3, #6
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	085b      	lsrs	r3, r3, #1
 800447c:	3b01      	subs	r3, #1
 800447e:	041b      	lsls	r3, r3, #16
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004486:	061b      	lsls	r3, r3, #24
 8004488:	4933      	ldr	r1, [pc, #204]	; (8004558 <HAL_RCC_OscConfig+0x4d8>)
 800448a:	4313      	orrs	r3, r2
 800448c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800448e:	4b33      	ldr	r3, [pc, #204]	; (800455c <HAL_RCC_OscConfig+0x4dc>)
 8004490:	2201      	movs	r2, #1
 8004492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004494:	f7fe f97c 	bl	8002790 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800449c:	f7fe f978 	bl	8002790 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e04d      	b.n	800454a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ae:	4b2a      	ldr	r3, [pc, #168]	; (8004558 <HAL_RCC_OscConfig+0x4d8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f0      	beq.n	800449c <HAL_RCC_OscConfig+0x41c>
 80044ba:	e045      	b.n	8004548 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044bc:	4b27      	ldr	r3, [pc, #156]	; (800455c <HAL_RCC_OscConfig+0x4dc>)
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c2:	f7fe f965 	bl	8002790 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ca:	f7fe f961 	bl	8002790 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e036      	b.n	800454a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044dc:	4b1e      	ldr	r3, [pc, #120]	; (8004558 <HAL_RCC_OscConfig+0x4d8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f0      	bne.n	80044ca <HAL_RCC_OscConfig+0x44a>
 80044e8:	e02e      	b.n	8004548 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d101      	bne.n	80044f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e029      	b.n	800454a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044f6:	4b18      	ldr	r3, [pc, #96]	; (8004558 <HAL_RCC_OscConfig+0x4d8>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	429a      	cmp	r2, r3
 8004508:	d11c      	bne.n	8004544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004514:	429a      	cmp	r2, r3
 8004516:	d115      	bne.n	8004544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800451e:	4013      	ands	r3, r2
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004524:	4293      	cmp	r3, r2
 8004526:	d10d      	bne.n	8004544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004532:	429a      	cmp	r2, r3
 8004534:	d106      	bne.n	8004544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004540:	429a      	cmp	r2, r3
 8004542:	d001      	beq.n	8004548 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40007000 	.word	0x40007000
 8004558:	40023800 	.word	0x40023800
 800455c:	42470060 	.word	0x42470060

08004560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e0cc      	b.n	800470e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004574:	4b68      	ldr	r3, [pc, #416]	; (8004718 <HAL_RCC_ClockConfig+0x1b8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d90c      	bls.n	800459c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004582:	4b65      	ldr	r3, [pc, #404]	; (8004718 <HAL_RCC_ClockConfig+0x1b8>)
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458a:	4b63      	ldr	r3, [pc, #396]	; (8004718 <HAL_RCC_ClockConfig+0x1b8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d001      	beq.n	800459c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0b8      	b.n	800470e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d020      	beq.n	80045ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045b4:	4b59      	ldr	r3, [pc, #356]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	4a58      	ldr	r2, [pc, #352]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045cc:	4b53      	ldr	r3, [pc, #332]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	4a52      	ldr	r2, [pc, #328]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d8:	4b50      	ldr	r3, [pc, #320]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	494d      	ldr	r1, [pc, #308]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d044      	beq.n	8004680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d107      	bne.n	800460e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fe:	4b47      	ldr	r3, [pc, #284]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d119      	bne.n	800463e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e07f      	b.n	800470e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b02      	cmp	r3, #2
 8004614:	d003      	beq.n	800461e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800461a:	2b03      	cmp	r3, #3
 800461c:	d107      	bne.n	800462e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461e:	4b3f      	ldr	r3, [pc, #252]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d109      	bne.n	800463e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e06f      	b.n	800470e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462e:	4b3b      	ldr	r3, [pc, #236]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e067      	b.n	800470e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800463e:	4b37      	ldr	r3, [pc, #220]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f023 0203 	bic.w	r2, r3, #3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	4934      	ldr	r1, [pc, #208]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 800464c:	4313      	orrs	r3, r2
 800464e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004650:	f7fe f89e 	bl	8002790 <HAL_GetTick>
 8004654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004656:	e00a      	b.n	800466e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004658:	f7fe f89a 	bl	8002790 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	f241 3288 	movw	r2, #5000	; 0x1388
 8004666:	4293      	cmp	r3, r2
 8004668:	d901      	bls.n	800466e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e04f      	b.n	800470e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466e:	4b2b      	ldr	r3, [pc, #172]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 020c 	and.w	r2, r3, #12
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	429a      	cmp	r2, r3
 800467e:	d1eb      	bne.n	8004658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004680:	4b25      	ldr	r3, [pc, #148]	; (8004718 <HAL_RCC_ClockConfig+0x1b8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d20c      	bcs.n	80046a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468e:	4b22      	ldr	r3, [pc, #136]	; (8004718 <HAL_RCC_ClockConfig+0x1b8>)
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004696:	4b20      	ldr	r3, [pc, #128]	; (8004718 <HAL_RCC_ClockConfig+0x1b8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d001      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e032      	b.n	800470e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d008      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b4:	4b19      	ldr	r3, [pc, #100]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4916      	ldr	r1, [pc, #88]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d009      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046d2:	4b12      	ldr	r3, [pc, #72]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	490e      	ldr	r1, [pc, #56]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046e6:	f000 f821 	bl	800472c <HAL_RCC_GetSysClockFreq>
 80046ea:	4601      	mov	r1, r0
 80046ec:	4b0b      	ldr	r3, [pc, #44]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	091b      	lsrs	r3, r3, #4
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	4a0a      	ldr	r2, [pc, #40]	; (8004720 <HAL_RCC_ClockConfig+0x1c0>)
 80046f8:	5cd3      	ldrb	r3, [r2, r3]
 80046fa:	fa21 f303 	lsr.w	r3, r1, r3
 80046fe:	4a09      	ldr	r2, [pc, #36]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004702:	4b09      	ldr	r3, [pc, #36]	; (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f7fd fffe 	bl	8002708 <HAL_InitTick>

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40023c00 	.word	0x40023c00
 800471c:	40023800 	.word	0x40023800
 8004720:	08007720 	.word	0x08007720
 8004724:	20000000 	.word	0x20000000
 8004728:	20000004 	.word	0x20000004

0800472c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800472c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	607b      	str	r3, [r7, #4]
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	2300      	movs	r3, #0
 800473c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004742:	4b50      	ldr	r3, [pc, #320]	; (8004884 <HAL_RCC_GetSysClockFreq+0x158>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b04      	cmp	r3, #4
 800474c:	d007      	beq.n	800475e <HAL_RCC_GetSysClockFreq+0x32>
 800474e:	2b08      	cmp	r3, #8
 8004750:	d008      	beq.n	8004764 <HAL_RCC_GetSysClockFreq+0x38>
 8004752:	2b00      	cmp	r3, #0
 8004754:	f040 808d 	bne.w	8004872 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004758:	4b4b      	ldr	r3, [pc, #300]	; (8004888 <HAL_RCC_GetSysClockFreq+0x15c>)
 800475a:	60bb      	str	r3, [r7, #8]
       break;
 800475c:	e08c      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800475e:	4b4b      	ldr	r3, [pc, #300]	; (800488c <HAL_RCC_GetSysClockFreq+0x160>)
 8004760:	60bb      	str	r3, [r7, #8]
      break;
 8004762:	e089      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004764:	4b47      	ldr	r3, [pc, #284]	; (8004884 <HAL_RCC_GetSysClockFreq+0x158>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800476c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800476e:	4b45      	ldr	r3, [pc, #276]	; (8004884 <HAL_RCC_GetSysClockFreq+0x158>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d023      	beq.n	80047c2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800477a:	4b42      	ldr	r3, [pc, #264]	; (8004884 <HAL_RCC_GetSysClockFreq+0x158>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	099b      	lsrs	r3, r3, #6
 8004780:	f04f 0400 	mov.w	r4, #0
 8004784:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	ea03 0501 	and.w	r5, r3, r1
 8004790:	ea04 0602 	and.w	r6, r4, r2
 8004794:	4a3d      	ldr	r2, [pc, #244]	; (800488c <HAL_RCC_GetSysClockFreq+0x160>)
 8004796:	fb02 f106 	mul.w	r1, r2, r6
 800479a:	2200      	movs	r2, #0
 800479c:	fb02 f205 	mul.w	r2, r2, r5
 80047a0:	440a      	add	r2, r1
 80047a2:	493a      	ldr	r1, [pc, #232]	; (800488c <HAL_RCC_GetSysClockFreq+0x160>)
 80047a4:	fba5 0101 	umull	r0, r1, r5, r1
 80047a8:	1853      	adds	r3, r2, r1
 80047aa:	4619      	mov	r1, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f04f 0400 	mov.w	r4, #0
 80047b2:	461a      	mov	r2, r3
 80047b4:	4623      	mov	r3, r4
 80047b6:	f7fc fa47 	bl	8000c48 <__aeabi_uldivmod>
 80047ba:	4603      	mov	r3, r0
 80047bc:	460c      	mov	r4, r1
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	e049      	b.n	8004856 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047c2:	4b30      	ldr	r3, [pc, #192]	; (8004884 <HAL_RCC_GetSysClockFreq+0x158>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	099b      	lsrs	r3, r3, #6
 80047c8:	f04f 0400 	mov.w	r4, #0
 80047cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	ea03 0501 	and.w	r5, r3, r1
 80047d8:	ea04 0602 	and.w	r6, r4, r2
 80047dc:	4629      	mov	r1, r5
 80047de:	4632      	mov	r2, r6
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	f04f 0400 	mov.w	r4, #0
 80047e8:	0154      	lsls	r4, r2, #5
 80047ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047ee:	014b      	lsls	r3, r1, #5
 80047f0:	4619      	mov	r1, r3
 80047f2:	4622      	mov	r2, r4
 80047f4:	1b49      	subs	r1, r1, r5
 80047f6:	eb62 0206 	sbc.w	r2, r2, r6
 80047fa:	f04f 0300 	mov.w	r3, #0
 80047fe:	f04f 0400 	mov.w	r4, #0
 8004802:	0194      	lsls	r4, r2, #6
 8004804:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004808:	018b      	lsls	r3, r1, #6
 800480a:	1a5b      	subs	r3, r3, r1
 800480c:	eb64 0402 	sbc.w	r4, r4, r2
 8004810:	f04f 0100 	mov.w	r1, #0
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	00e2      	lsls	r2, r4, #3
 800481a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800481e:	00d9      	lsls	r1, r3, #3
 8004820:	460b      	mov	r3, r1
 8004822:	4614      	mov	r4, r2
 8004824:	195b      	adds	r3, r3, r5
 8004826:	eb44 0406 	adc.w	r4, r4, r6
 800482a:	f04f 0100 	mov.w	r1, #0
 800482e:	f04f 0200 	mov.w	r2, #0
 8004832:	02a2      	lsls	r2, r4, #10
 8004834:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004838:	0299      	lsls	r1, r3, #10
 800483a:	460b      	mov	r3, r1
 800483c:	4614      	mov	r4, r2
 800483e:	4618      	mov	r0, r3
 8004840:	4621      	mov	r1, r4
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f04f 0400 	mov.w	r4, #0
 8004848:	461a      	mov	r2, r3
 800484a:	4623      	mov	r3, r4
 800484c:	f7fc f9fc 	bl	8000c48 <__aeabi_uldivmod>
 8004850:	4603      	mov	r3, r0
 8004852:	460c      	mov	r4, r1
 8004854:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004856:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <HAL_RCC_GetSysClockFreq+0x158>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	0c1b      	lsrs	r3, r3, #16
 800485c:	f003 0303 	and.w	r3, r3, #3
 8004860:	3301      	adds	r3, #1
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	fbb2 f3f3 	udiv	r3, r2, r3
 800486e:	60bb      	str	r3, [r7, #8]
      break;
 8004870:	e002      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004872:	4b05      	ldr	r3, [pc, #20]	; (8004888 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004874:	60bb      	str	r3, [r7, #8]
      break;
 8004876:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004878:	68bb      	ldr	r3, [r7, #8]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004882:	bf00      	nop
 8004884:	40023800 	.word	0x40023800
 8004888:	00f42400 	.word	0x00f42400
 800488c:	017d7840 	.word	0x017d7840

08004890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004894:	4b03      	ldr	r3, [pc, #12]	; (80048a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004896:	681b      	ldr	r3, [r3, #0]
}
 8004898:	4618      	mov	r0, r3
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	20000000 	.word	0x20000000

080048a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048ac:	f7ff fff0 	bl	8004890 <HAL_RCC_GetHCLKFreq>
 80048b0:	4601      	mov	r1, r0
 80048b2:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	0a9b      	lsrs	r3, r3, #10
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	4a03      	ldr	r2, [pc, #12]	; (80048cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048be:	5cd3      	ldrb	r3, [r2, r3]
 80048c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40023800 	.word	0x40023800
 80048cc:	08007730 	.word	0x08007730

080048d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048d4:	f7ff ffdc 	bl	8004890 <HAL_RCC_GetHCLKFreq>
 80048d8:	4601      	mov	r1, r0
 80048da:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	0b5b      	lsrs	r3, r3, #13
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	4a03      	ldr	r2, [pc, #12]	; (80048f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048e6:	5cd3      	ldrb	r3, [r2, r3]
 80048e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40023800 	.word	0x40023800
 80048f4:	08007730 	.word	0x08007730

080048f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e01d      	b.n	8004946 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d106      	bne.n	8004924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fd fd08 	bl	8002334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3304      	adds	r3, #4
 8004934:	4619      	mov	r1, r3
 8004936:	4610      	mov	r0, r2
 8004938:	f000 f8e4 	bl	8004b04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2202      	movs	r2, #2
 800495a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2b06      	cmp	r3, #6
 800496e:	d007      	beq.n	8004980 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0201 	orr.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b084      	sub	sp, #16
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <HAL_TIM_ConfigClockSource+0x18>
 80049aa:	2302      	movs	r3, #2
 80049ac:	e0a6      	b.n	8004afc <HAL_TIM_ConfigClockSource+0x166>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2202      	movs	r2, #2
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049cc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049d4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b40      	cmp	r3, #64	; 0x40
 80049e4:	d067      	beq.n	8004ab6 <HAL_TIM_ConfigClockSource+0x120>
 80049e6:	2b40      	cmp	r3, #64	; 0x40
 80049e8:	d80b      	bhi.n	8004a02 <HAL_TIM_ConfigClockSource+0x6c>
 80049ea:	2b10      	cmp	r3, #16
 80049ec:	d073      	beq.n	8004ad6 <HAL_TIM_ConfigClockSource+0x140>
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	d802      	bhi.n	80049f8 <HAL_TIM_ConfigClockSource+0x62>
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d06f      	beq.n	8004ad6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80049f6:	e078      	b.n	8004aea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	d06c      	beq.n	8004ad6 <HAL_TIM_ConfigClockSource+0x140>
 80049fc:	2b30      	cmp	r3, #48	; 0x30
 80049fe:	d06a      	beq.n	8004ad6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004a00:	e073      	b.n	8004aea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a02:	2b70      	cmp	r3, #112	; 0x70
 8004a04:	d00d      	beq.n	8004a22 <HAL_TIM_ConfigClockSource+0x8c>
 8004a06:	2b70      	cmp	r3, #112	; 0x70
 8004a08:	d804      	bhi.n	8004a14 <HAL_TIM_ConfigClockSource+0x7e>
 8004a0a:	2b50      	cmp	r3, #80	; 0x50
 8004a0c:	d033      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0xe0>
 8004a0e:	2b60      	cmp	r3, #96	; 0x60
 8004a10:	d041      	beq.n	8004a96 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004a12:	e06a      	b.n	8004aea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a18:	d066      	beq.n	8004ae8 <HAL_TIM_ConfigClockSource+0x152>
 8004a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a1e:	d017      	beq.n	8004a50 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004a20:	e063      	b.n	8004aea <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6818      	ldr	r0, [r3, #0]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	6899      	ldr	r1, [r3, #8]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f000 f961 	bl	8004cf8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	609a      	str	r2, [r3, #8]
      break;
 8004a4e:	e04c      	b.n	8004aea <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6818      	ldr	r0, [r3, #0]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	6899      	ldr	r1, [r3, #8]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f000 f94a 	bl	8004cf8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a72:	609a      	str	r2, [r3, #8]
      break;
 8004a74:	e039      	b.n	8004aea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6818      	ldr	r0, [r3, #0]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	6859      	ldr	r1, [r3, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	461a      	mov	r2, r3
 8004a84:	f000 f8be 	bl	8004c04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2150      	movs	r1, #80	; 0x50
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 f917 	bl	8004cc2 <TIM_ITRx_SetConfig>
      break;
 8004a94:	e029      	b.n	8004aea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	6859      	ldr	r1, [r3, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f000 f8dd 	bl	8004c62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2160      	movs	r1, #96	; 0x60
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 f907 	bl	8004cc2 <TIM_ITRx_SetConfig>
      break;
 8004ab4:	e019      	b.n	8004aea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	6859      	ldr	r1, [r3, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f000 f89e 	bl	8004c04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2140      	movs	r1, #64	; 0x40
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 f8f7 	bl	8004cc2 <TIM_ITRx_SetConfig>
      break;
 8004ad4:	e009      	b.n	8004aea <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	f000 f8ee 	bl	8004cc2 <TIM_ITRx_SetConfig>
      break;
 8004ae6:	e000      	b.n	8004aea <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004ae8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a34      	ldr	r2, [pc, #208]	; (8004be8 <TIM_Base_SetConfig+0xe4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d00f      	beq.n	8004b3c <TIM_Base_SetConfig+0x38>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b22:	d00b      	beq.n	8004b3c <TIM_Base_SetConfig+0x38>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a31      	ldr	r2, [pc, #196]	; (8004bec <TIM_Base_SetConfig+0xe8>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d007      	beq.n	8004b3c <TIM_Base_SetConfig+0x38>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a30      	ldr	r2, [pc, #192]	; (8004bf0 <TIM_Base_SetConfig+0xec>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d003      	beq.n	8004b3c <TIM_Base_SetConfig+0x38>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a2f      	ldr	r2, [pc, #188]	; (8004bf4 <TIM_Base_SetConfig+0xf0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d108      	bne.n	8004b4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a25      	ldr	r2, [pc, #148]	; (8004be8 <TIM_Base_SetConfig+0xe4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d01b      	beq.n	8004b8e <TIM_Base_SetConfig+0x8a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5c:	d017      	beq.n	8004b8e <TIM_Base_SetConfig+0x8a>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a22      	ldr	r2, [pc, #136]	; (8004bec <TIM_Base_SetConfig+0xe8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d013      	beq.n	8004b8e <TIM_Base_SetConfig+0x8a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a21      	ldr	r2, [pc, #132]	; (8004bf0 <TIM_Base_SetConfig+0xec>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d00f      	beq.n	8004b8e <TIM_Base_SetConfig+0x8a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a20      	ldr	r2, [pc, #128]	; (8004bf4 <TIM_Base_SetConfig+0xf0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00b      	beq.n	8004b8e <TIM_Base_SetConfig+0x8a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a1f      	ldr	r2, [pc, #124]	; (8004bf8 <TIM_Base_SetConfig+0xf4>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d007      	beq.n	8004b8e <TIM_Base_SetConfig+0x8a>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a1e      	ldr	r2, [pc, #120]	; (8004bfc <TIM_Base_SetConfig+0xf8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d003      	beq.n	8004b8e <TIM_Base_SetConfig+0x8a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a1d      	ldr	r2, [pc, #116]	; (8004c00 <TIM_Base_SetConfig+0xfc>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d108      	bne.n	8004ba0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a08      	ldr	r2, [pc, #32]	; (8004be8 <TIM_Base_SetConfig+0xe4>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d103      	bne.n	8004bd4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	615a      	str	r2, [r3, #20]
}
 8004bda:	bf00      	nop
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40010000 	.word	0x40010000
 8004bec:	40000400 	.word	0x40000400
 8004bf0:	40000800 	.word	0x40000800
 8004bf4:	40000c00 	.word	0x40000c00
 8004bf8:	40014000 	.word	0x40014000
 8004bfc:	40014400 	.word	0x40014400
 8004c00:	40014800 	.word	0x40014800

08004c04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	f023 0201 	bic.w	r2, r3, #1
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f023 030a 	bic.w	r3, r3, #10
 8004c40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	621a      	str	r2, [r3, #32]
}
 8004c56:	bf00      	nop
 8004c58:	371c      	adds	r7, #28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b087      	sub	sp, #28
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	f023 0210 	bic.w	r2, r3, #16
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	031b      	lsls	r3, r3, #12
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	621a      	str	r2, [r3, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b085      	sub	sp, #20
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f043 0307 	orr.w	r3, r3, #7
 8004ce4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	609a      	str	r2, [r3, #8]
}
 8004cec:	bf00      	nop
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	021a      	lsls	r2, r3, #8
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	609a      	str	r2, [r3, #8]
}
 8004d2c:	bf00      	nop
 8004d2e:	371c      	adds	r7, #28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e050      	b.n	8004df2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1c      	ldr	r2, [pc, #112]	; (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d018      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9c:	d013      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a18      	ldr	r2, [pc, #96]	; (8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00e      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a16      	ldr	r2, [pc, #88]	; (8004e08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d009      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a15      	ldr	r2, [pc, #84]	; (8004e0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d004      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a13      	ldr	r2, [pc, #76]	; (8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d10c      	bne.n	8004de0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40010000 	.word	0x40010000
 8004e04:	40000400 	.word	0x40000400
 8004e08:	40000800 	.word	0x40000800
 8004e0c:	40000c00 	.word	0x40000c00
 8004e10:	40014000 	.word	0x40014000

08004e14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e03f      	b.n	8004ea6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d106      	bne.n	8004e40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7fd fa9c 	bl	8002378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2224      	movs	r2, #36	; 0x24
 8004e44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fb97 	bl	800558c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	691a      	ldr	r2, [r3, #16]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695a      	ldr	r2, [r3, #20]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b088      	sub	sp, #32
 8004eb2:	af02      	add	r7, sp, #8
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	603b      	str	r3, [r7, #0]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	f040 8083 	bne.w	8004fd6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <HAL_UART_Transmit+0x2e>
 8004ed6:	88fb      	ldrh	r3, [r7, #6]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e07b      	b.n	8004fd8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d101      	bne.n	8004eee <HAL_UART_Transmit+0x40>
 8004eea:	2302      	movs	r3, #2
 8004eec:	e074      	b.n	8004fd8 <HAL_UART_Transmit+0x12a>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2221      	movs	r2, #33	; 0x21
 8004f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004f04:	f7fd fc44 	bl	8002790 <HAL_GetTick>
 8004f08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	88fa      	ldrh	r2, [r7, #6]
 8004f0e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	88fa      	ldrh	r2, [r7, #6]
 8004f14:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004f1e:	e042      	b.n	8004fa6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f36:	d122      	bne.n	8004f7e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2180      	movs	r1, #128	; 0x80
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 f9b6 	bl	80052b4 <UART_WaitOnFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e042      	b.n	8004fd8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f64:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d103      	bne.n	8004f76 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	3302      	adds	r3, #2
 8004f72:	60bb      	str	r3, [r7, #8]
 8004f74:	e017      	b.n	8004fa6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	60bb      	str	r3, [r7, #8]
 8004f7c:	e013      	b.n	8004fa6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2200      	movs	r2, #0
 8004f86:	2180      	movs	r1, #128	; 0x80
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f993 	bl	80052b4 <UART_WaitOnFlagUntilTimeout>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e01f      	b.n	8004fd8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	60ba      	str	r2, [r7, #8]
 8004f9e:	781a      	ldrb	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1b7      	bne.n	8004f20 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	2140      	movs	r1, #64	; 0x40
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f000 f97a 	bl	80052b4 <UART_WaitOnFlagUntilTimeout>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e006      	b.n	8004fd8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e000      	b.n	8004fd8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004fd6:	2302      	movs	r3, #2
  }
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	4613      	mov	r3, r2
 8004fec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	d140      	bne.n	800507c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <HAL_UART_Receive_IT+0x26>
 8005000:	88fb      	ldrh	r3, [r7, #6]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e039      	b.n	800507e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_UART_Receive_IT+0x38>
 8005014:	2302      	movs	r3, #2
 8005016:	e032      	b.n	800507e <HAL_UART_Receive_IT+0x9e>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	88fa      	ldrh	r2, [r7, #6]
 800502a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	88fa      	ldrh	r2, [r7, #6]
 8005030:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2222      	movs	r2, #34	; 0x22
 800503c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005056:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695a      	ldr	r2, [r3, #20]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0201 	orr.w	r2, r2, #1
 8005066:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0220 	orr.w	r2, r2, #32
 8005076:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	e000      	b.n	800507e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800507c:	2302      	movs	r3, #2
  }
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
	...

0800508c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10d      	bne.n	80050de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	f003 0320 	and.w	r3, r3, #32
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d008      	beq.n	80050de <HAL_UART_IRQHandler+0x52>
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	f003 0320 	and.w	r3, r3, #32
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f9d6 	bl	8005488 <UART_Receive_IT>
      return;
 80050dc:	e0d1      	b.n	8005282 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 80b0 	beq.w	8005246 <HAL_UART_IRQHandler+0x1ba>
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d105      	bne.n	80050fc <HAL_UART_IRQHandler+0x70>
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 80a5 	beq.w	8005246 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <HAL_UART_IRQHandler+0x90>
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510c:	2b00      	cmp	r3, #0
 800510e:	d005      	beq.n	800511c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005114:	f043 0201 	orr.w	r2, r3, #1
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <HAL_UART_IRQHandler+0xb0>
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005134:	f043 0202 	orr.w	r2, r3, #2
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <HAL_UART_IRQHandler+0xd0>
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005154:	f043 0204 	orr.w	r2, r3, #4
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00f      	beq.n	8005186 <HAL_UART_IRQHandler+0xfa>
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b00      	cmp	r3, #0
 800516e:	d104      	bne.n	800517a <HAL_UART_IRQHandler+0xee>
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d005      	beq.n	8005186 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517e:	f043 0208 	orr.w	r2, r3, #8
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518a:	2b00      	cmp	r3, #0
 800518c:	d078      	beq.n	8005280 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	f003 0320 	and.w	r3, r3, #32
 8005194:	2b00      	cmp	r3, #0
 8005196:	d007      	beq.n	80051a8 <HAL_UART_IRQHandler+0x11c>
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	f003 0320 	and.w	r3, r3, #32
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f970 	bl	8005488 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b2:	2b40      	cmp	r3, #64	; 0x40
 80051b4:	bf0c      	ite	eq
 80051b6:	2301      	moveq	r3, #1
 80051b8:	2300      	movne	r3, #0
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d102      	bne.n	80051d0 <HAL_UART_IRQHandler+0x144>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d031      	beq.n	8005234 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f8b9 	bl	8005348 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e0:	2b40      	cmp	r3, #64	; 0x40
 80051e2:	d123      	bne.n	800522c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695a      	ldr	r2, [r3, #20]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d013      	beq.n	8005224 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005200:	4a21      	ldr	r2, [pc, #132]	; (8005288 <HAL_UART_IRQHandler+0x1fc>)
 8005202:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005208:	4618      	mov	r0, r3
 800520a:	f7fe fafb 	bl	8003804 <HAL_DMA_Abort_IT>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d016      	beq.n	8005242 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800521e:	4610      	mov	r0, r2
 8005220:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005222:	e00e      	b.n	8005242 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f83b 	bl	80052a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800522a:	e00a      	b.n	8005242 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f837 	bl	80052a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005232:	e006      	b.n	8005242 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f833 	bl	80052a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005240:	e01e      	b.n	8005280 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005242:	bf00      	nop
    return;
 8005244:	e01c      	b.n	8005280 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524c:	2b00      	cmp	r3, #0
 800524e:	d008      	beq.n	8005262 <HAL_UART_IRQHandler+0x1d6>
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f8a6 	bl	80053ac <UART_Transmit_IT>
    return;
 8005260:	e00f      	b.n	8005282 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <HAL_UART_IRQHandler+0x1f6>
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f8ee 	bl	8005458 <UART_EndTransmit_IT>
    return;
 800527c:	bf00      	nop
 800527e:	e000      	b.n	8005282 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005280:	bf00      	nop
  }
}
 8005282:	3720      	adds	r7, #32
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	08005385 	.word	0x08005385

0800528c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	603b      	str	r3, [r7, #0]
 80052c0:	4613      	mov	r3, r2
 80052c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c4:	e02c      	b.n	8005320 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052cc:	d028      	beq.n	8005320 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d007      	beq.n	80052e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80052d4:	f7fd fa5c 	bl	8002790 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d21d      	bcs.n	8005320 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695a      	ldr	r2, [r3, #20]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0201 	bic.w	r2, r2, #1
 8005302:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e00f      	b.n	8005340 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	4013      	ands	r3, r2
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	429a      	cmp	r2, r3
 800532e:	bf0c      	ite	eq
 8005330:	2301      	moveq	r3, #1
 8005332:	2300      	movne	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	461a      	mov	r2, r3
 8005338:	79fb      	ldrb	r3, [r7, #7]
 800533a:	429a      	cmp	r2, r3
 800533c:	d0c3      	beq.n	80052c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800535e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695a      	ldr	r2, [r3, #20]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0201 	bic.w	r2, r2, #1
 800536e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005390:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f7ff ff7e 	bl	80052a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053a4:	bf00      	nop
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b21      	cmp	r3, #33	; 0x21
 80053be:	d144      	bne.n	800544a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c8:	d11a      	bne.n	8005400 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	461a      	mov	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053de:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d105      	bne.n	80053f4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	1c9a      	adds	r2, r3, #2
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	621a      	str	r2, [r3, #32]
 80053f2:	e00e      	b.n	8005412 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	621a      	str	r2, [r3, #32]
 80053fe:	e008      	b.n	8005412 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	1c59      	adds	r1, r3, #1
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6211      	str	r1, [r2, #32]
 800540a:	781a      	ldrb	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005416:	b29b      	uxth	r3, r3
 8005418:	3b01      	subs	r3, #1
 800541a:	b29b      	uxth	r3, r3
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	4619      	mov	r1, r3
 8005420:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10f      	bne.n	8005446 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005434:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005444:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005446:	2300      	movs	r3, #0
 8005448:	e000      	b.n	800544c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800544a:	2302      	movs	r3, #2
  }
}
 800544c:	4618      	mov	r0, r3
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800546e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2220      	movs	r2, #32
 8005474:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7ff ff07 	bl	800528c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b22      	cmp	r3, #34	; 0x22
 800549a:	d171      	bne.n	8005580 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a4:	d123      	bne.n	80054ee <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054aa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10e      	bne.n	80054d2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ca:	1c9a      	adds	r2, r3, #2
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	629a      	str	r2, [r3, #40]	; 0x28
 80054d0:	e029      	b.n	8005526 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	629a      	str	r2, [r3, #40]	; 0x28
 80054ec:	e01b      	b.n	8005526 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10a      	bne.n	800550c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6858      	ldr	r0, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005500:	1c59      	adds	r1, r3, #1
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6291      	str	r1, [r2, #40]	; 0x28
 8005506:	b2c2      	uxtb	r2, r0
 8005508:	701a      	strb	r2, [r3, #0]
 800550a:	e00c      	b.n	8005526 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	b2da      	uxtb	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005518:	1c58      	adds	r0, r3, #1
 800551a:	6879      	ldr	r1, [r7, #4]
 800551c:	6288      	str	r0, [r1, #40]	; 0x28
 800551e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800552a:	b29b      	uxth	r3, r3
 800552c:	3b01      	subs	r3, #1
 800552e:	b29b      	uxth	r3, r3
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	4619      	mov	r1, r3
 8005534:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005536:	2b00      	cmp	r3, #0
 8005538:	d120      	bne.n	800557c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0220 	bic.w	r2, r2, #32
 8005548:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005558:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	695a      	ldr	r2, [r3, #20]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0201 	bic.w	r2, r2, #1
 8005568:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2220      	movs	r2, #32
 800556e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fc fd94 	bl	80020a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	e002      	b.n	8005582 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	e000      	b.n	8005582 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005580:	2302      	movs	r3, #2
  }
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800558c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005590:	b085      	sub	sp, #20
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	431a      	orrs	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	431a      	orrs	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80055ce:	f023 030c 	bic.w	r3, r3, #12
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6812      	ldr	r2, [r2, #0]
 80055d6:	68f9      	ldr	r1, [r7, #12]
 80055d8:	430b      	orrs	r3, r1
 80055da:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	699a      	ldr	r2, [r3, #24]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055fa:	f040 818b 	bne.w	8005914 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4ac1      	ldr	r2, [pc, #772]	; (8005908 <UART_SetConfig+0x37c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d005      	beq.n	8005614 <UART_SetConfig+0x88>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4abf      	ldr	r2, [pc, #764]	; (800590c <UART_SetConfig+0x380>)
 800560e:	4293      	cmp	r3, r2
 8005610:	f040 80bd 	bne.w	800578e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005614:	f7ff f95c 	bl	80048d0 <HAL_RCC_GetPCLK2Freq>
 8005618:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	461d      	mov	r5, r3
 800561e:	f04f 0600 	mov.w	r6, #0
 8005622:	46a8      	mov	r8, r5
 8005624:	46b1      	mov	r9, r6
 8005626:	eb18 0308 	adds.w	r3, r8, r8
 800562a:	eb49 0409 	adc.w	r4, r9, r9
 800562e:	4698      	mov	r8, r3
 8005630:	46a1      	mov	r9, r4
 8005632:	eb18 0805 	adds.w	r8, r8, r5
 8005636:	eb49 0906 	adc.w	r9, r9, r6
 800563a:	f04f 0100 	mov.w	r1, #0
 800563e:	f04f 0200 	mov.w	r2, #0
 8005642:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005646:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800564a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800564e:	4688      	mov	r8, r1
 8005650:	4691      	mov	r9, r2
 8005652:	eb18 0005 	adds.w	r0, r8, r5
 8005656:	eb49 0106 	adc.w	r1, r9, r6
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	461d      	mov	r5, r3
 8005660:	f04f 0600 	mov.w	r6, #0
 8005664:	196b      	adds	r3, r5, r5
 8005666:	eb46 0406 	adc.w	r4, r6, r6
 800566a:	461a      	mov	r2, r3
 800566c:	4623      	mov	r3, r4
 800566e:	f7fb faeb 	bl	8000c48 <__aeabi_uldivmod>
 8005672:	4603      	mov	r3, r0
 8005674:	460c      	mov	r4, r1
 8005676:	461a      	mov	r2, r3
 8005678:	4ba5      	ldr	r3, [pc, #660]	; (8005910 <UART_SetConfig+0x384>)
 800567a:	fba3 2302 	umull	r2, r3, r3, r2
 800567e:	095b      	lsrs	r3, r3, #5
 8005680:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	461d      	mov	r5, r3
 8005688:	f04f 0600 	mov.w	r6, #0
 800568c:	46a9      	mov	r9, r5
 800568e:	46b2      	mov	sl, r6
 8005690:	eb19 0309 	adds.w	r3, r9, r9
 8005694:	eb4a 040a 	adc.w	r4, sl, sl
 8005698:	4699      	mov	r9, r3
 800569a:	46a2      	mov	sl, r4
 800569c:	eb19 0905 	adds.w	r9, r9, r5
 80056a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80056a4:	f04f 0100 	mov.w	r1, #0
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056b8:	4689      	mov	r9, r1
 80056ba:	4692      	mov	sl, r2
 80056bc:	eb19 0005 	adds.w	r0, r9, r5
 80056c0:	eb4a 0106 	adc.w	r1, sl, r6
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	461d      	mov	r5, r3
 80056ca:	f04f 0600 	mov.w	r6, #0
 80056ce:	196b      	adds	r3, r5, r5
 80056d0:	eb46 0406 	adc.w	r4, r6, r6
 80056d4:	461a      	mov	r2, r3
 80056d6:	4623      	mov	r3, r4
 80056d8:	f7fb fab6 	bl	8000c48 <__aeabi_uldivmod>
 80056dc:	4603      	mov	r3, r0
 80056de:	460c      	mov	r4, r1
 80056e0:	461a      	mov	r2, r3
 80056e2:	4b8b      	ldr	r3, [pc, #556]	; (8005910 <UART_SetConfig+0x384>)
 80056e4:	fba3 1302 	umull	r1, r3, r3, r2
 80056e8:	095b      	lsrs	r3, r3, #5
 80056ea:	2164      	movs	r1, #100	; 0x64
 80056ec:	fb01 f303 	mul.w	r3, r1, r3
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	3332      	adds	r3, #50	; 0x32
 80056f6:	4a86      	ldr	r2, [pc, #536]	; (8005910 <UART_SetConfig+0x384>)
 80056f8:	fba2 2303 	umull	r2, r3, r2, r3
 80056fc:	095b      	lsrs	r3, r3, #5
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005704:	4498      	add	r8, r3
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	461d      	mov	r5, r3
 800570a:	f04f 0600 	mov.w	r6, #0
 800570e:	46a9      	mov	r9, r5
 8005710:	46b2      	mov	sl, r6
 8005712:	eb19 0309 	adds.w	r3, r9, r9
 8005716:	eb4a 040a 	adc.w	r4, sl, sl
 800571a:	4699      	mov	r9, r3
 800571c:	46a2      	mov	sl, r4
 800571e:	eb19 0905 	adds.w	r9, r9, r5
 8005722:	eb4a 0a06 	adc.w	sl, sl, r6
 8005726:	f04f 0100 	mov.w	r1, #0
 800572a:	f04f 0200 	mov.w	r2, #0
 800572e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005732:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005736:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800573a:	4689      	mov	r9, r1
 800573c:	4692      	mov	sl, r2
 800573e:	eb19 0005 	adds.w	r0, r9, r5
 8005742:	eb4a 0106 	adc.w	r1, sl, r6
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	461d      	mov	r5, r3
 800574c:	f04f 0600 	mov.w	r6, #0
 8005750:	196b      	adds	r3, r5, r5
 8005752:	eb46 0406 	adc.w	r4, r6, r6
 8005756:	461a      	mov	r2, r3
 8005758:	4623      	mov	r3, r4
 800575a:	f7fb fa75 	bl	8000c48 <__aeabi_uldivmod>
 800575e:	4603      	mov	r3, r0
 8005760:	460c      	mov	r4, r1
 8005762:	461a      	mov	r2, r3
 8005764:	4b6a      	ldr	r3, [pc, #424]	; (8005910 <UART_SetConfig+0x384>)
 8005766:	fba3 1302 	umull	r1, r3, r3, r2
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	2164      	movs	r1, #100	; 0x64
 800576e:	fb01 f303 	mul.w	r3, r1, r3
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	3332      	adds	r3, #50	; 0x32
 8005778:	4a65      	ldr	r2, [pc, #404]	; (8005910 <UART_SetConfig+0x384>)
 800577a:	fba2 2303 	umull	r2, r3, r2, r3
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	f003 0207 	and.w	r2, r3, #7
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4442      	add	r2, r8
 800578a:	609a      	str	r2, [r3, #8]
 800578c:	e26f      	b.n	8005c6e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800578e:	f7ff f88b 	bl	80048a8 <HAL_RCC_GetPCLK1Freq>
 8005792:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	461d      	mov	r5, r3
 8005798:	f04f 0600 	mov.w	r6, #0
 800579c:	46a8      	mov	r8, r5
 800579e:	46b1      	mov	r9, r6
 80057a0:	eb18 0308 	adds.w	r3, r8, r8
 80057a4:	eb49 0409 	adc.w	r4, r9, r9
 80057a8:	4698      	mov	r8, r3
 80057aa:	46a1      	mov	r9, r4
 80057ac:	eb18 0805 	adds.w	r8, r8, r5
 80057b0:	eb49 0906 	adc.w	r9, r9, r6
 80057b4:	f04f 0100 	mov.w	r1, #0
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057c8:	4688      	mov	r8, r1
 80057ca:	4691      	mov	r9, r2
 80057cc:	eb18 0005 	adds.w	r0, r8, r5
 80057d0:	eb49 0106 	adc.w	r1, r9, r6
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	461d      	mov	r5, r3
 80057da:	f04f 0600 	mov.w	r6, #0
 80057de:	196b      	adds	r3, r5, r5
 80057e0:	eb46 0406 	adc.w	r4, r6, r6
 80057e4:	461a      	mov	r2, r3
 80057e6:	4623      	mov	r3, r4
 80057e8:	f7fb fa2e 	bl	8000c48 <__aeabi_uldivmod>
 80057ec:	4603      	mov	r3, r0
 80057ee:	460c      	mov	r4, r1
 80057f0:	461a      	mov	r2, r3
 80057f2:	4b47      	ldr	r3, [pc, #284]	; (8005910 <UART_SetConfig+0x384>)
 80057f4:	fba3 2302 	umull	r2, r3, r3, r2
 80057f8:	095b      	lsrs	r3, r3, #5
 80057fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	461d      	mov	r5, r3
 8005802:	f04f 0600 	mov.w	r6, #0
 8005806:	46a9      	mov	r9, r5
 8005808:	46b2      	mov	sl, r6
 800580a:	eb19 0309 	adds.w	r3, r9, r9
 800580e:	eb4a 040a 	adc.w	r4, sl, sl
 8005812:	4699      	mov	r9, r3
 8005814:	46a2      	mov	sl, r4
 8005816:	eb19 0905 	adds.w	r9, r9, r5
 800581a:	eb4a 0a06 	adc.w	sl, sl, r6
 800581e:	f04f 0100 	mov.w	r1, #0
 8005822:	f04f 0200 	mov.w	r2, #0
 8005826:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800582a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800582e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005832:	4689      	mov	r9, r1
 8005834:	4692      	mov	sl, r2
 8005836:	eb19 0005 	adds.w	r0, r9, r5
 800583a:	eb4a 0106 	adc.w	r1, sl, r6
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	461d      	mov	r5, r3
 8005844:	f04f 0600 	mov.w	r6, #0
 8005848:	196b      	adds	r3, r5, r5
 800584a:	eb46 0406 	adc.w	r4, r6, r6
 800584e:	461a      	mov	r2, r3
 8005850:	4623      	mov	r3, r4
 8005852:	f7fb f9f9 	bl	8000c48 <__aeabi_uldivmod>
 8005856:	4603      	mov	r3, r0
 8005858:	460c      	mov	r4, r1
 800585a:	461a      	mov	r2, r3
 800585c:	4b2c      	ldr	r3, [pc, #176]	; (8005910 <UART_SetConfig+0x384>)
 800585e:	fba3 1302 	umull	r1, r3, r3, r2
 8005862:	095b      	lsrs	r3, r3, #5
 8005864:	2164      	movs	r1, #100	; 0x64
 8005866:	fb01 f303 	mul.w	r3, r1, r3
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	3332      	adds	r3, #50	; 0x32
 8005870:	4a27      	ldr	r2, [pc, #156]	; (8005910 <UART_SetConfig+0x384>)
 8005872:	fba2 2303 	umull	r2, r3, r2, r3
 8005876:	095b      	lsrs	r3, r3, #5
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800587e:	4498      	add	r8, r3
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	461d      	mov	r5, r3
 8005884:	f04f 0600 	mov.w	r6, #0
 8005888:	46a9      	mov	r9, r5
 800588a:	46b2      	mov	sl, r6
 800588c:	eb19 0309 	adds.w	r3, r9, r9
 8005890:	eb4a 040a 	adc.w	r4, sl, sl
 8005894:	4699      	mov	r9, r3
 8005896:	46a2      	mov	sl, r4
 8005898:	eb19 0905 	adds.w	r9, r9, r5
 800589c:	eb4a 0a06 	adc.w	sl, sl, r6
 80058a0:	f04f 0100 	mov.w	r1, #0
 80058a4:	f04f 0200 	mov.w	r2, #0
 80058a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058b4:	4689      	mov	r9, r1
 80058b6:	4692      	mov	sl, r2
 80058b8:	eb19 0005 	adds.w	r0, r9, r5
 80058bc:	eb4a 0106 	adc.w	r1, sl, r6
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	461d      	mov	r5, r3
 80058c6:	f04f 0600 	mov.w	r6, #0
 80058ca:	196b      	adds	r3, r5, r5
 80058cc:	eb46 0406 	adc.w	r4, r6, r6
 80058d0:	461a      	mov	r2, r3
 80058d2:	4623      	mov	r3, r4
 80058d4:	f7fb f9b8 	bl	8000c48 <__aeabi_uldivmod>
 80058d8:	4603      	mov	r3, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	461a      	mov	r2, r3
 80058de:	4b0c      	ldr	r3, [pc, #48]	; (8005910 <UART_SetConfig+0x384>)
 80058e0:	fba3 1302 	umull	r1, r3, r3, r2
 80058e4:	095b      	lsrs	r3, r3, #5
 80058e6:	2164      	movs	r1, #100	; 0x64
 80058e8:	fb01 f303 	mul.w	r3, r1, r3
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	3332      	adds	r3, #50	; 0x32
 80058f2:	4a07      	ldr	r2, [pc, #28]	; (8005910 <UART_SetConfig+0x384>)
 80058f4:	fba2 2303 	umull	r2, r3, r2, r3
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	f003 0207 	and.w	r2, r3, #7
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4442      	add	r2, r8
 8005904:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005906:	e1b2      	b.n	8005c6e <UART_SetConfig+0x6e2>
 8005908:	40011000 	.word	0x40011000
 800590c:	40011400 	.word	0x40011400
 8005910:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4ad7      	ldr	r2, [pc, #860]	; (8005c78 <UART_SetConfig+0x6ec>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d005      	beq.n	800592a <UART_SetConfig+0x39e>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4ad6      	ldr	r2, [pc, #856]	; (8005c7c <UART_SetConfig+0x6f0>)
 8005924:	4293      	cmp	r3, r2
 8005926:	f040 80d1 	bne.w	8005acc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800592a:	f7fe ffd1 	bl	80048d0 <HAL_RCC_GetPCLK2Freq>
 800592e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	469a      	mov	sl, r3
 8005934:	f04f 0b00 	mov.w	fp, #0
 8005938:	46d0      	mov	r8, sl
 800593a:	46d9      	mov	r9, fp
 800593c:	eb18 0308 	adds.w	r3, r8, r8
 8005940:	eb49 0409 	adc.w	r4, r9, r9
 8005944:	4698      	mov	r8, r3
 8005946:	46a1      	mov	r9, r4
 8005948:	eb18 080a 	adds.w	r8, r8, sl
 800594c:	eb49 090b 	adc.w	r9, r9, fp
 8005950:	f04f 0100 	mov.w	r1, #0
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800595c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005960:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005964:	4688      	mov	r8, r1
 8005966:	4691      	mov	r9, r2
 8005968:	eb1a 0508 	adds.w	r5, sl, r8
 800596c:	eb4b 0609 	adc.w	r6, fp, r9
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	4619      	mov	r1, r3
 8005976:	f04f 0200 	mov.w	r2, #0
 800597a:	f04f 0300 	mov.w	r3, #0
 800597e:	f04f 0400 	mov.w	r4, #0
 8005982:	0094      	lsls	r4, r2, #2
 8005984:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005988:	008b      	lsls	r3, r1, #2
 800598a:	461a      	mov	r2, r3
 800598c:	4623      	mov	r3, r4
 800598e:	4628      	mov	r0, r5
 8005990:	4631      	mov	r1, r6
 8005992:	f7fb f959 	bl	8000c48 <__aeabi_uldivmod>
 8005996:	4603      	mov	r3, r0
 8005998:	460c      	mov	r4, r1
 800599a:	461a      	mov	r2, r3
 800599c:	4bb8      	ldr	r3, [pc, #736]	; (8005c80 <UART_SetConfig+0x6f4>)
 800599e:	fba3 2302 	umull	r2, r3, r3, r2
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	469b      	mov	fp, r3
 80059ac:	f04f 0c00 	mov.w	ip, #0
 80059b0:	46d9      	mov	r9, fp
 80059b2:	46e2      	mov	sl, ip
 80059b4:	eb19 0309 	adds.w	r3, r9, r9
 80059b8:	eb4a 040a 	adc.w	r4, sl, sl
 80059bc:	4699      	mov	r9, r3
 80059be:	46a2      	mov	sl, r4
 80059c0:	eb19 090b 	adds.w	r9, r9, fp
 80059c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059c8:	f04f 0100 	mov.w	r1, #0
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059dc:	4689      	mov	r9, r1
 80059de:	4692      	mov	sl, r2
 80059e0:	eb1b 0509 	adds.w	r5, fp, r9
 80059e4:	eb4c 060a 	adc.w	r6, ip, sl
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	4619      	mov	r1, r3
 80059ee:	f04f 0200 	mov.w	r2, #0
 80059f2:	f04f 0300 	mov.w	r3, #0
 80059f6:	f04f 0400 	mov.w	r4, #0
 80059fa:	0094      	lsls	r4, r2, #2
 80059fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a00:	008b      	lsls	r3, r1, #2
 8005a02:	461a      	mov	r2, r3
 8005a04:	4623      	mov	r3, r4
 8005a06:	4628      	mov	r0, r5
 8005a08:	4631      	mov	r1, r6
 8005a0a:	f7fb f91d 	bl	8000c48 <__aeabi_uldivmod>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	460c      	mov	r4, r1
 8005a12:	461a      	mov	r2, r3
 8005a14:	4b9a      	ldr	r3, [pc, #616]	; (8005c80 <UART_SetConfig+0x6f4>)
 8005a16:	fba3 1302 	umull	r1, r3, r3, r2
 8005a1a:	095b      	lsrs	r3, r3, #5
 8005a1c:	2164      	movs	r1, #100	; 0x64
 8005a1e:	fb01 f303 	mul.w	r3, r1, r3
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	011b      	lsls	r3, r3, #4
 8005a26:	3332      	adds	r3, #50	; 0x32
 8005a28:	4a95      	ldr	r2, [pc, #596]	; (8005c80 <UART_SetConfig+0x6f4>)
 8005a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2e:	095b      	lsrs	r3, r3, #5
 8005a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a34:	4498      	add	r8, r3
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	469b      	mov	fp, r3
 8005a3a:	f04f 0c00 	mov.w	ip, #0
 8005a3e:	46d9      	mov	r9, fp
 8005a40:	46e2      	mov	sl, ip
 8005a42:	eb19 0309 	adds.w	r3, r9, r9
 8005a46:	eb4a 040a 	adc.w	r4, sl, sl
 8005a4a:	4699      	mov	r9, r3
 8005a4c:	46a2      	mov	sl, r4
 8005a4e:	eb19 090b 	adds.w	r9, r9, fp
 8005a52:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a56:	f04f 0100 	mov.w	r1, #0
 8005a5a:	f04f 0200 	mov.w	r2, #0
 8005a5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a6a:	4689      	mov	r9, r1
 8005a6c:	4692      	mov	sl, r2
 8005a6e:	eb1b 0509 	adds.w	r5, fp, r9
 8005a72:	eb4c 060a 	adc.w	r6, ip, sl
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	f04f 0300 	mov.w	r3, #0
 8005a84:	f04f 0400 	mov.w	r4, #0
 8005a88:	0094      	lsls	r4, r2, #2
 8005a8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a8e:	008b      	lsls	r3, r1, #2
 8005a90:	461a      	mov	r2, r3
 8005a92:	4623      	mov	r3, r4
 8005a94:	4628      	mov	r0, r5
 8005a96:	4631      	mov	r1, r6
 8005a98:	f7fb f8d6 	bl	8000c48 <__aeabi_uldivmod>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4b77      	ldr	r3, [pc, #476]	; (8005c80 <UART_SetConfig+0x6f4>)
 8005aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8005aa8:	095b      	lsrs	r3, r3, #5
 8005aaa:	2164      	movs	r1, #100	; 0x64
 8005aac:	fb01 f303 	mul.w	r3, r1, r3
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	3332      	adds	r3, #50	; 0x32
 8005ab6:	4a72      	ldr	r2, [pc, #456]	; (8005c80 <UART_SetConfig+0x6f4>)
 8005ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8005abc:	095b      	lsrs	r3, r3, #5
 8005abe:	f003 020f 	and.w	r2, r3, #15
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4442      	add	r2, r8
 8005ac8:	609a      	str	r2, [r3, #8]
 8005aca:	e0d0      	b.n	8005c6e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005acc:	f7fe feec 	bl	80048a8 <HAL_RCC_GetPCLK1Freq>
 8005ad0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	469a      	mov	sl, r3
 8005ad6:	f04f 0b00 	mov.w	fp, #0
 8005ada:	46d0      	mov	r8, sl
 8005adc:	46d9      	mov	r9, fp
 8005ade:	eb18 0308 	adds.w	r3, r8, r8
 8005ae2:	eb49 0409 	adc.w	r4, r9, r9
 8005ae6:	4698      	mov	r8, r3
 8005ae8:	46a1      	mov	r9, r4
 8005aea:	eb18 080a 	adds.w	r8, r8, sl
 8005aee:	eb49 090b 	adc.w	r9, r9, fp
 8005af2:	f04f 0100 	mov.w	r1, #0
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005afe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b02:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b06:	4688      	mov	r8, r1
 8005b08:	4691      	mov	r9, r2
 8005b0a:	eb1a 0508 	adds.w	r5, sl, r8
 8005b0e:	eb4b 0609 	adc.w	r6, fp, r9
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	4619      	mov	r1, r3
 8005b18:	f04f 0200 	mov.w	r2, #0
 8005b1c:	f04f 0300 	mov.w	r3, #0
 8005b20:	f04f 0400 	mov.w	r4, #0
 8005b24:	0094      	lsls	r4, r2, #2
 8005b26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b2a:	008b      	lsls	r3, r1, #2
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	4623      	mov	r3, r4
 8005b30:	4628      	mov	r0, r5
 8005b32:	4631      	mov	r1, r6
 8005b34:	f7fb f888 	bl	8000c48 <__aeabi_uldivmod>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	4b50      	ldr	r3, [pc, #320]	; (8005c80 <UART_SetConfig+0x6f4>)
 8005b40:	fba3 2302 	umull	r2, r3, r3, r2
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	469b      	mov	fp, r3
 8005b4e:	f04f 0c00 	mov.w	ip, #0
 8005b52:	46d9      	mov	r9, fp
 8005b54:	46e2      	mov	sl, ip
 8005b56:	eb19 0309 	adds.w	r3, r9, r9
 8005b5a:	eb4a 040a 	adc.w	r4, sl, sl
 8005b5e:	4699      	mov	r9, r3
 8005b60:	46a2      	mov	sl, r4
 8005b62:	eb19 090b 	adds.w	r9, r9, fp
 8005b66:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b6a:	f04f 0100 	mov.w	r1, #0
 8005b6e:	f04f 0200 	mov.w	r2, #0
 8005b72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b7e:	4689      	mov	r9, r1
 8005b80:	4692      	mov	sl, r2
 8005b82:	eb1b 0509 	adds.w	r5, fp, r9
 8005b86:	eb4c 060a 	adc.w	r6, ip, sl
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	4619      	mov	r1, r3
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	f04f 0300 	mov.w	r3, #0
 8005b98:	f04f 0400 	mov.w	r4, #0
 8005b9c:	0094      	lsls	r4, r2, #2
 8005b9e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ba2:	008b      	lsls	r3, r1, #2
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	4623      	mov	r3, r4
 8005ba8:	4628      	mov	r0, r5
 8005baa:	4631      	mov	r1, r6
 8005bac:	f7fb f84c 	bl	8000c48 <__aeabi_uldivmod>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	4b32      	ldr	r3, [pc, #200]	; (8005c80 <UART_SetConfig+0x6f4>)
 8005bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bbc:	095b      	lsrs	r3, r3, #5
 8005bbe:	2164      	movs	r1, #100	; 0x64
 8005bc0:	fb01 f303 	mul.w	r3, r1, r3
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	3332      	adds	r3, #50	; 0x32
 8005bca:	4a2d      	ldr	r2, [pc, #180]	; (8005c80 <UART_SetConfig+0x6f4>)
 8005bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd0:	095b      	lsrs	r3, r3, #5
 8005bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bd6:	4498      	add	r8, r3
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	469b      	mov	fp, r3
 8005bdc:	f04f 0c00 	mov.w	ip, #0
 8005be0:	46d9      	mov	r9, fp
 8005be2:	46e2      	mov	sl, ip
 8005be4:	eb19 0309 	adds.w	r3, r9, r9
 8005be8:	eb4a 040a 	adc.w	r4, sl, sl
 8005bec:	4699      	mov	r9, r3
 8005bee:	46a2      	mov	sl, r4
 8005bf0:	eb19 090b 	adds.w	r9, r9, fp
 8005bf4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005bf8:	f04f 0100 	mov.w	r1, #0
 8005bfc:	f04f 0200 	mov.w	r2, #0
 8005c00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c0c:	4689      	mov	r9, r1
 8005c0e:	4692      	mov	sl, r2
 8005c10:	eb1b 0509 	adds.w	r5, fp, r9
 8005c14:	eb4c 060a 	adc.w	r6, ip, sl
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	f04f 0200 	mov.w	r2, #0
 8005c22:	f04f 0300 	mov.w	r3, #0
 8005c26:	f04f 0400 	mov.w	r4, #0
 8005c2a:	0094      	lsls	r4, r2, #2
 8005c2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c30:	008b      	lsls	r3, r1, #2
 8005c32:	461a      	mov	r2, r3
 8005c34:	4623      	mov	r3, r4
 8005c36:	4628      	mov	r0, r5
 8005c38:	4631      	mov	r1, r6
 8005c3a:	f7fb f805 	bl	8000c48 <__aeabi_uldivmod>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	460c      	mov	r4, r1
 8005c42:	461a      	mov	r2, r3
 8005c44:	4b0e      	ldr	r3, [pc, #56]	; (8005c80 <UART_SetConfig+0x6f4>)
 8005c46:	fba3 1302 	umull	r1, r3, r3, r2
 8005c4a:	095b      	lsrs	r3, r3, #5
 8005c4c:	2164      	movs	r1, #100	; 0x64
 8005c4e:	fb01 f303 	mul.w	r3, r1, r3
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	3332      	adds	r3, #50	; 0x32
 8005c58:	4a09      	ldr	r2, [pc, #36]	; (8005c80 <UART_SetConfig+0x6f4>)
 8005c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	f003 020f 	and.w	r2, r3, #15
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4442      	add	r2, r8
 8005c6a:	609a      	str	r2, [r3, #8]
}
 8005c6c:	e7ff      	b.n	8005c6e <UART_SetConfig+0x6e2>
 8005c6e:	bf00      	nop
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c78:	40011000 	.word	0x40011000
 8005c7c:	40011400 	.word	0x40011400
 8005c80:	51eb851f 	.word	0x51eb851f

08005c84 <__errno>:
 8005c84:	4b01      	ldr	r3, [pc, #4]	; (8005c8c <__errno+0x8>)
 8005c86:	6818      	ldr	r0, [r3, #0]
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	2000000c 	.word	0x2000000c

08005c90 <__libc_init_array>:
 8005c90:	b570      	push	{r4, r5, r6, lr}
 8005c92:	4e0d      	ldr	r6, [pc, #52]	; (8005cc8 <__libc_init_array+0x38>)
 8005c94:	4c0d      	ldr	r4, [pc, #52]	; (8005ccc <__libc_init_array+0x3c>)
 8005c96:	1ba4      	subs	r4, r4, r6
 8005c98:	10a4      	asrs	r4, r4, #2
 8005c9a:	2500      	movs	r5, #0
 8005c9c:	42a5      	cmp	r5, r4
 8005c9e:	d109      	bne.n	8005cb4 <__libc_init_array+0x24>
 8005ca0:	4e0b      	ldr	r6, [pc, #44]	; (8005cd0 <__libc_init_array+0x40>)
 8005ca2:	4c0c      	ldr	r4, [pc, #48]	; (8005cd4 <__libc_init_array+0x44>)
 8005ca4:	f001 fc8e 	bl	80075c4 <_init>
 8005ca8:	1ba4      	subs	r4, r4, r6
 8005caa:	10a4      	asrs	r4, r4, #2
 8005cac:	2500      	movs	r5, #0
 8005cae:	42a5      	cmp	r5, r4
 8005cb0:	d105      	bne.n	8005cbe <__libc_init_array+0x2e>
 8005cb2:	bd70      	pop	{r4, r5, r6, pc}
 8005cb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005cb8:	4798      	blx	r3
 8005cba:	3501      	adds	r5, #1
 8005cbc:	e7ee      	b.n	8005c9c <__libc_init_array+0xc>
 8005cbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005cc2:	4798      	blx	r3
 8005cc4:	3501      	adds	r5, #1
 8005cc6:	e7f2      	b.n	8005cae <__libc_init_array+0x1e>
 8005cc8:	080077c0 	.word	0x080077c0
 8005ccc:	080077c0 	.word	0x080077c0
 8005cd0:	080077c0 	.word	0x080077c0
 8005cd4:	080077c4 	.word	0x080077c4

08005cd8 <memset>:
 8005cd8:	4402      	add	r2, r0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d100      	bne.n	8005ce2 <memset+0xa>
 8005ce0:	4770      	bx	lr
 8005ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ce6:	e7f9      	b.n	8005cdc <memset+0x4>

08005ce8 <siprintf>:
 8005ce8:	b40e      	push	{r1, r2, r3}
 8005cea:	b500      	push	{lr}
 8005cec:	b09c      	sub	sp, #112	; 0x70
 8005cee:	ab1d      	add	r3, sp, #116	; 0x74
 8005cf0:	9002      	str	r0, [sp, #8]
 8005cf2:	9006      	str	r0, [sp, #24]
 8005cf4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005cf8:	4809      	ldr	r0, [pc, #36]	; (8005d20 <siprintf+0x38>)
 8005cfa:	9107      	str	r1, [sp, #28]
 8005cfc:	9104      	str	r1, [sp, #16]
 8005cfe:	4909      	ldr	r1, [pc, #36]	; (8005d24 <siprintf+0x3c>)
 8005d00:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d04:	9105      	str	r1, [sp, #20]
 8005d06:	6800      	ldr	r0, [r0, #0]
 8005d08:	9301      	str	r3, [sp, #4]
 8005d0a:	a902      	add	r1, sp, #8
 8005d0c:	f000 f876 	bl	8005dfc <_svfiprintf_r>
 8005d10:	9b02      	ldr	r3, [sp, #8]
 8005d12:	2200      	movs	r2, #0
 8005d14:	701a      	strb	r2, [r3, #0]
 8005d16:	b01c      	add	sp, #112	; 0x70
 8005d18:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d1c:	b003      	add	sp, #12
 8005d1e:	4770      	bx	lr
 8005d20:	2000000c 	.word	0x2000000c
 8005d24:	ffff0208 	.word	0xffff0208

08005d28 <strcat>:
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	781a      	ldrb	r2, [r3, #0]
 8005d2e:	1c5c      	adds	r4, r3, #1
 8005d30:	b93a      	cbnz	r2, 8005d42 <strcat+0x1a>
 8005d32:	3b01      	subs	r3, #1
 8005d34:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d38:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d3c:	2a00      	cmp	r2, #0
 8005d3e:	d1f9      	bne.n	8005d34 <strcat+0xc>
 8005d40:	bd10      	pop	{r4, pc}
 8005d42:	4623      	mov	r3, r4
 8005d44:	e7f2      	b.n	8005d2c <strcat+0x4>

08005d46 <__ssputs_r>:
 8005d46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d4a:	688e      	ldr	r6, [r1, #8]
 8005d4c:	429e      	cmp	r6, r3
 8005d4e:	4682      	mov	sl, r0
 8005d50:	460c      	mov	r4, r1
 8005d52:	4690      	mov	r8, r2
 8005d54:	4699      	mov	r9, r3
 8005d56:	d837      	bhi.n	8005dc8 <__ssputs_r+0x82>
 8005d58:	898a      	ldrh	r2, [r1, #12]
 8005d5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d5e:	d031      	beq.n	8005dc4 <__ssputs_r+0x7e>
 8005d60:	6825      	ldr	r5, [r4, #0]
 8005d62:	6909      	ldr	r1, [r1, #16]
 8005d64:	1a6f      	subs	r7, r5, r1
 8005d66:	6965      	ldr	r5, [r4, #20]
 8005d68:	2302      	movs	r3, #2
 8005d6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d6e:	fb95 f5f3 	sdiv	r5, r5, r3
 8005d72:	f109 0301 	add.w	r3, r9, #1
 8005d76:	443b      	add	r3, r7
 8005d78:	429d      	cmp	r5, r3
 8005d7a:	bf38      	it	cc
 8005d7c:	461d      	movcc	r5, r3
 8005d7e:	0553      	lsls	r3, r2, #21
 8005d80:	d530      	bpl.n	8005de4 <__ssputs_r+0x9e>
 8005d82:	4629      	mov	r1, r5
 8005d84:	f000 fb2c 	bl	80063e0 <_malloc_r>
 8005d88:	4606      	mov	r6, r0
 8005d8a:	b950      	cbnz	r0, 8005da2 <__ssputs_r+0x5c>
 8005d8c:	230c      	movs	r3, #12
 8005d8e:	f8ca 3000 	str.w	r3, [sl]
 8005d92:	89a3      	ldrh	r3, [r4, #12]
 8005d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d98:	81a3      	strh	r3, [r4, #12]
 8005d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005da2:	463a      	mov	r2, r7
 8005da4:	6921      	ldr	r1, [r4, #16]
 8005da6:	f000 faa9 	bl	80062fc <memcpy>
 8005daa:	89a3      	ldrh	r3, [r4, #12]
 8005dac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db4:	81a3      	strh	r3, [r4, #12]
 8005db6:	6126      	str	r6, [r4, #16]
 8005db8:	6165      	str	r5, [r4, #20]
 8005dba:	443e      	add	r6, r7
 8005dbc:	1bed      	subs	r5, r5, r7
 8005dbe:	6026      	str	r6, [r4, #0]
 8005dc0:	60a5      	str	r5, [r4, #8]
 8005dc2:	464e      	mov	r6, r9
 8005dc4:	454e      	cmp	r6, r9
 8005dc6:	d900      	bls.n	8005dca <__ssputs_r+0x84>
 8005dc8:	464e      	mov	r6, r9
 8005dca:	4632      	mov	r2, r6
 8005dcc:	4641      	mov	r1, r8
 8005dce:	6820      	ldr	r0, [r4, #0]
 8005dd0:	f000 fa9f 	bl	8006312 <memmove>
 8005dd4:	68a3      	ldr	r3, [r4, #8]
 8005dd6:	1b9b      	subs	r3, r3, r6
 8005dd8:	60a3      	str	r3, [r4, #8]
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	441e      	add	r6, r3
 8005dde:	6026      	str	r6, [r4, #0]
 8005de0:	2000      	movs	r0, #0
 8005de2:	e7dc      	b.n	8005d9e <__ssputs_r+0x58>
 8005de4:	462a      	mov	r2, r5
 8005de6:	f000 fb55 	bl	8006494 <_realloc_r>
 8005dea:	4606      	mov	r6, r0
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d1e2      	bne.n	8005db6 <__ssputs_r+0x70>
 8005df0:	6921      	ldr	r1, [r4, #16]
 8005df2:	4650      	mov	r0, sl
 8005df4:	f000 faa6 	bl	8006344 <_free_r>
 8005df8:	e7c8      	b.n	8005d8c <__ssputs_r+0x46>
	...

08005dfc <_svfiprintf_r>:
 8005dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e00:	461d      	mov	r5, r3
 8005e02:	898b      	ldrh	r3, [r1, #12]
 8005e04:	061f      	lsls	r7, r3, #24
 8005e06:	b09d      	sub	sp, #116	; 0x74
 8005e08:	4680      	mov	r8, r0
 8005e0a:	460c      	mov	r4, r1
 8005e0c:	4616      	mov	r6, r2
 8005e0e:	d50f      	bpl.n	8005e30 <_svfiprintf_r+0x34>
 8005e10:	690b      	ldr	r3, [r1, #16]
 8005e12:	b96b      	cbnz	r3, 8005e30 <_svfiprintf_r+0x34>
 8005e14:	2140      	movs	r1, #64	; 0x40
 8005e16:	f000 fae3 	bl	80063e0 <_malloc_r>
 8005e1a:	6020      	str	r0, [r4, #0]
 8005e1c:	6120      	str	r0, [r4, #16]
 8005e1e:	b928      	cbnz	r0, 8005e2c <_svfiprintf_r+0x30>
 8005e20:	230c      	movs	r3, #12
 8005e22:	f8c8 3000 	str.w	r3, [r8]
 8005e26:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2a:	e0c8      	b.n	8005fbe <_svfiprintf_r+0x1c2>
 8005e2c:	2340      	movs	r3, #64	; 0x40
 8005e2e:	6163      	str	r3, [r4, #20]
 8005e30:	2300      	movs	r3, #0
 8005e32:	9309      	str	r3, [sp, #36]	; 0x24
 8005e34:	2320      	movs	r3, #32
 8005e36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e3a:	2330      	movs	r3, #48	; 0x30
 8005e3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e40:	9503      	str	r5, [sp, #12]
 8005e42:	f04f 0b01 	mov.w	fp, #1
 8005e46:	4637      	mov	r7, r6
 8005e48:	463d      	mov	r5, r7
 8005e4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005e4e:	b10b      	cbz	r3, 8005e54 <_svfiprintf_r+0x58>
 8005e50:	2b25      	cmp	r3, #37	; 0x25
 8005e52:	d13e      	bne.n	8005ed2 <_svfiprintf_r+0xd6>
 8005e54:	ebb7 0a06 	subs.w	sl, r7, r6
 8005e58:	d00b      	beq.n	8005e72 <_svfiprintf_r+0x76>
 8005e5a:	4653      	mov	r3, sl
 8005e5c:	4632      	mov	r2, r6
 8005e5e:	4621      	mov	r1, r4
 8005e60:	4640      	mov	r0, r8
 8005e62:	f7ff ff70 	bl	8005d46 <__ssputs_r>
 8005e66:	3001      	adds	r0, #1
 8005e68:	f000 80a4 	beq.w	8005fb4 <_svfiprintf_r+0x1b8>
 8005e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e6e:	4453      	add	r3, sl
 8005e70:	9309      	str	r3, [sp, #36]	; 0x24
 8005e72:	783b      	ldrb	r3, [r7, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 809d 	beq.w	8005fb4 <_svfiprintf_r+0x1b8>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e84:	9304      	str	r3, [sp, #16]
 8005e86:	9307      	str	r3, [sp, #28]
 8005e88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e8c:	931a      	str	r3, [sp, #104]	; 0x68
 8005e8e:	462f      	mov	r7, r5
 8005e90:	2205      	movs	r2, #5
 8005e92:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005e96:	4850      	ldr	r0, [pc, #320]	; (8005fd8 <_svfiprintf_r+0x1dc>)
 8005e98:	f7fa f9aa 	bl	80001f0 <memchr>
 8005e9c:	9b04      	ldr	r3, [sp, #16]
 8005e9e:	b9d0      	cbnz	r0, 8005ed6 <_svfiprintf_r+0xda>
 8005ea0:	06d9      	lsls	r1, r3, #27
 8005ea2:	bf44      	itt	mi
 8005ea4:	2220      	movmi	r2, #32
 8005ea6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005eaa:	071a      	lsls	r2, r3, #28
 8005eac:	bf44      	itt	mi
 8005eae:	222b      	movmi	r2, #43	; 0x2b
 8005eb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005eb4:	782a      	ldrb	r2, [r5, #0]
 8005eb6:	2a2a      	cmp	r2, #42	; 0x2a
 8005eb8:	d015      	beq.n	8005ee6 <_svfiprintf_r+0xea>
 8005eba:	9a07      	ldr	r2, [sp, #28]
 8005ebc:	462f      	mov	r7, r5
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	250a      	movs	r5, #10
 8005ec2:	4639      	mov	r1, r7
 8005ec4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ec8:	3b30      	subs	r3, #48	; 0x30
 8005eca:	2b09      	cmp	r3, #9
 8005ecc:	d94d      	bls.n	8005f6a <_svfiprintf_r+0x16e>
 8005ece:	b1b8      	cbz	r0, 8005f00 <_svfiprintf_r+0x104>
 8005ed0:	e00f      	b.n	8005ef2 <_svfiprintf_r+0xf6>
 8005ed2:	462f      	mov	r7, r5
 8005ed4:	e7b8      	b.n	8005e48 <_svfiprintf_r+0x4c>
 8005ed6:	4a40      	ldr	r2, [pc, #256]	; (8005fd8 <_svfiprintf_r+0x1dc>)
 8005ed8:	1a80      	subs	r0, r0, r2
 8005eda:	fa0b f000 	lsl.w	r0, fp, r0
 8005ede:	4318      	orrs	r0, r3
 8005ee0:	9004      	str	r0, [sp, #16]
 8005ee2:	463d      	mov	r5, r7
 8005ee4:	e7d3      	b.n	8005e8e <_svfiprintf_r+0x92>
 8005ee6:	9a03      	ldr	r2, [sp, #12]
 8005ee8:	1d11      	adds	r1, r2, #4
 8005eea:	6812      	ldr	r2, [r2, #0]
 8005eec:	9103      	str	r1, [sp, #12]
 8005eee:	2a00      	cmp	r2, #0
 8005ef0:	db01      	blt.n	8005ef6 <_svfiprintf_r+0xfa>
 8005ef2:	9207      	str	r2, [sp, #28]
 8005ef4:	e004      	b.n	8005f00 <_svfiprintf_r+0x104>
 8005ef6:	4252      	negs	r2, r2
 8005ef8:	f043 0302 	orr.w	r3, r3, #2
 8005efc:	9207      	str	r2, [sp, #28]
 8005efe:	9304      	str	r3, [sp, #16]
 8005f00:	783b      	ldrb	r3, [r7, #0]
 8005f02:	2b2e      	cmp	r3, #46	; 0x2e
 8005f04:	d10c      	bne.n	8005f20 <_svfiprintf_r+0x124>
 8005f06:	787b      	ldrb	r3, [r7, #1]
 8005f08:	2b2a      	cmp	r3, #42	; 0x2a
 8005f0a:	d133      	bne.n	8005f74 <_svfiprintf_r+0x178>
 8005f0c:	9b03      	ldr	r3, [sp, #12]
 8005f0e:	1d1a      	adds	r2, r3, #4
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	9203      	str	r2, [sp, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bfb8      	it	lt
 8005f18:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f1c:	3702      	adds	r7, #2
 8005f1e:	9305      	str	r3, [sp, #20]
 8005f20:	4d2e      	ldr	r5, [pc, #184]	; (8005fdc <_svfiprintf_r+0x1e0>)
 8005f22:	7839      	ldrb	r1, [r7, #0]
 8005f24:	2203      	movs	r2, #3
 8005f26:	4628      	mov	r0, r5
 8005f28:	f7fa f962 	bl	80001f0 <memchr>
 8005f2c:	b138      	cbz	r0, 8005f3e <_svfiprintf_r+0x142>
 8005f2e:	2340      	movs	r3, #64	; 0x40
 8005f30:	1b40      	subs	r0, r0, r5
 8005f32:	fa03 f000 	lsl.w	r0, r3, r0
 8005f36:	9b04      	ldr	r3, [sp, #16]
 8005f38:	4303      	orrs	r3, r0
 8005f3a:	3701      	adds	r7, #1
 8005f3c:	9304      	str	r3, [sp, #16]
 8005f3e:	7839      	ldrb	r1, [r7, #0]
 8005f40:	4827      	ldr	r0, [pc, #156]	; (8005fe0 <_svfiprintf_r+0x1e4>)
 8005f42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f46:	2206      	movs	r2, #6
 8005f48:	1c7e      	adds	r6, r7, #1
 8005f4a:	f7fa f951 	bl	80001f0 <memchr>
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	d038      	beq.n	8005fc4 <_svfiprintf_r+0x1c8>
 8005f52:	4b24      	ldr	r3, [pc, #144]	; (8005fe4 <_svfiprintf_r+0x1e8>)
 8005f54:	bb13      	cbnz	r3, 8005f9c <_svfiprintf_r+0x1a0>
 8005f56:	9b03      	ldr	r3, [sp, #12]
 8005f58:	3307      	adds	r3, #7
 8005f5a:	f023 0307 	bic.w	r3, r3, #7
 8005f5e:	3308      	adds	r3, #8
 8005f60:	9303      	str	r3, [sp, #12]
 8005f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f64:	444b      	add	r3, r9
 8005f66:	9309      	str	r3, [sp, #36]	; 0x24
 8005f68:	e76d      	b.n	8005e46 <_svfiprintf_r+0x4a>
 8005f6a:	fb05 3202 	mla	r2, r5, r2, r3
 8005f6e:	2001      	movs	r0, #1
 8005f70:	460f      	mov	r7, r1
 8005f72:	e7a6      	b.n	8005ec2 <_svfiprintf_r+0xc6>
 8005f74:	2300      	movs	r3, #0
 8005f76:	3701      	adds	r7, #1
 8005f78:	9305      	str	r3, [sp, #20]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	250a      	movs	r5, #10
 8005f7e:	4638      	mov	r0, r7
 8005f80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f84:	3a30      	subs	r2, #48	; 0x30
 8005f86:	2a09      	cmp	r2, #9
 8005f88:	d903      	bls.n	8005f92 <_svfiprintf_r+0x196>
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0c8      	beq.n	8005f20 <_svfiprintf_r+0x124>
 8005f8e:	9105      	str	r1, [sp, #20]
 8005f90:	e7c6      	b.n	8005f20 <_svfiprintf_r+0x124>
 8005f92:	fb05 2101 	mla	r1, r5, r1, r2
 8005f96:	2301      	movs	r3, #1
 8005f98:	4607      	mov	r7, r0
 8005f9a:	e7f0      	b.n	8005f7e <_svfiprintf_r+0x182>
 8005f9c:	ab03      	add	r3, sp, #12
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	4622      	mov	r2, r4
 8005fa2:	4b11      	ldr	r3, [pc, #68]	; (8005fe8 <_svfiprintf_r+0x1ec>)
 8005fa4:	a904      	add	r1, sp, #16
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	f3af 8000 	nop.w
 8005fac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005fb0:	4681      	mov	r9, r0
 8005fb2:	d1d6      	bne.n	8005f62 <_svfiprintf_r+0x166>
 8005fb4:	89a3      	ldrh	r3, [r4, #12]
 8005fb6:	065b      	lsls	r3, r3, #25
 8005fb8:	f53f af35 	bmi.w	8005e26 <_svfiprintf_r+0x2a>
 8005fbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fbe:	b01d      	add	sp, #116	; 0x74
 8005fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc4:	ab03      	add	r3, sp, #12
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	4622      	mov	r2, r4
 8005fca:	4b07      	ldr	r3, [pc, #28]	; (8005fe8 <_svfiprintf_r+0x1ec>)
 8005fcc:	a904      	add	r1, sp, #16
 8005fce:	4640      	mov	r0, r8
 8005fd0:	f000 f882 	bl	80060d8 <_printf_i>
 8005fd4:	e7ea      	b.n	8005fac <_svfiprintf_r+0x1b0>
 8005fd6:	bf00      	nop
 8005fd8:	08007740 	.word	0x08007740
 8005fdc:	08007746 	.word	0x08007746
 8005fe0:	0800774a 	.word	0x0800774a
 8005fe4:	00000000 	.word	0x00000000
 8005fe8:	08005d47 	.word	0x08005d47

08005fec <_printf_common>:
 8005fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff0:	4691      	mov	r9, r2
 8005ff2:	461f      	mov	r7, r3
 8005ff4:	688a      	ldr	r2, [r1, #8]
 8005ff6:	690b      	ldr	r3, [r1, #16]
 8005ff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	bfb8      	it	lt
 8006000:	4613      	movlt	r3, r2
 8006002:	f8c9 3000 	str.w	r3, [r9]
 8006006:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800600a:	4606      	mov	r6, r0
 800600c:	460c      	mov	r4, r1
 800600e:	b112      	cbz	r2, 8006016 <_printf_common+0x2a>
 8006010:	3301      	adds	r3, #1
 8006012:	f8c9 3000 	str.w	r3, [r9]
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	0699      	lsls	r1, r3, #26
 800601a:	bf42      	ittt	mi
 800601c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006020:	3302      	addmi	r3, #2
 8006022:	f8c9 3000 	strmi.w	r3, [r9]
 8006026:	6825      	ldr	r5, [r4, #0]
 8006028:	f015 0506 	ands.w	r5, r5, #6
 800602c:	d107      	bne.n	800603e <_printf_common+0x52>
 800602e:	f104 0a19 	add.w	sl, r4, #25
 8006032:	68e3      	ldr	r3, [r4, #12]
 8006034:	f8d9 2000 	ldr.w	r2, [r9]
 8006038:	1a9b      	subs	r3, r3, r2
 800603a:	42ab      	cmp	r3, r5
 800603c:	dc28      	bgt.n	8006090 <_printf_common+0xa4>
 800603e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006042:	6822      	ldr	r2, [r4, #0]
 8006044:	3300      	adds	r3, #0
 8006046:	bf18      	it	ne
 8006048:	2301      	movne	r3, #1
 800604a:	0692      	lsls	r2, r2, #26
 800604c:	d42d      	bmi.n	80060aa <_printf_common+0xbe>
 800604e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006052:	4639      	mov	r1, r7
 8006054:	4630      	mov	r0, r6
 8006056:	47c0      	blx	r8
 8006058:	3001      	adds	r0, #1
 800605a:	d020      	beq.n	800609e <_printf_common+0xb2>
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	68e5      	ldr	r5, [r4, #12]
 8006060:	f8d9 2000 	ldr.w	r2, [r9]
 8006064:	f003 0306 	and.w	r3, r3, #6
 8006068:	2b04      	cmp	r3, #4
 800606a:	bf08      	it	eq
 800606c:	1aad      	subeq	r5, r5, r2
 800606e:	68a3      	ldr	r3, [r4, #8]
 8006070:	6922      	ldr	r2, [r4, #16]
 8006072:	bf0c      	ite	eq
 8006074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006078:	2500      	movne	r5, #0
 800607a:	4293      	cmp	r3, r2
 800607c:	bfc4      	itt	gt
 800607e:	1a9b      	subgt	r3, r3, r2
 8006080:	18ed      	addgt	r5, r5, r3
 8006082:	f04f 0900 	mov.w	r9, #0
 8006086:	341a      	adds	r4, #26
 8006088:	454d      	cmp	r5, r9
 800608a:	d11a      	bne.n	80060c2 <_printf_common+0xd6>
 800608c:	2000      	movs	r0, #0
 800608e:	e008      	b.n	80060a2 <_printf_common+0xb6>
 8006090:	2301      	movs	r3, #1
 8006092:	4652      	mov	r2, sl
 8006094:	4639      	mov	r1, r7
 8006096:	4630      	mov	r0, r6
 8006098:	47c0      	blx	r8
 800609a:	3001      	adds	r0, #1
 800609c:	d103      	bne.n	80060a6 <_printf_common+0xba>
 800609e:	f04f 30ff 	mov.w	r0, #4294967295
 80060a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a6:	3501      	adds	r5, #1
 80060a8:	e7c3      	b.n	8006032 <_printf_common+0x46>
 80060aa:	18e1      	adds	r1, r4, r3
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	2030      	movs	r0, #48	; 0x30
 80060b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060b4:	4422      	add	r2, r4
 80060b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060be:	3302      	adds	r3, #2
 80060c0:	e7c5      	b.n	800604e <_printf_common+0x62>
 80060c2:	2301      	movs	r3, #1
 80060c4:	4622      	mov	r2, r4
 80060c6:	4639      	mov	r1, r7
 80060c8:	4630      	mov	r0, r6
 80060ca:	47c0      	blx	r8
 80060cc:	3001      	adds	r0, #1
 80060ce:	d0e6      	beq.n	800609e <_printf_common+0xb2>
 80060d0:	f109 0901 	add.w	r9, r9, #1
 80060d4:	e7d8      	b.n	8006088 <_printf_common+0x9c>
	...

080060d8 <_printf_i>:
 80060d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80060e0:	460c      	mov	r4, r1
 80060e2:	7e09      	ldrb	r1, [r1, #24]
 80060e4:	b085      	sub	sp, #20
 80060e6:	296e      	cmp	r1, #110	; 0x6e
 80060e8:	4617      	mov	r7, r2
 80060ea:	4606      	mov	r6, r0
 80060ec:	4698      	mov	r8, r3
 80060ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060f0:	f000 80b3 	beq.w	800625a <_printf_i+0x182>
 80060f4:	d822      	bhi.n	800613c <_printf_i+0x64>
 80060f6:	2963      	cmp	r1, #99	; 0x63
 80060f8:	d036      	beq.n	8006168 <_printf_i+0x90>
 80060fa:	d80a      	bhi.n	8006112 <_printf_i+0x3a>
 80060fc:	2900      	cmp	r1, #0
 80060fe:	f000 80b9 	beq.w	8006274 <_printf_i+0x19c>
 8006102:	2958      	cmp	r1, #88	; 0x58
 8006104:	f000 8083 	beq.w	800620e <_printf_i+0x136>
 8006108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800610c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006110:	e032      	b.n	8006178 <_printf_i+0xa0>
 8006112:	2964      	cmp	r1, #100	; 0x64
 8006114:	d001      	beq.n	800611a <_printf_i+0x42>
 8006116:	2969      	cmp	r1, #105	; 0x69
 8006118:	d1f6      	bne.n	8006108 <_printf_i+0x30>
 800611a:	6820      	ldr	r0, [r4, #0]
 800611c:	6813      	ldr	r3, [r2, #0]
 800611e:	0605      	lsls	r5, r0, #24
 8006120:	f103 0104 	add.w	r1, r3, #4
 8006124:	d52a      	bpl.n	800617c <_printf_i+0xa4>
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6011      	str	r1, [r2, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	da03      	bge.n	8006136 <_printf_i+0x5e>
 800612e:	222d      	movs	r2, #45	; 0x2d
 8006130:	425b      	negs	r3, r3
 8006132:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006136:	486f      	ldr	r0, [pc, #444]	; (80062f4 <_printf_i+0x21c>)
 8006138:	220a      	movs	r2, #10
 800613a:	e039      	b.n	80061b0 <_printf_i+0xd8>
 800613c:	2973      	cmp	r1, #115	; 0x73
 800613e:	f000 809d 	beq.w	800627c <_printf_i+0x1a4>
 8006142:	d808      	bhi.n	8006156 <_printf_i+0x7e>
 8006144:	296f      	cmp	r1, #111	; 0x6f
 8006146:	d020      	beq.n	800618a <_printf_i+0xb2>
 8006148:	2970      	cmp	r1, #112	; 0x70
 800614a:	d1dd      	bne.n	8006108 <_printf_i+0x30>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	f043 0320 	orr.w	r3, r3, #32
 8006152:	6023      	str	r3, [r4, #0]
 8006154:	e003      	b.n	800615e <_printf_i+0x86>
 8006156:	2975      	cmp	r1, #117	; 0x75
 8006158:	d017      	beq.n	800618a <_printf_i+0xb2>
 800615a:	2978      	cmp	r1, #120	; 0x78
 800615c:	d1d4      	bne.n	8006108 <_printf_i+0x30>
 800615e:	2378      	movs	r3, #120	; 0x78
 8006160:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006164:	4864      	ldr	r0, [pc, #400]	; (80062f8 <_printf_i+0x220>)
 8006166:	e055      	b.n	8006214 <_printf_i+0x13c>
 8006168:	6813      	ldr	r3, [r2, #0]
 800616a:	1d19      	adds	r1, r3, #4
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6011      	str	r1, [r2, #0]
 8006170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006178:	2301      	movs	r3, #1
 800617a:	e08c      	b.n	8006296 <_printf_i+0x1be>
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6011      	str	r1, [r2, #0]
 8006180:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006184:	bf18      	it	ne
 8006186:	b21b      	sxthne	r3, r3
 8006188:	e7cf      	b.n	800612a <_printf_i+0x52>
 800618a:	6813      	ldr	r3, [r2, #0]
 800618c:	6825      	ldr	r5, [r4, #0]
 800618e:	1d18      	adds	r0, r3, #4
 8006190:	6010      	str	r0, [r2, #0]
 8006192:	0628      	lsls	r0, r5, #24
 8006194:	d501      	bpl.n	800619a <_printf_i+0xc2>
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	e002      	b.n	80061a0 <_printf_i+0xc8>
 800619a:	0668      	lsls	r0, r5, #25
 800619c:	d5fb      	bpl.n	8006196 <_printf_i+0xbe>
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	4854      	ldr	r0, [pc, #336]	; (80062f4 <_printf_i+0x21c>)
 80061a2:	296f      	cmp	r1, #111	; 0x6f
 80061a4:	bf14      	ite	ne
 80061a6:	220a      	movne	r2, #10
 80061a8:	2208      	moveq	r2, #8
 80061aa:	2100      	movs	r1, #0
 80061ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061b0:	6865      	ldr	r5, [r4, #4]
 80061b2:	60a5      	str	r5, [r4, #8]
 80061b4:	2d00      	cmp	r5, #0
 80061b6:	f2c0 8095 	blt.w	80062e4 <_printf_i+0x20c>
 80061ba:	6821      	ldr	r1, [r4, #0]
 80061bc:	f021 0104 	bic.w	r1, r1, #4
 80061c0:	6021      	str	r1, [r4, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d13d      	bne.n	8006242 <_printf_i+0x16a>
 80061c6:	2d00      	cmp	r5, #0
 80061c8:	f040 808e 	bne.w	80062e8 <_printf_i+0x210>
 80061cc:	4665      	mov	r5, ip
 80061ce:	2a08      	cmp	r2, #8
 80061d0:	d10b      	bne.n	80061ea <_printf_i+0x112>
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	07db      	lsls	r3, r3, #31
 80061d6:	d508      	bpl.n	80061ea <_printf_i+0x112>
 80061d8:	6923      	ldr	r3, [r4, #16]
 80061da:	6862      	ldr	r2, [r4, #4]
 80061dc:	429a      	cmp	r2, r3
 80061de:	bfde      	ittt	le
 80061e0:	2330      	movle	r3, #48	; 0x30
 80061e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061ea:	ebac 0305 	sub.w	r3, ip, r5
 80061ee:	6123      	str	r3, [r4, #16]
 80061f0:	f8cd 8000 	str.w	r8, [sp]
 80061f4:	463b      	mov	r3, r7
 80061f6:	aa03      	add	r2, sp, #12
 80061f8:	4621      	mov	r1, r4
 80061fa:	4630      	mov	r0, r6
 80061fc:	f7ff fef6 	bl	8005fec <_printf_common>
 8006200:	3001      	adds	r0, #1
 8006202:	d14d      	bne.n	80062a0 <_printf_i+0x1c8>
 8006204:	f04f 30ff 	mov.w	r0, #4294967295
 8006208:	b005      	add	sp, #20
 800620a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800620e:	4839      	ldr	r0, [pc, #228]	; (80062f4 <_printf_i+0x21c>)
 8006210:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006214:	6813      	ldr	r3, [r2, #0]
 8006216:	6821      	ldr	r1, [r4, #0]
 8006218:	1d1d      	adds	r5, r3, #4
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6015      	str	r5, [r2, #0]
 800621e:	060a      	lsls	r2, r1, #24
 8006220:	d50b      	bpl.n	800623a <_printf_i+0x162>
 8006222:	07ca      	lsls	r2, r1, #31
 8006224:	bf44      	itt	mi
 8006226:	f041 0120 	orrmi.w	r1, r1, #32
 800622a:	6021      	strmi	r1, [r4, #0]
 800622c:	b91b      	cbnz	r3, 8006236 <_printf_i+0x15e>
 800622e:	6822      	ldr	r2, [r4, #0]
 8006230:	f022 0220 	bic.w	r2, r2, #32
 8006234:	6022      	str	r2, [r4, #0]
 8006236:	2210      	movs	r2, #16
 8006238:	e7b7      	b.n	80061aa <_printf_i+0xd2>
 800623a:	064d      	lsls	r5, r1, #25
 800623c:	bf48      	it	mi
 800623e:	b29b      	uxthmi	r3, r3
 8006240:	e7ef      	b.n	8006222 <_printf_i+0x14a>
 8006242:	4665      	mov	r5, ip
 8006244:	fbb3 f1f2 	udiv	r1, r3, r2
 8006248:	fb02 3311 	mls	r3, r2, r1, r3
 800624c:	5cc3      	ldrb	r3, [r0, r3]
 800624e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006252:	460b      	mov	r3, r1
 8006254:	2900      	cmp	r1, #0
 8006256:	d1f5      	bne.n	8006244 <_printf_i+0x16c>
 8006258:	e7b9      	b.n	80061ce <_printf_i+0xf6>
 800625a:	6813      	ldr	r3, [r2, #0]
 800625c:	6825      	ldr	r5, [r4, #0]
 800625e:	6961      	ldr	r1, [r4, #20]
 8006260:	1d18      	adds	r0, r3, #4
 8006262:	6010      	str	r0, [r2, #0]
 8006264:	0628      	lsls	r0, r5, #24
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	d501      	bpl.n	800626e <_printf_i+0x196>
 800626a:	6019      	str	r1, [r3, #0]
 800626c:	e002      	b.n	8006274 <_printf_i+0x19c>
 800626e:	066a      	lsls	r2, r5, #25
 8006270:	d5fb      	bpl.n	800626a <_printf_i+0x192>
 8006272:	8019      	strh	r1, [r3, #0]
 8006274:	2300      	movs	r3, #0
 8006276:	6123      	str	r3, [r4, #16]
 8006278:	4665      	mov	r5, ip
 800627a:	e7b9      	b.n	80061f0 <_printf_i+0x118>
 800627c:	6813      	ldr	r3, [r2, #0]
 800627e:	1d19      	adds	r1, r3, #4
 8006280:	6011      	str	r1, [r2, #0]
 8006282:	681d      	ldr	r5, [r3, #0]
 8006284:	6862      	ldr	r2, [r4, #4]
 8006286:	2100      	movs	r1, #0
 8006288:	4628      	mov	r0, r5
 800628a:	f7f9 ffb1 	bl	80001f0 <memchr>
 800628e:	b108      	cbz	r0, 8006294 <_printf_i+0x1bc>
 8006290:	1b40      	subs	r0, r0, r5
 8006292:	6060      	str	r0, [r4, #4]
 8006294:	6863      	ldr	r3, [r4, #4]
 8006296:	6123      	str	r3, [r4, #16]
 8006298:	2300      	movs	r3, #0
 800629a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800629e:	e7a7      	b.n	80061f0 <_printf_i+0x118>
 80062a0:	6923      	ldr	r3, [r4, #16]
 80062a2:	462a      	mov	r2, r5
 80062a4:	4639      	mov	r1, r7
 80062a6:	4630      	mov	r0, r6
 80062a8:	47c0      	blx	r8
 80062aa:	3001      	adds	r0, #1
 80062ac:	d0aa      	beq.n	8006204 <_printf_i+0x12c>
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	079b      	lsls	r3, r3, #30
 80062b2:	d413      	bmi.n	80062dc <_printf_i+0x204>
 80062b4:	68e0      	ldr	r0, [r4, #12]
 80062b6:	9b03      	ldr	r3, [sp, #12]
 80062b8:	4298      	cmp	r0, r3
 80062ba:	bfb8      	it	lt
 80062bc:	4618      	movlt	r0, r3
 80062be:	e7a3      	b.n	8006208 <_printf_i+0x130>
 80062c0:	2301      	movs	r3, #1
 80062c2:	464a      	mov	r2, r9
 80062c4:	4639      	mov	r1, r7
 80062c6:	4630      	mov	r0, r6
 80062c8:	47c0      	blx	r8
 80062ca:	3001      	adds	r0, #1
 80062cc:	d09a      	beq.n	8006204 <_printf_i+0x12c>
 80062ce:	3501      	adds	r5, #1
 80062d0:	68e3      	ldr	r3, [r4, #12]
 80062d2:	9a03      	ldr	r2, [sp, #12]
 80062d4:	1a9b      	subs	r3, r3, r2
 80062d6:	42ab      	cmp	r3, r5
 80062d8:	dcf2      	bgt.n	80062c0 <_printf_i+0x1e8>
 80062da:	e7eb      	b.n	80062b4 <_printf_i+0x1dc>
 80062dc:	2500      	movs	r5, #0
 80062de:	f104 0919 	add.w	r9, r4, #25
 80062e2:	e7f5      	b.n	80062d0 <_printf_i+0x1f8>
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1ac      	bne.n	8006242 <_printf_i+0x16a>
 80062e8:	7803      	ldrb	r3, [r0, #0]
 80062ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062f2:	e76c      	b.n	80061ce <_printf_i+0xf6>
 80062f4:	08007751 	.word	0x08007751
 80062f8:	08007762 	.word	0x08007762

080062fc <memcpy>:
 80062fc:	b510      	push	{r4, lr}
 80062fe:	1e43      	subs	r3, r0, #1
 8006300:	440a      	add	r2, r1
 8006302:	4291      	cmp	r1, r2
 8006304:	d100      	bne.n	8006308 <memcpy+0xc>
 8006306:	bd10      	pop	{r4, pc}
 8006308:	f811 4b01 	ldrb.w	r4, [r1], #1
 800630c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006310:	e7f7      	b.n	8006302 <memcpy+0x6>

08006312 <memmove>:
 8006312:	4288      	cmp	r0, r1
 8006314:	b510      	push	{r4, lr}
 8006316:	eb01 0302 	add.w	r3, r1, r2
 800631a:	d807      	bhi.n	800632c <memmove+0x1a>
 800631c:	1e42      	subs	r2, r0, #1
 800631e:	4299      	cmp	r1, r3
 8006320:	d00a      	beq.n	8006338 <memmove+0x26>
 8006322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006326:	f802 4f01 	strb.w	r4, [r2, #1]!
 800632a:	e7f8      	b.n	800631e <memmove+0xc>
 800632c:	4283      	cmp	r3, r0
 800632e:	d9f5      	bls.n	800631c <memmove+0xa>
 8006330:	1881      	adds	r1, r0, r2
 8006332:	1ad2      	subs	r2, r2, r3
 8006334:	42d3      	cmn	r3, r2
 8006336:	d100      	bne.n	800633a <memmove+0x28>
 8006338:	bd10      	pop	{r4, pc}
 800633a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800633e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006342:	e7f7      	b.n	8006334 <memmove+0x22>

08006344 <_free_r>:
 8006344:	b538      	push	{r3, r4, r5, lr}
 8006346:	4605      	mov	r5, r0
 8006348:	2900      	cmp	r1, #0
 800634a:	d045      	beq.n	80063d8 <_free_r+0x94>
 800634c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006350:	1f0c      	subs	r4, r1, #4
 8006352:	2b00      	cmp	r3, #0
 8006354:	bfb8      	it	lt
 8006356:	18e4      	addlt	r4, r4, r3
 8006358:	f000 f8d2 	bl	8006500 <__malloc_lock>
 800635c:	4a1f      	ldr	r2, [pc, #124]	; (80063dc <_free_r+0x98>)
 800635e:	6813      	ldr	r3, [r2, #0]
 8006360:	4610      	mov	r0, r2
 8006362:	b933      	cbnz	r3, 8006372 <_free_r+0x2e>
 8006364:	6063      	str	r3, [r4, #4]
 8006366:	6014      	str	r4, [r2, #0]
 8006368:	4628      	mov	r0, r5
 800636a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800636e:	f000 b8c8 	b.w	8006502 <__malloc_unlock>
 8006372:	42a3      	cmp	r3, r4
 8006374:	d90c      	bls.n	8006390 <_free_r+0x4c>
 8006376:	6821      	ldr	r1, [r4, #0]
 8006378:	1862      	adds	r2, r4, r1
 800637a:	4293      	cmp	r3, r2
 800637c:	bf04      	itt	eq
 800637e:	681a      	ldreq	r2, [r3, #0]
 8006380:	685b      	ldreq	r3, [r3, #4]
 8006382:	6063      	str	r3, [r4, #4]
 8006384:	bf04      	itt	eq
 8006386:	1852      	addeq	r2, r2, r1
 8006388:	6022      	streq	r2, [r4, #0]
 800638a:	6004      	str	r4, [r0, #0]
 800638c:	e7ec      	b.n	8006368 <_free_r+0x24>
 800638e:	4613      	mov	r3, r2
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	b10a      	cbz	r2, 8006398 <_free_r+0x54>
 8006394:	42a2      	cmp	r2, r4
 8006396:	d9fa      	bls.n	800638e <_free_r+0x4a>
 8006398:	6819      	ldr	r1, [r3, #0]
 800639a:	1858      	adds	r0, r3, r1
 800639c:	42a0      	cmp	r0, r4
 800639e:	d10b      	bne.n	80063b8 <_free_r+0x74>
 80063a0:	6820      	ldr	r0, [r4, #0]
 80063a2:	4401      	add	r1, r0
 80063a4:	1858      	adds	r0, r3, r1
 80063a6:	4282      	cmp	r2, r0
 80063a8:	6019      	str	r1, [r3, #0]
 80063aa:	d1dd      	bne.n	8006368 <_free_r+0x24>
 80063ac:	6810      	ldr	r0, [r2, #0]
 80063ae:	6852      	ldr	r2, [r2, #4]
 80063b0:	605a      	str	r2, [r3, #4]
 80063b2:	4401      	add	r1, r0
 80063b4:	6019      	str	r1, [r3, #0]
 80063b6:	e7d7      	b.n	8006368 <_free_r+0x24>
 80063b8:	d902      	bls.n	80063c0 <_free_r+0x7c>
 80063ba:	230c      	movs	r3, #12
 80063bc:	602b      	str	r3, [r5, #0]
 80063be:	e7d3      	b.n	8006368 <_free_r+0x24>
 80063c0:	6820      	ldr	r0, [r4, #0]
 80063c2:	1821      	adds	r1, r4, r0
 80063c4:	428a      	cmp	r2, r1
 80063c6:	bf04      	itt	eq
 80063c8:	6811      	ldreq	r1, [r2, #0]
 80063ca:	6852      	ldreq	r2, [r2, #4]
 80063cc:	6062      	str	r2, [r4, #4]
 80063ce:	bf04      	itt	eq
 80063d0:	1809      	addeq	r1, r1, r0
 80063d2:	6021      	streq	r1, [r4, #0]
 80063d4:	605c      	str	r4, [r3, #4]
 80063d6:	e7c7      	b.n	8006368 <_free_r+0x24>
 80063d8:	bd38      	pop	{r3, r4, r5, pc}
 80063da:	bf00      	nop
 80063dc:	2000013c 	.word	0x2000013c

080063e0 <_malloc_r>:
 80063e0:	b570      	push	{r4, r5, r6, lr}
 80063e2:	1ccd      	adds	r5, r1, #3
 80063e4:	f025 0503 	bic.w	r5, r5, #3
 80063e8:	3508      	adds	r5, #8
 80063ea:	2d0c      	cmp	r5, #12
 80063ec:	bf38      	it	cc
 80063ee:	250c      	movcc	r5, #12
 80063f0:	2d00      	cmp	r5, #0
 80063f2:	4606      	mov	r6, r0
 80063f4:	db01      	blt.n	80063fa <_malloc_r+0x1a>
 80063f6:	42a9      	cmp	r1, r5
 80063f8:	d903      	bls.n	8006402 <_malloc_r+0x22>
 80063fa:	230c      	movs	r3, #12
 80063fc:	6033      	str	r3, [r6, #0]
 80063fe:	2000      	movs	r0, #0
 8006400:	bd70      	pop	{r4, r5, r6, pc}
 8006402:	f000 f87d 	bl	8006500 <__malloc_lock>
 8006406:	4a21      	ldr	r2, [pc, #132]	; (800648c <_malloc_r+0xac>)
 8006408:	6814      	ldr	r4, [r2, #0]
 800640a:	4621      	mov	r1, r4
 800640c:	b991      	cbnz	r1, 8006434 <_malloc_r+0x54>
 800640e:	4c20      	ldr	r4, [pc, #128]	; (8006490 <_malloc_r+0xb0>)
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	b91b      	cbnz	r3, 800641c <_malloc_r+0x3c>
 8006414:	4630      	mov	r0, r6
 8006416:	f000 f863 	bl	80064e0 <_sbrk_r>
 800641a:	6020      	str	r0, [r4, #0]
 800641c:	4629      	mov	r1, r5
 800641e:	4630      	mov	r0, r6
 8006420:	f000 f85e 	bl	80064e0 <_sbrk_r>
 8006424:	1c43      	adds	r3, r0, #1
 8006426:	d124      	bne.n	8006472 <_malloc_r+0x92>
 8006428:	230c      	movs	r3, #12
 800642a:	6033      	str	r3, [r6, #0]
 800642c:	4630      	mov	r0, r6
 800642e:	f000 f868 	bl	8006502 <__malloc_unlock>
 8006432:	e7e4      	b.n	80063fe <_malloc_r+0x1e>
 8006434:	680b      	ldr	r3, [r1, #0]
 8006436:	1b5b      	subs	r3, r3, r5
 8006438:	d418      	bmi.n	800646c <_malloc_r+0x8c>
 800643a:	2b0b      	cmp	r3, #11
 800643c:	d90f      	bls.n	800645e <_malloc_r+0x7e>
 800643e:	600b      	str	r3, [r1, #0]
 8006440:	50cd      	str	r5, [r1, r3]
 8006442:	18cc      	adds	r4, r1, r3
 8006444:	4630      	mov	r0, r6
 8006446:	f000 f85c 	bl	8006502 <__malloc_unlock>
 800644a:	f104 000b 	add.w	r0, r4, #11
 800644e:	1d23      	adds	r3, r4, #4
 8006450:	f020 0007 	bic.w	r0, r0, #7
 8006454:	1ac3      	subs	r3, r0, r3
 8006456:	d0d3      	beq.n	8006400 <_malloc_r+0x20>
 8006458:	425a      	negs	r2, r3
 800645a:	50e2      	str	r2, [r4, r3]
 800645c:	e7d0      	b.n	8006400 <_malloc_r+0x20>
 800645e:	428c      	cmp	r4, r1
 8006460:	684b      	ldr	r3, [r1, #4]
 8006462:	bf16      	itet	ne
 8006464:	6063      	strne	r3, [r4, #4]
 8006466:	6013      	streq	r3, [r2, #0]
 8006468:	460c      	movne	r4, r1
 800646a:	e7eb      	b.n	8006444 <_malloc_r+0x64>
 800646c:	460c      	mov	r4, r1
 800646e:	6849      	ldr	r1, [r1, #4]
 8006470:	e7cc      	b.n	800640c <_malloc_r+0x2c>
 8006472:	1cc4      	adds	r4, r0, #3
 8006474:	f024 0403 	bic.w	r4, r4, #3
 8006478:	42a0      	cmp	r0, r4
 800647a:	d005      	beq.n	8006488 <_malloc_r+0xa8>
 800647c:	1a21      	subs	r1, r4, r0
 800647e:	4630      	mov	r0, r6
 8006480:	f000 f82e 	bl	80064e0 <_sbrk_r>
 8006484:	3001      	adds	r0, #1
 8006486:	d0cf      	beq.n	8006428 <_malloc_r+0x48>
 8006488:	6025      	str	r5, [r4, #0]
 800648a:	e7db      	b.n	8006444 <_malloc_r+0x64>
 800648c:	2000013c 	.word	0x2000013c
 8006490:	20000140 	.word	0x20000140

08006494 <_realloc_r>:
 8006494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006496:	4607      	mov	r7, r0
 8006498:	4614      	mov	r4, r2
 800649a:	460e      	mov	r6, r1
 800649c:	b921      	cbnz	r1, 80064a8 <_realloc_r+0x14>
 800649e:	4611      	mov	r1, r2
 80064a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80064a4:	f7ff bf9c 	b.w	80063e0 <_malloc_r>
 80064a8:	b922      	cbnz	r2, 80064b4 <_realloc_r+0x20>
 80064aa:	f7ff ff4b 	bl	8006344 <_free_r>
 80064ae:	4625      	mov	r5, r4
 80064b0:	4628      	mov	r0, r5
 80064b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064b4:	f000 f826 	bl	8006504 <_malloc_usable_size_r>
 80064b8:	42a0      	cmp	r0, r4
 80064ba:	d20f      	bcs.n	80064dc <_realloc_r+0x48>
 80064bc:	4621      	mov	r1, r4
 80064be:	4638      	mov	r0, r7
 80064c0:	f7ff ff8e 	bl	80063e0 <_malloc_r>
 80064c4:	4605      	mov	r5, r0
 80064c6:	2800      	cmp	r0, #0
 80064c8:	d0f2      	beq.n	80064b0 <_realloc_r+0x1c>
 80064ca:	4631      	mov	r1, r6
 80064cc:	4622      	mov	r2, r4
 80064ce:	f7ff ff15 	bl	80062fc <memcpy>
 80064d2:	4631      	mov	r1, r6
 80064d4:	4638      	mov	r0, r7
 80064d6:	f7ff ff35 	bl	8006344 <_free_r>
 80064da:	e7e9      	b.n	80064b0 <_realloc_r+0x1c>
 80064dc:	4635      	mov	r5, r6
 80064de:	e7e7      	b.n	80064b0 <_realloc_r+0x1c>

080064e0 <_sbrk_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	4c06      	ldr	r4, [pc, #24]	; (80064fc <_sbrk_r+0x1c>)
 80064e4:	2300      	movs	r3, #0
 80064e6:	4605      	mov	r5, r0
 80064e8:	4608      	mov	r0, r1
 80064ea:	6023      	str	r3, [r4, #0]
 80064ec:	f7fc f874 	bl	80025d8 <_sbrk>
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	d102      	bne.n	80064fa <_sbrk_r+0x1a>
 80064f4:	6823      	ldr	r3, [r4, #0]
 80064f6:	b103      	cbz	r3, 80064fa <_sbrk_r+0x1a>
 80064f8:	602b      	str	r3, [r5, #0]
 80064fa:	bd38      	pop	{r3, r4, r5, pc}
 80064fc:	20000350 	.word	0x20000350

08006500 <__malloc_lock>:
 8006500:	4770      	bx	lr

08006502 <__malloc_unlock>:
 8006502:	4770      	bx	lr

08006504 <_malloc_usable_size_r>:
 8006504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006508:	1f18      	subs	r0, r3, #4
 800650a:	2b00      	cmp	r3, #0
 800650c:	bfbc      	itt	lt
 800650e:	580b      	ldrlt	r3, [r1, r0]
 8006510:	18c0      	addlt	r0, r0, r3
 8006512:	4770      	bx	lr

08006514 <pow>:
 8006514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006518:	ed2d 8b04 	vpush	{d8-d9}
 800651c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80067f0 <pow+0x2dc>
 8006520:	b08d      	sub	sp, #52	; 0x34
 8006522:	ec57 6b10 	vmov	r6, r7, d0
 8006526:	ec55 4b11 	vmov	r4, r5, d1
 800652a:	f000 f965 	bl	80067f8 <__ieee754_pow>
 800652e:	f999 3000 	ldrsb.w	r3, [r9]
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	3301      	adds	r3, #1
 8006536:	eeb0 8a40 	vmov.f32	s16, s0
 800653a:	eef0 8a60 	vmov.f32	s17, s1
 800653e:	46c8      	mov	r8, r9
 8006540:	d05f      	beq.n	8006602 <pow+0xee>
 8006542:	4622      	mov	r2, r4
 8006544:	462b      	mov	r3, r5
 8006546:	4620      	mov	r0, r4
 8006548:	4629      	mov	r1, r5
 800654a:	f7fa faf7 	bl	8000b3c <__aeabi_dcmpun>
 800654e:	4683      	mov	fp, r0
 8006550:	2800      	cmp	r0, #0
 8006552:	d156      	bne.n	8006602 <pow+0xee>
 8006554:	4632      	mov	r2, r6
 8006556:	463b      	mov	r3, r7
 8006558:	4630      	mov	r0, r6
 800655a:	4639      	mov	r1, r7
 800655c:	f7fa faee 	bl	8000b3c <__aeabi_dcmpun>
 8006560:	9001      	str	r0, [sp, #4]
 8006562:	b1e8      	cbz	r0, 80065a0 <pow+0x8c>
 8006564:	2200      	movs	r2, #0
 8006566:	2300      	movs	r3, #0
 8006568:	4620      	mov	r0, r4
 800656a:	4629      	mov	r1, r5
 800656c:	f7fa fab4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006570:	2800      	cmp	r0, #0
 8006572:	d046      	beq.n	8006602 <pow+0xee>
 8006574:	2301      	movs	r3, #1
 8006576:	9302      	str	r3, [sp, #8]
 8006578:	4b96      	ldr	r3, [pc, #600]	; (80067d4 <pow+0x2c0>)
 800657a:	9303      	str	r3, [sp, #12]
 800657c:	4b96      	ldr	r3, [pc, #600]	; (80067d8 <pow+0x2c4>)
 800657e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006582:	2200      	movs	r2, #0
 8006584:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006588:	9b00      	ldr	r3, [sp, #0]
 800658a:	2b02      	cmp	r3, #2
 800658c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006590:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006594:	d033      	beq.n	80065fe <pow+0xea>
 8006596:	a802      	add	r0, sp, #8
 8006598:	f000 fefd 	bl	8007396 <matherr>
 800659c:	bb48      	cbnz	r0, 80065f2 <pow+0xde>
 800659e:	e05d      	b.n	800665c <pow+0x148>
 80065a0:	f04f 0a00 	mov.w	sl, #0
 80065a4:	f04f 0b00 	mov.w	fp, #0
 80065a8:	4652      	mov	r2, sl
 80065aa:	465b      	mov	r3, fp
 80065ac:	4630      	mov	r0, r6
 80065ae:	4639      	mov	r1, r7
 80065b0:	f7fa fa92 	bl	8000ad8 <__aeabi_dcmpeq>
 80065b4:	ec4b ab19 	vmov	d9, sl, fp
 80065b8:	2800      	cmp	r0, #0
 80065ba:	d054      	beq.n	8006666 <pow+0x152>
 80065bc:	4652      	mov	r2, sl
 80065be:	465b      	mov	r3, fp
 80065c0:	4620      	mov	r0, r4
 80065c2:	4629      	mov	r1, r5
 80065c4:	f7fa fa88 	bl	8000ad8 <__aeabi_dcmpeq>
 80065c8:	4680      	mov	r8, r0
 80065ca:	b318      	cbz	r0, 8006614 <pow+0x100>
 80065cc:	2301      	movs	r3, #1
 80065ce:	9302      	str	r3, [sp, #8]
 80065d0:	4b80      	ldr	r3, [pc, #512]	; (80067d4 <pow+0x2c0>)
 80065d2:	9303      	str	r3, [sp, #12]
 80065d4:	9b01      	ldr	r3, [sp, #4]
 80065d6:	930a      	str	r3, [sp, #40]	; 0x28
 80065d8:	9b00      	ldr	r3, [sp, #0]
 80065da:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80065de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80065e2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d0d5      	beq.n	8006596 <pow+0x82>
 80065ea:	4b7b      	ldr	r3, [pc, #492]	; (80067d8 <pow+0x2c4>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80065f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065f4:	b11b      	cbz	r3, 80065fe <pow+0xea>
 80065f6:	f7ff fb45 	bl	8005c84 <__errno>
 80065fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065fc:	6003      	str	r3, [r0, #0]
 80065fe:	ed9d 8b08 	vldr	d8, [sp, #32]
 8006602:	eeb0 0a48 	vmov.f32	s0, s16
 8006606:	eef0 0a68 	vmov.f32	s1, s17
 800660a:	b00d      	add	sp, #52	; 0x34
 800660c:	ecbd 8b04 	vpop	{d8-d9}
 8006610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006614:	ec45 4b10 	vmov	d0, r4, r5
 8006618:	f000 feb5 	bl	8007386 <finite>
 800661c:	2800      	cmp	r0, #0
 800661e:	d0f0      	beq.n	8006602 <pow+0xee>
 8006620:	4652      	mov	r2, sl
 8006622:	465b      	mov	r3, fp
 8006624:	4620      	mov	r0, r4
 8006626:	4629      	mov	r1, r5
 8006628:	f7fa fa60 	bl	8000aec <__aeabi_dcmplt>
 800662c:	2800      	cmp	r0, #0
 800662e:	d0e8      	beq.n	8006602 <pow+0xee>
 8006630:	2301      	movs	r3, #1
 8006632:	9302      	str	r3, [sp, #8]
 8006634:	4b67      	ldr	r3, [pc, #412]	; (80067d4 <pow+0x2c0>)
 8006636:	9303      	str	r3, [sp, #12]
 8006638:	f999 3000 	ldrsb.w	r3, [r9]
 800663c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8006640:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006644:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006648:	b913      	cbnz	r3, 8006650 <pow+0x13c>
 800664a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800664e:	e7a2      	b.n	8006596 <pow+0x82>
 8006650:	4962      	ldr	r1, [pc, #392]	; (80067dc <pow+0x2c8>)
 8006652:	2000      	movs	r0, #0
 8006654:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006658:	2b02      	cmp	r3, #2
 800665a:	d19c      	bne.n	8006596 <pow+0x82>
 800665c:	f7ff fb12 	bl	8005c84 <__errno>
 8006660:	2321      	movs	r3, #33	; 0x21
 8006662:	6003      	str	r3, [r0, #0]
 8006664:	e7c5      	b.n	80065f2 <pow+0xde>
 8006666:	eeb0 0a48 	vmov.f32	s0, s16
 800666a:	eef0 0a68 	vmov.f32	s1, s17
 800666e:	f000 fe8a 	bl	8007386 <finite>
 8006672:	9000      	str	r0, [sp, #0]
 8006674:	2800      	cmp	r0, #0
 8006676:	f040 8081 	bne.w	800677c <pow+0x268>
 800667a:	ec47 6b10 	vmov	d0, r6, r7
 800667e:	f000 fe82 	bl	8007386 <finite>
 8006682:	2800      	cmp	r0, #0
 8006684:	d07a      	beq.n	800677c <pow+0x268>
 8006686:	ec45 4b10 	vmov	d0, r4, r5
 800668a:	f000 fe7c 	bl	8007386 <finite>
 800668e:	2800      	cmp	r0, #0
 8006690:	d074      	beq.n	800677c <pow+0x268>
 8006692:	ec53 2b18 	vmov	r2, r3, d8
 8006696:	ee18 0a10 	vmov	r0, s16
 800669a:	4619      	mov	r1, r3
 800669c:	f7fa fa4e 	bl	8000b3c <__aeabi_dcmpun>
 80066a0:	f999 9000 	ldrsb.w	r9, [r9]
 80066a4:	4b4b      	ldr	r3, [pc, #300]	; (80067d4 <pow+0x2c0>)
 80066a6:	b1b0      	cbz	r0, 80066d6 <pow+0x1c2>
 80066a8:	2201      	movs	r2, #1
 80066aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066ae:	9b00      	ldr	r3, [sp, #0]
 80066b0:	930a      	str	r3, [sp, #40]	; 0x28
 80066b2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80066b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80066ba:	f1b9 0f00 	cmp.w	r9, #0
 80066be:	d0c4      	beq.n	800664a <pow+0x136>
 80066c0:	4652      	mov	r2, sl
 80066c2:	465b      	mov	r3, fp
 80066c4:	4650      	mov	r0, sl
 80066c6:	4659      	mov	r1, fp
 80066c8:	f7fa f8c8 	bl	800085c <__aeabi_ddiv>
 80066cc:	f1b9 0f02 	cmp.w	r9, #2
 80066d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80066d4:	e7c1      	b.n	800665a <pow+0x146>
 80066d6:	2203      	movs	r2, #3
 80066d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066dc:	900a      	str	r0, [sp, #40]	; 0x28
 80066de:	4629      	mov	r1, r5
 80066e0:	4620      	mov	r0, r4
 80066e2:	2200      	movs	r2, #0
 80066e4:	4b3e      	ldr	r3, [pc, #248]	; (80067e0 <pow+0x2cc>)
 80066e6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80066ea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80066ee:	f7f9 ff8b 	bl	8000608 <__aeabi_dmul>
 80066f2:	4604      	mov	r4, r0
 80066f4:	460d      	mov	r5, r1
 80066f6:	f1b9 0f00 	cmp.w	r9, #0
 80066fa:	d124      	bne.n	8006746 <pow+0x232>
 80066fc:	4b39      	ldr	r3, [pc, #228]	; (80067e4 <pow+0x2d0>)
 80066fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006702:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006706:	4630      	mov	r0, r6
 8006708:	4652      	mov	r2, sl
 800670a:	465b      	mov	r3, fp
 800670c:	4639      	mov	r1, r7
 800670e:	f7fa f9ed 	bl	8000aec <__aeabi_dcmplt>
 8006712:	2800      	cmp	r0, #0
 8006714:	d056      	beq.n	80067c4 <pow+0x2b0>
 8006716:	ec45 4b10 	vmov	d0, r4, r5
 800671a:	f000 fe49 	bl	80073b0 <rint>
 800671e:	4622      	mov	r2, r4
 8006720:	462b      	mov	r3, r5
 8006722:	ec51 0b10 	vmov	r0, r1, d0
 8006726:	f7fa f9d7 	bl	8000ad8 <__aeabi_dcmpeq>
 800672a:	b920      	cbnz	r0, 8006736 <pow+0x222>
 800672c:	4b2e      	ldr	r3, [pc, #184]	; (80067e8 <pow+0x2d4>)
 800672e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006732:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006736:	f998 3000 	ldrsb.w	r3, [r8]
 800673a:	2b02      	cmp	r3, #2
 800673c:	d142      	bne.n	80067c4 <pow+0x2b0>
 800673e:	f7ff faa1 	bl	8005c84 <__errno>
 8006742:	2322      	movs	r3, #34	; 0x22
 8006744:	e78d      	b.n	8006662 <pow+0x14e>
 8006746:	4b29      	ldr	r3, [pc, #164]	; (80067ec <pow+0x2d8>)
 8006748:	2200      	movs	r2, #0
 800674a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800674e:	4630      	mov	r0, r6
 8006750:	4652      	mov	r2, sl
 8006752:	465b      	mov	r3, fp
 8006754:	4639      	mov	r1, r7
 8006756:	f7fa f9c9 	bl	8000aec <__aeabi_dcmplt>
 800675a:	2800      	cmp	r0, #0
 800675c:	d0eb      	beq.n	8006736 <pow+0x222>
 800675e:	ec45 4b10 	vmov	d0, r4, r5
 8006762:	f000 fe25 	bl	80073b0 <rint>
 8006766:	4622      	mov	r2, r4
 8006768:	462b      	mov	r3, r5
 800676a:	ec51 0b10 	vmov	r0, r1, d0
 800676e:	f7fa f9b3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006772:	2800      	cmp	r0, #0
 8006774:	d1df      	bne.n	8006736 <pow+0x222>
 8006776:	2200      	movs	r2, #0
 8006778:	4b18      	ldr	r3, [pc, #96]	; (80067dc <pow+0x2c8>)
 800677a:	e7da      	b.n	8006732 <pow+0x21e>
 800677c:	2200      	movs	r2, #0
 800677e:	2300      	movs	r3, #0
 8006780:	ec51 0b18 	vmov	r0, r1, d8
 8006784:	f7fa f9a8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006788:	2800      	cmp	r0, #0
 800678a:	f43f af3a 	beq.w	8006602 <pow+0xee>
 800678e:	ec47 6b10 	vmov	d0, r6, r7
 8006792:	f000 fdf8 	bl	8007386 <finite>
 8006796:	2800      	cmp	r0, #0
 8006798:	f43f af33 	beq.w	8006602 <pow+0xee>
 800679c:	ec45 4b10 	vmov	d0, r4, r5
 80067a0:	f000 fdf1 	bl	8007386 <finite>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	f43f af2c 	beq.w	8006602 <pow+0xee>
 80067aa:	2304      	movs	r3, #4
 80067ac:	9302      	str	r3, [sp, #8]
 80067ae:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <pow+0x2c0>)
 80067b0:	9303      	str	r3, [sp, #12]
 80067b2:	2300      	movs	r3, #0
 80067b4:	930a      	str	r3, [sp, #40]	; 0x28
 80067b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80067ba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80067be:	ed8d 9b08 	vstr	d9, [sp, #32]
 80067c2:	e7b8      	b.n	8006736 <pow+0x222>
 80067c4:	a802      	add	r0, sp, #8
 80067c6:	f000 fde6 	bl	8007396 <matherr>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	f47f af11 	bne.w	80065f2 <pow+0xde>
 80067d0:	e7b5      	b.n	800673e <pow+0x22a>
 80067d2:	bf00      	nop
 80067d4:	08007773 	.word	0x08007773
 80067d8:	3ff00000 	.word	0x3ff00000
 80067dc:	fff00000 	.word	0xfff00000
 80067e0:	3fe00000 	.word	0x3fe00000
 80067e4:	47efffff 	.word	0x47efffff
 80067e8:	c7efffff 	.word	0xc7efffff
 80067ec:	7ff00000 	.word	0x7ff00000
 80067f0:	20000070 	.word	0x20000070
 80067f4:	00000000 	.word	0x00000000

080067f8 <__ieee754_pow>:
 80067f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fc:	b091      	sub	sp, #68	; 0x44
 80067fe:	ed8d 1b00 	vstr	d1, [sp]
 8006802:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006806:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800680a:	ea58 0302 	orrs.w	r3, r8, r2
 800680e:	ec57 6b10 	vmov	r6, r7, d0
 8006812:	f000 84be 	beq.w	8007192 <__ieee754_pow+0x99a>
 8006816:	4b7a      	ldr	r3, [pc, #488]	; (8006a00 <__ieee754_pow+0x208>)
 8006818:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800681c:	429c      	cmp	r4, r3
 800681e:	463d      	mov	r5, r7
 8006820:	ee10 aa10 	vmov	sl, s0
 8006824:	dc09      	bgt.n	800683a <__ieee754_pow+0x42>
 8006826:	d103      	bne.n	8006830 <__ieee754_pow+0x38>
 8006828:	b93e      	cbnz	r6, 800683a <__ieee754_pow+0x42>
 800682a:	45a0      	cmp	r8, r4
 800682c:	dc0d      	bgt.n	800684a <__ieee754_pow+0x52>
 800682e:	e001      	b.n	8006834 <__ieee754_pow+0x3c>
 8006830:	4598      	cmp	r8, r3
 8006832:	dc02      	bgt.n	800683a <__ieee754_pow+0x42>
 8006834:	4598      	cmp	r8, r3
 8006836:	d10e      	bne.n	8006856 <__ieee754_pow+0x5e>
 8006838:	b16a      	cbz	r2, 8006856 <__ieee754_pow+0x5e>
 800683a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800683e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006842:	ea54 030a 	orrs.w	r3, r4, sl
 8006846:	f000 84a4 	beq.w	8007192 <__ieee754_pow+0x99a>
 800684a:	486e      	ldr	r0, [pc, #440]	; (8006a04 <__ieee754_pow+0x20c>)
 800684c:	b011      	add	sp, #68	; 0x44
 800684e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006852:	f000 bda5 	b.w	80073a0 <nan>
 8006856:	2d00      	cmp	r5, #0
 8006858:	da53      	bge.n	8006902 <__ieee754_pow+0x10a>
 800685a:	4b6b      	ldr	r3, [pc, #428]	; (8006a08 <__ieee754_pow+0x210>)
 800685c:	4598      	cmp	r8, r3
 800685e:	dc4d      	bgt.n	80068fc <__ieee754_pow+0x104>
 8006860:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006864:	4598      	cmp	r8, r3
 8006866:	dd4c      	ble.n	8006902 <__ieee754_pow+0x10a>
 8006868:	ea4f 5328 	mov.w	r3, r8, asr #20
 800686c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006870:	2b14      	cmp	r3, #20
 8006872:	dd26      	ble.n	80068c2 <__ieee754_pow+0xca>
 8006874:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006878:	fa22 f103 	lsr.w	r1, r2, r3
 800687c:	fa01 f303 	lsl.w	r3, r1, r3
 8006880:	4293      	cmp	r3, r2
 8006882:	d13e      	bne.n	8006902 <__ieee754_pow+0x10a>
 8006884:	f001 0101 	and.w	r1, r1, #1
 8006888:	f1c1 0b02 	rsb	fp, r1, #2
 800688c:	2a00      	cmp	r2, #0
 800688e:	d15b      	bne.n	8006948 <__ieee754_pow+0x150>
 8006890:	4b5b      	ldr	r3, [pc, #364]	; (8006a00 <__ieee754_pow+0x208>)
 8006892:	4598      	cmp	r8, r3
 8006894:	d124      	bne.n	80068e0 <__ieee754_pow+0xe8>
 8006896:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800689a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800689e:	ea53 030a 	orrs.w	r3, r3, sl
 80068a2:	f000 8476 	beq.w	8007192 <__ieee754_pow+0x99a>
 80068a6:	4b59      	ldr	r3, [pc, #356]	; (8006a0c <__ieee754_pow+0x214>)
 80068a8:	429c      	cmp	r4, r3
 80068aa:	dd2d      	ble.n	8006908 <__ieee754_pow+0x110>
 80068ac:	f1b9 0f00 	cmp.w	r9, #0
 80068b0:	f280 8473 	bge.w	800719a <__ieee754_pow+0x9a2>
 80068b4:	2000      	movs	r0, #0
 80068b6:	2100      	movs	r1, #0
 80068b8:	ec41 0b10 	vmov	d0, r0, r1
 80068bc:	b011      	add	sp, #68	; 0x44
 80068be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c2:	2a00      	cmp	r2, #0
 80068c4:	d13e      	bne.n	8006944 <__ieee754_pow+0x14c>
 80068c6:	f1c3 0314 	rsb	r3, r3, #20
 80068ca:	fa48 f103 	asr.w	r1, r8, r3
 80068ce:	fa01 f303 	lsl.w	r3, r1, r3
 80068d2:	4543      	cmp	r3, r8
 80068d4:	f040 8469 	bne.w	80071aa <__ieee754_pow+0x9b2>
 80068d8:	f001 0101 	and.w	r1, r1, #1
 80068dc:	f1c1 0b02 	rsb	fp, r1, #2
 80068e0:	4b4b      	ldr	r3, [pc, #300]	; (8006a10 <__ieee754_pow+0x218>)
 80068e2:	4598      	cmp	r8, r3
 80068e4:	d118      	bne.n	8006918 <__ieee754_pow+0x120>
 80068e6:	f1b9 0f00 	cmp.w	r9, #0
 80068ea:	f280 845a 	bge.w	80071a2 <__ieee754_pow+0x9aa>
 80068ee:	4948      	ldr	r1, [pc, #288]	; (8006a10 <__ieee754_pow+0x218>)
 80068f0:	4632      	mov	r2, r6
 80068f2:	463b      	mov	r3, r7
 80068f4:	2000      	movs	r0, #0
 80068f6:	f7f9 ffb1 	bl	800085c <__aeabi_ddiv>
 80068fa:	e7dd      	b.n	80068b8 <__ieee754_pow+0xc0>
 80068fc:	f04f 0b02 	mov.w	fp, #2
 8006900:	e7c4      	b.n	800688c <__ieee754_pow+0x94>
 8006902:	f04f 0b00 	mov.w	fp, #0
 8006906:	e7c1      	b.n	800688c <__ieee754_pow+0x94>
 8006908:	f1b9 0f00 	cmp.w	r9, #0
 800690c:	dad2      	bge.n	80068b4 <__ieee754_pow+0xbc>
 800690e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006912:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006916:	e7cf      	b.n	80068b8 <__ieee754_pow+0xc0>
 8006918:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800691c:	d106      	bne.n	800692c <__ieee754_pow+0x134>
 800691e:	4632      	mov	r2, r6
 8006920:	463b      	mov	r3, r7
 8006922:	4610      	mov	r0, r2
 8006924:	4619      	mov	r1, r3
 8006926:	f7f9 fe6f 	bl	8000608 <__aeabi_dmul>
 800692a:	e7c5      	b.n	80068b8 <__ieee754_pow+0xc0>
 800692c:	4b39      	ldr	r3, [pc, #228]	; (8006a14 <__ieee754_pow+0x21c>)
 800692e:	4599      	cmp	r9, r3
 8006930:	d10a      	bne.n	8006948 <__ieee754_pow+0x150>
 8006932:	2d00      	cmp	r5, #0
 8006934:	db08      	blt.n	8006948 <__ieee754_pow+0x150>
 8006936:	ec47 6b10 	vmov	d0, r6, r7
 800693a:	b011      	add	sp, #68	; 0x44
 800693c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006940:	f000 bc68 	b.w	8007214 <__ieee754_sqrt>
 8006944:	f04f 0b00 	mov.w	fp, #0
 8006948:	ec47 6b10 	vmov	d0, r6, r7
 800694c:	f000 fd12 	bl	8007374 <fabs>
 8006950:	ec51 0b10 	vmov	r0, r1, d0
 8006954:	f1ba 0f00 	cmp.w	sl, #0
 8006958:	d127      	bne.n	80069aa <__ieee754_pow+0x1b2>
 800695a:	b124      	cbz	r4, 8006966 <__ieee754_pow+0x16e>
 800695c:	4b2c      	ldr	r3, [pc, #176]	; (8006a10 <__ieee754_pow+0x218>)
 800695e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006962:	429a      	cmp	r2, r3
 8006964:	d121      	bne.n	80069aa <__ieee754_pow+0x1b2>
 8006966:	f1b9 0f00 	cmp.w	r9, #0
 800696a:	da05      	bge.n	8006978 <__ieee754_pow+0x180>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	2000      	movs	r0, #0
 8006972:	4927      	ldr	r1, [pc, #156]	; (8006a10 <__ieee754_pow+0x218>)
 8006974:	f7f9 ff72 	bl	800085c <__aeabi_ddiv>
 8006978:	2d00      	cmp	r5, #0
 800697a:	da9d      	bge.n	80068b8 <__ieee754_pow+0xc0>
 800697c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006980:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006984:	ea54 030b 	orrs.w	r3, r4, fp
 8006988:	d108      	bne.n	800699c <__ieee754_pow+0x1a4>
 800698a:	4602      	mov	r2, r0
 800698c:	460b      	mov	r3, r1
 800698e:	4610      	mov	r0, r2
 8006990:	4619      	mov	r1, r3
 8006992:	f7f9 fc81 	bl	8000298 <__aeabi_dsub>
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	e7ac      	b.n	80068f6 <__ieee754_pow+0xfe>
 800699c:	f1bb 0f01 	cmp.w	fp, #1
 80069a0:	d18a      	bne.n	80068b8 <__ieee754_pow+0xc0>
 80069a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069a6:	4619      	mov	r1, r3
 80069a8:	e786      	b.n	80068b8 <__ieee754_pow+0xc0>
 80069aa:	0fed      	lsrs	r5, r5, #31
 80069ac:	1e6b      	subs	r3, r5, #1
 80069ae:	930d      	str	r3, [sp, #52]	; 0x34
 80069b0:	ea5b 0303 	orrs.w	r3, fp, r3
 80069b4:	d102      	bne.n	80069bc <__ieee754_pow+0x1c4>
 80069b6:	4632      	mov	r2, r6
 80069b8:	463b      	mov	r3, r7
 80069ba:	e7e8      	b.n	800698e <__ieee754_pow+0x196>
 80069bc:	4b16      	ldr	r3, [pc, #88]	; (8006a18 <__ieee754_pow+0x220>)
 80069be:	4598      	cmp	r8, r3
 80069c0:	f340 80fe 	ble.w	8006bc0 <__ieee754_pow+0x3c8>
 80069c4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80069c8:	4598      	cmp	r8, r3
 80069ca:	dd0a      	ble.n	80069e2 <__ieee754_pow+0x1ea>
 80069cc:	4b0f      	ldr	r3, [pc, #60]	; (8006a0c <__ieee754_pow+0x214>)
 80069ce:	429c      	cmp	r4, r3
 80069d0:	dc0d      	bgt.n	80069ee <__ieee754_pow+0x1f6>
 80069d2:	f1b9 0f00 	cmp.w	r9, #0
 80069d6:	f6bf af6d 	bge.w	80068b4 <__ieee754_pow+0xbc>
 80069da:	a307      	add	r3, pc, #28	; (adr r3, 80069f8 <__ieee754_pow+0x200>)
 80069dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e0:	e79f      	b.n	8006922 <__ieee754_pow+0x12a>
 80069e2:	4b0e      	ldr	r3, [pc, #56]	; (8006a1c <__ieee754_pow+0x224>)
 80069e4:	429c      	cmp	r4, r3
 80069e6:	ddf4      	ble.n	80069d2 <__ieee754_pow+0x1da>
 80069e8:	4b09      	ldr	r3, [pc, #36]	; (8006a10 <__ieee754_pow+0x218>)
 80069ea:	429c      	cmp	r4, r3
 80069ec:	dd18      	ble.n	8006a20 <__ieee754_pow+0x228>
 80069ee:	f1b9 0f00 	cmp.w	r9, #0
 80069f2:	dcf2      	bgt.n	80069da <__ieee754_pow+0x1e2>
 80069f4:	e75e      	b.n	80068b4 <__ieee754_pow+0xbc>
 80069f6:	bf00      	nop
 80069f8:	8800759c 	.word	0x8800759c
 80069fc:	7e37e43c 	.word	0x7e37e43c
 8006a00:	7ff00000 	.word	0x7ff00000
 8006a04:	08007745 	.word	0x08007745
 8006a08:	433fffff 	.word	0x433fffff
 8006a0c:	3fefffff 	.word	0x3fefffff
 8006a10:	3ff00000 	.word	0x3ff00000
 8006a14:	3fe00000 	.word	0x3fe00000
 8006a18:	41e00000 	.word	0x41e00000
 8006a1c:	3feffffe 	.word	0x3feffffe
 8006a20:	2200      	movs	r2, #0
 8006a22:	4b63      	ldr	r3, [pc, #396]	; (8006bb0 <__ieee754_pow+0x3b8>)
 8006a24:	f7f9 fc38 	bl	8000298 <__aeabi_dsub>
 8006a28:	a355      	add	r3, pc, #340	; (adr r3, 8006b80 <__ieee754_pow+0x388>)
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	4604      	mov	r4, r0
 8006a30:	460d      	mov	r5, r1
 8006a32:	f7f9 fde9 	bl	8000608 <__aeabi_dmul>
 8006a36:	a354      	add	r3, pc, #336	; (adr r3, 8006b88 <__ieee754_pow+0x390>)
 8006a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3c:	4606      	mov	r6, r0
 8006a3e:	460f      	mov	r7, r1
 8006a40:	4620      	mov	r0, r4
 8006a42:	4629      	mov	r1, r5
 8006a44:	f7f9 fde0 	bl	8000608 <__aeabi_dmul>
 8006a48:	2200      	movs	r2, #0
 8006a4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a4e:	4b59      	ldr	r3, [pc, #356]	; (8006bb4 <__ieee754_pow+0x3bc>)
 8006a50:	4620      	mov	r0, r4
 8006a52:	4629      	mov	r1, r5
 8006a54:	f7f9 fdd8 	bl	8000608 <__aeabi_dmul>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	a14c      	add	r1, pc, #304	; (adr r1, 8006b90 <__ieee754_pow+0x398>)
 8006a5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a62:	f7f9 fc19 	bl	8000298 <__aeabi_dsub>
 8006a66:	4622      	mov	r2, r4
 8006a68:	462b      	mov	r3, r5
 8006a6a:	f7f9 fdcd 	bl	8000608 <__aeabi_dmul>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	460b      	mov	r3, r1
 8006a72:	2000      	movs	r0, #0
 8006a74:	4950      	ldr	r1, [pc, #320]	; (8006bb8 <__ieee754_pow+0x3c0>)
 8006a76:	f7f9 fc0f 	bl	8000298 <__aeabi_dsub>
 8006a7a:	4622      	mov	r2, r4
 8006a7c:	462b      	mov	r3, r5
 8006a7e:	4680      	mov	r8, r0
 8006a80:	4689      	mov	r9, r1
 8006a82:	4620      	mov	r0, r4
 8006a84:	4629      	mov	r1, r5
 8006a86:	f7f9 fdbf 	bl	8000608 <__aeabi_dmul>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4640      	mov	r0, r8
 8006a90:	4649      	mov	r1, r9
 8006a92:	f7f9 fdb9 	bl	8000608 <__aeabi_dmul>
 8006a96:	a340      	add	r3, pc, #256	; (adr r3, 8006b98 <__ieee754_pow+0x3a0>)
 8006a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9c:	f7f9 fdb4 	bl	8000608 <__aeabi_dmul>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aa8:	f7f9 fbf6 	bl	8000298 <__aeabi_dsub>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4604      	mov	r4, r0
 8006ab2:	460d      	mov	r5, r1
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	4639      	mov	r1, r7
 8006ab8:	f7f9 fbf0 	bl	800029c <__adddf3>
 8006abc:	2000      	movs	r0, #0
 8006abe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ac2:	4632      	mov	r2, r6
 8006ac4:	463b      	mov	r3, r7
 8006ac6:	f7f9 fbe7 	bl	8000298 <__aeabi_dsub>
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	4620      	mov	r0, r4
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	f7f9 fbe1 	bl	8000298 <__aeabi_dsub>
 8006ad6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ad8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006adc:	4313      	orrs	r3, r2
 8006ade:	4606      	mov	r6, r0
 8006ae0:	460f      	mov	r7, r1
 8006ae2:	f040 81eb 	bne.w	8006ebc <__ieee754_pow+0x6c4>
 8006ae6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8006ba0 <__ieee754_pow+0x3a8>
 8006aea:	e9dd 4500 	ldrd	r4, r5, [sp]
 8006aee:	2400      	movs	r4, #0
 8006af0:	4622      	mov	r2, r4
 8006af2:	462b      	mov	r3, r5
 8006af4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006af8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006afc:	f7f9 fbcc 	bl	8000298 <__aeabi_dsub>
 8006b00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b04:	f7f9 fd80 	bl	8000608 <__aeabi_dmul>
 8006b08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b0c:	4680      	mov	r8, r0
 8006b0e:	4689      	mov	r9, r1
 8006b10:	4630      	mov	r0, r6
 8006b12:	4639      	mov	r1, r7
 8006b14:	f7f9 fd78 	bl	8000608 <__aeabi_dmul>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4640      	mov	r0, r8
 8006b1e:	4649      	mov	r1, r9
 8006b20:	f7f9 fbbc 	bl	800029c <__adddf3>
 8006b24:	4622      	mov	r2, r4
 8006b26:	462b      	mov	r3, r5
 8006b28:	4680      	mov	r8, r0
 8006b2a:	4689      	mov	r9, r1
 8006b2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b30:	f7f9 fd6a 	bl	8000608 <__aeabi_dmul>
 8006b34:	460b      	mov	r3, r1
 8006b36:	4604      	mov	r4, r0
 8006b38:	460d      	mov	r5, r1
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	4640      	mov	r0, r8
 8006b40:	e9cd 4500 	strd	r4, r5, [sp]
 8006b44:	f7f9 fbaa 	bl	800029c <__adddf3>
 8006b48:	4b1c      	ldr	r3, [pc, #112]	; (8006bbc <__ieee754_pow+0x3c4>)
 8006b4a:	4299      	cmp	r1, r3
 8006b4c:	4606      	mov	r6, r0
 8006b4e:	460f      	mov	r7, r1
 8006b50:	468b      	mov	fp, r1
 8006b52:	f340 82f7 	ble.w	8007144 <__ieee754_pow+0x94c>
 8006b56:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006b5a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006b5e:	4303      	orrs	r3, r0
 8006b60:	f000 81ea 	beq.w	8006f38 <__ieee754_pow+0x740>
 8006b64:	a310      	add	r3, pc, #64	; (adr r3, 8006ba8 <__ieee754_pow+0x3b0>)
 8006b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b6e:	f7f9 fd4b 	bl	8000608 <__aeabi_dmul>
 8006b72:	a30d      	add	r3, pc, #52	; (adr r3, 8006ba8 <__ieee754_pow+0x3b0>)
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	e6d5      	b.n	8006926 <__ieee754_pow+0x12e>
 8006b7a:	bf00      	nop
 8006b7c:	f3af 8000 	nop.w
 8006b80:	60000000 	.word	0x60000000
 8006b84:	3ff71547 	.word	0x3ff71547
 8006b88:	f85ddf44 	.word	0xf85ddf44
 8006b8c:	3e54ae0b 	.word	0x3e54ae0b
 8006b90:	55555555 	.word	0x55555555
 8006b94:	3fd55555 	.word	0x3fd55555
 8006b98:	652b82fe 	.word	0x652b82fe
 8006b9c:	3ff71547 	.word	0x3ff71547
 8006ba0:	00000000 	.word	0x00000000
 8006ba4:	bff00000 	.word	0xbff00000
 8006ba8:	8800759c 	.word	0x8800759c
 8006bac:	7e37e43c 	.word	0x7e37e43c
 8006bb0:	3ff00000 	.word	0x3ff00000
 8006bb4:	3fd00000 	.word	0x3fd00000
 8006bb8:	3fe00000 	.word	0x3fe00000
 8006bbc:	408fffff 	.word	0x408fffff
 8006bc0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006bc4:	f04f 0200 	mov.w	r2, #0
 8006bc8:	da05      	bge.n	8006bd6 <__ieee754_pow+0x3de>
 8006bca:	4bd3      	ldr	r3, [pc, #844]	; (8006f18 <__ieee754_pow+0x720>)
 8006bcc:	f7f9 fd1c 	bl	8000608 <__aeabi_dmul>
 8006bd0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006bd4:	460c      	mov	r4, r1
 8006bd6:	1523      	asrs	r3, r4, #20
 8006bd8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006bdc:	4413      	add	r3, r2
 8006bde:	9309      	str	r3, [sp, #36]	; 0x24
 8006be0:	4bce      	ldr	r3, [pc, #824]	; (8006f1c <__ieee754_pow+0x724>)
 8006be2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006be6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006bea:	429c      	cmp	r4, r3
 8006bec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006bf0:	dd08      	ble.n	8006c04 <__ieee754_pow+0x40c>
 8006bf2:	4bcb      	ldr	r3, [pc, #812]	; (8006f20 <__ieee754_pow+0x728>)
 8006bf4:	429c      	cmp	r4, r3
 8006bf6:	f340 815e 	ble.w	8006eb6 <__ieee754_pow+0x6be>
 8006bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8006c00:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006c04:	f04f 0a00 	mov.w	sl, #0
 8006c08:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006c0c:	930c      	str	r3, [sp, #48]	; 0x30
 8006c0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c10:	4bc4      	ldr	r3, [pc, #784]	; (8006f24 <__ieee754_pow+0x72c>)
 8006c12:	4413      	add	r3, r2
 8006c14:	ed93 7b00 	vldr	d7, [r3]
 8006c18:	4629      	mov	r1, r5
 8006c1a:	ec53 2b17 	vmov	r2, r3, d7
 8006c1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006c22:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006c26:	f7f9 fb37 	bl	8000298 <__aeabi_dsub>
 8006c2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c2e:	4606      	mov	r6, r0
 8006c30:	460f      	mov	r7, r1
 8006c32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c36:	f7f9 fb31 	bl	800029c <__adddf3>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	2000      	movs	r0, #0
 8006c40:	49b9      	ldr	r1, [pc, #740]	; (8006f28 <__ieee754_pow+0x730>)
 8006c42:	f7f9 fe0b 	bl	800085c <__aeabi_ddiv>
 8006c46:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4630      	mov	r0, r6
 8006c50:	4639      	mov	r1, r7
 8006c52:	f7f9 fcd9 	bl	8000608 <__aeabi_dmul>
 8006c56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c5a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006c5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006c62:	2300      	movs	r3, #0
 8006c64:	9302      	str	r3, [sp, #8]
 8006c66:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006c6a:	106d      	asrs	r5, r5, #1
 8006c6c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006c70:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006c74:	2200      	movs	r2, #0
 8006c76:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	4649      	mov	r1, r9
 8006c7e:	4614      	mov	r4, r2
 8006c80:	461d      	mov	r5, r3
 8006c82:	f7f9 fcc1 	bl	8000608 <__aeabi_dmul>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	4639      	mov	r1, r7
 8006c8e:	f7f9 fb03 	bl	8000298 <__aeabi_dsub>
 8006c92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c96:	4606      	mov	r6, r0
 8006c98:	460f      	mov	r7, r1
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	f7f9 fafb 	bl	8000298 <__aeabi_dsub>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006caa:	f7f9 faf5 	bl	8000298 <__aeabi_dsub>
 8006cae:	4642      	mov	r2, r8
 8006cb0:	464b      	mov	r3, r9
 8006cb2:	f7f9 fca9 	bl	8000608 <__aeabi_dmul>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4630      	mov	r0, r6
 8006cbc:	4639      	mov	r1, r7
 8006cbe:	f7f9 faeb 	bl	8000298 <__aeabi_dsub>
 8006cc2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006cc6:	f7f9 fc9f 	bl	8000608 <__aeabi_dmul>
 8006cca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006cd2:	4610      	mov	r0, r2
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	f7f9 fc97 	bl	8000608 <__aeabi_dmul>
 8006cda:	a37b      	add	r3, pc, #492	; (adr r3, 8006ec8 <__ieee754_pow+0x6d0>)
 8006cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	460d      	mov	r5, r1
 8006ce4:	f7f9 fc90 	bl	8000608 <__aeabi_dmul>
 8006ce8:	a379      	add	r3, pc, #484	; (adr r3, 8006ed0 <__ieee754_pow+0x6d8>)
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f7f9 fad5 	bl	800029c <__adddf3>
 8006cf2:	4622      	mov	r2, r4
 8006cf4:	462b      	mov	r3, r5
 8006cf6:	f7f9 fc87 	bl	8000608 <__aeabi_dmul>
 8006cfa:	a377      	add	r3, pc, #476	; (adr r3, 8006ed8 <__ieee754_pow+0x6e0>)
 8006cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d00:	f7f9 facc 	bl	800029c <__adddf3>
 8006d04:	4622      	mov	r2, r4
 8006d06:	462b      	mov	r3, r5
 8006d08:	f7f9 fc7e 	bl	8000608 <__aeabi_dmul>
 8006d0c:	a374      	add	r3, pc, #464	; (adr r3, 8006ee0 <__ieee754_pow+0x6e8>)
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	f7f9 fac3 	bl	800029c <__adddf3>
 8006d16:	4622      	mov	r2, r4
 8006d18:	462b      	mov	r3, r5
 8006d1a:	f7f9 fc75 	bl	8000608 <__aeabi_dmul>
 8006d1e:	a372      	add	r3, pc, #456	; (adr r3, 8006ee8 <__ieee754_pow+0x6f0>)
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	f7f9 faba 	bl	800029c <__adddf3>
 8006d28:	4622      	mov	r2, r4
 8006d2a:	462b      	mov	r3, r5
 8006d2c:	f7f9 fc6c 	bl	8000608 <__aeabi_dmul>
 8006d30:	a36f      	add	r3, pc, #444	; (adr r3, 8006ef0 <__ieee754_pow+0x6f8>)
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	f7f9 fab1 	bl	800029c <__adddf3>
 8006d3a:	4622      	mov	r2, r4
 8006d3c:	4606      	mov	r6, r0
 8006d3e:	460f      	mov	r7, r1
 8006d40:	462b      	mov	r3, r5
 8006d42:	4620      	mov	r0, r4
 8006d44:	4629      	mov	r1, r5
 8006d46:	f7f9 fc5f 	bl	8000608 <__aeabi_dmul>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4630      	mov	r0, r6
 8006d50:	4639      	mov	r1, r7
 8006d52:	f7f9 fc59 	bl	8000608 <__aeabi_dmul>
 8006d56:	4642      	mov	r2, r8
 8006d58:	4604      	mov	r4, r0
 8006d5a:	460d      	mov	r5, r1
 8006d5c:	464b      	mov	r3, r9
 8006d5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d62:	f7f9 fa9b 	bl	800029c <__adddf3>
 8006d66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d6a:	f7f9 fc4d 	bl	8000608 <__aeabi_dmul>
 8006d6e:	4622      	mov	r2, r4
 8006d70:	462b      	mov	r3, r5
 8006d72:	f7f9 fa93 	bl	800029c <__adddf3>
 8006d76:	4642      	mov	r2, r8
 8006d78:	4606      	mov	r6, r0
 8006d7a:	460f      	mov	r7, r1
 8006d7c:	464b      	mov	r3, r9
 8006d7e:	4640      	mov	r0, r8
 8006d80:	4649      	mov	r1, r9
 8006d82:	f7f9 fc41 	bl	8000608 <__aeabi_dmul>
 8006d86:	2200      	movs	r2, #0
 8006d88:	4b68      	ldr	r3, [pc, #416]	; (8006f2c <__ieee754_pow+0x734>)
 8006d8a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006d8e:	f7f9 fa85 	bl	800029c <__adddf3>
 8006d92:	4632      	mov	r2, r6
 8006d94:	463b      	mov	r3, r7
 8006d96:	f7f9 fa81 	bl	800029c <__adddf3>
 8006d9a:	9802      	ldr	r0, [sp, #8]
 8006d9c:	460d      	mov	r5, r1
 8006d9e:	4604      	mov	r4, r0
 8006da0:	4602      	mov	r2, r0
 8006da2:	460b      	mov	r3, r1
 8006da4:	4640      	mov	r0, r8
 8006da6:	4649      	mov	r1, r9
 8006da8:	f7f9 fc2e 	bl	8000608 <__aeabi_dmul>
 8006dac:	2200      	movs	r2, #0
 8006dae:	4680      	mov	r8, r0
 8006db0:	4689      	mov	r9, r1
 8006db2:	4b5e      	ldr	r3, [pc, #376]	; (8006f2c <__ieee754_pow+0x734>)
 8006db4:	4620      	mov	r0, r4
 8006db6:	4629      	mov	r1, r5
 8006db8:	f7f9 fa6e 	bl	8000298 <__aeabi_dsub>
 8006dbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006dc0:	f7f9 fa6a 	bl	8000298 <__aeabi_dsub>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	4630      	mov	r0, r6
 8006dca:	4639      	mov	r1, r7
 8006dcc:	f7f9 fa64 	bl	8000298 <__aeabi_dsub>
 8006dd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dd4:	f7f9 fc18 	bl	8000608 <__aeabi_dmul>
 8006dd8:	4622      	mov	r2, r4
 8006dda:	4606      	mov	r6, r0
 8006ddc:	460f      	mov	r7, r1
 8006dde:	462b      	mov	r3, r5
 8006de0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006de4:	f7f9 fc10 	bl	8000608 <__aeabi_dmul>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4630      	mov	r0, r6
 8006dee:	4639      	mov	r1, r7
 8006df0:	f7f9 fa54 	bl	800029c <__adddf3>
 8006df4:	4606      	mov	r6, r0
 8006df6:	460f      	mov	r7, r1
 8006df8:	4602      	mov	r2, r0
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	4649      	mov	r1, r9
 8006e00:	f7f9 fa4c 	bl	800029c <__adddf3>
 8006e04:	9802      	ldr	r0, [sp, #8]
 8006e06:	a33c      	add	r3, pc, #240	; (adr r3, 8006ef8 <__ieee754_pow+0x700>)
 8006e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	460d      	mov	r5, r1
 8006e10:	f7f9 fbfa 	bl	8000608 <__aeabi_dmul>
 8006e14:	4642      	mov	r2, r8
 8006e16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e1a:	464b      	mov	r3, r9
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	4629      	mov	r1, r5
 8006e20:	f7f9 fa3a 	bl	8000298 <__aeabi_dsub>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4630      	mov	r0, r6
 8006e2a:	4639      	mov	r1, r7
 8006e2c:	f7f9 fa34 	bl	8000298 <__aeabi_dsub>
 8006e30:	a333      	add	r3, pc, #204	; (adr r3, 8006f00 <__ieee754_pow+0x708>)
 8006e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e36:	f7f9 fbe7 	bl	8000608 <__aeabi_dmul>
 8006e3a:	a333      	add	r3, pc, #204	; (adr r3, 8006f08 <__ieee754_pow+0x710>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	4606      	mov	r6, r0
 8006e42:	460f      	mov	r7, r1
 8006e44:	4620      	mov	r0, r4
 8006e46:	4629      	mov	r1, r5
 8006e48:	f7f9 fbde 	bl	8000608 <__aeabi_dmul>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4630      	mov	r0, r6
 8006e52:	4639      	mov	r1, r7
 8006e54:	f7f9 fa22 	bl	800029c <__adddf3>
 8006e58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e5a:	4b35      	ldr	r3, [pc, #212]	; (8006f30 <__ieee754_pow+0x738>)
 8006e5c:	4413      	add	r3, r2
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	f7f9 fa1b 	bl	800029c <__adddf3>
 8006e66:	4604      	mov	r4, r0
 8006e68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e6a:	460d      	mov	r5, r1
 8006e6c:	f7f9 fb62 	bl	8000534 <__aeabi_i2d>
 8006e70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e72:	4b30      	ldr	r3, [pc, #192]	; (8006f34 <__ieee754_pow+0x73c>)
 8006e74:	4413      	add	r3, r2
 8006e76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	460f      	mov	r7, r1
 8006e7e:	4622      	mov	r2, r4
 8006e80:	462b      	mov	r3, r5
 8006e82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e86:	f7f9 fa09 	bl	800029c <__adddf3>
 8006e8a:	4642      	mov	r2, r8
 8006e8c:	464b      	mov	r3, r9
 8006e8e:	f7f9 fa05 	bl	800029c <__adddf3>
 8006e92:	4632      	mov	r2, r6
 8006e94:	463b      	mov	r3, r7
 8006e96:	f7f9 fa01 	bl	800029c <__adddf3>
 8006e9a:	9802      	ldr	r0, [sp, #8]
 8006e9c:	4632      	mov	r2, r6
 8006e9e:	463b      	mov	r3, r7
 8006ea0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ea4:	f7f9 f9f8 	bl	8000298 <__aeabi_dsub>
 8006ea8:	4642      	mov	r2, r8
 8006eaa:	464b      	mov	r3, r9
 8006eac:	f7f9 f9f4 	bl	8000298 <__aeabi_dsub>
 8006eb0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006eb4:	e607      	b.n	8006ac6 <__ieee754_pow+0x2ce>
 8006eb6:	f04f 0a01 	mov.w	sl, #1
 8006eba:	e6a5      	b.n	8006c08 <__ieee754_pow+0x410>
 8006ebc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006f10 <__ieee754_pow+0x718>
 8006ec0:	e613      	b.n	8006aea <__ieee754_pow+0x2f2>
 8006ec2:	bf00      	nop
 8006ec4:	f3af 8000 	nop.w
 8006ec8:	4a454eef 	.word	0x4a454eef
 8006ecc:	3fca7e28 	.word	0x3fca7e28
 8006ed0:	93c9db65 	.word	0x93c9db65
 8006ed4:	3fcd864a 	.word	0x3fcd864a
 8006ed8:	a91d4101 	.word	0xa91d4101
 8006edc:	3fd17460 	.word	0x3fd17460
 8006ee0:	518f264d 	.word	0x518f264d
 8006ee4:	3fd55555 	.word	0x3fd55555
 8006ee8:	db6fabff 	.word	0xdb6fabff
 8006eec:	3fdb6db6 	.word	0x3fdb6db6
 8006ef0:	33333303 	.word	0x33333303
 8006ef4:	3fe33333 	.word	0x3fe33333
 8006ef8:	e0000000 	.word	0xe0000000
 8006efc:	3feec709 	.word	0x3feec709
 8006f00:	dc3a03fd 	.word	0xdc3a03fd
 8006f04:	3feec709 	.word	0x3feec709
 8006f08:	145b01f5 	.word	0x145b01f5
 8006f0c:	be3e2fe0 	.word	0xbe3e2fe0
 8006f10:	00000000 	.word	0x00000000
 8006f14:	3ff00000 	.word	0x3ff00000
 8006f18:	43400000 	.word	0x43400000
 8006f1c:	0003988e 	.word	0x0003988e
 8006f20:	000bb679 	.word	0x000bb679
 8006f24:	08007778 	.word	0x08007778
 8006f28:	3ff00000 	.word	0x3ff00000
 8006f2c:	40080000 	.word	0x40080000
 8006f30:	08007798 	.word	0x08007798
 8006f34:	08007788 	.word	0x08007788
 8006f38:	a3b4      	add	r3, pc, #720	; (adr r3, 800720c <__ieee754_pow+0xa14>)
 8006f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3e:	4640      	mov	r0, r8
 8006f40:	4649      	mov	r1, r9
 8006f42:	f7f9 f9ab 	bl	800029c <__adddf3>
 8006f46:	4622      	mov	r2, r4
 8006f48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f4c:	462b      	mov	r3, r5
 8006f4e:	4630      	mov	r0, r6
 8006f50:	4639      	mov	r1, r7
 8006f52:	f7f9 f9a1 	bl	8000298 <__aeabi_dsub>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f5e:	f7f9 fde3 	bl	8000b28 <__aeabi_dcmpgt>
 8006f62:	2800      	cmp	r0, #0
 8006f64:	f47f adfe 	bne.w	8006b64 <__ieee754_pow+0x36c>
 8006f68:	4aa3      	ldr	r2, [pc, #652]	; (80071f8 <__ieee754_pow+0xa00>)
 8006f6a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	f340 810a 	ble.w	8007188 <__ieee754_pow+0x990>
 8006f74:	151b      	asrs	r3, r3, #20
 8006f76:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006f7a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006f7e:	fa4a f303 	asr.w	r3, sl, r3
 8006f82:	445b      	add	r3, fp
 8006f84:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006f88:	4e9c      	ldr	r6, [pc, #624]	; (80071fc <__ieee754_pow+0xa04>)
 8006f8a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006f8e:	4116      	asrs	r6, r2
 8006f90:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006f94:	2000      	movs	r0, #0
 8006f96:	ea23 0106 	bic.w	r1, r3, r6
 8006f9a:	f1c2 0214 	rsb	r2, r2, #20
 8006f9e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006fa2:	fa4a fa02 	asr.w	sl, sl, r2
 8006fa6:	f1bb 0f00 	cmp.w	fp, #0
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	4620      	mov	r0, r4
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	bfb8      	it	lt
 8006fb4:	f1ca 0a00 	rsblt	sl, sl, #0
 8006fb8:	f7f9 f96e 	bl	8000298 <__aeabi_dsub>
 8006fbc:	e9cd 0100 	strd	r0, r1, [sp]
 8006fc0:	4642      	mov	r2, r8
 8006fc2:	464b      	mov	r3, r9
 8006fc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fc8:	f7f9 f968 	bl	800029c <__adddf3>
 8006fcc:	2000      	movs	r0, #0
 8006fce:	a378      	add	r3, pc, #480	; (adr r3, 80071b0 <__ieee754_pow+0x9b8>)
 8006fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	460d      	mov	r5, r1
 8006fd8:	f7f9 fb16 	bl	8000608 <__aeabi_dmul>
 8006fdc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fe0:	4606      	mov	r6, r0
 8006fe2:	460f      	mov	r7, r1
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	f7f9 f956 	bl	8000298 <__aeabi_dsub>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	f7f9 f950 	bl	8000298 <__aeabi_dsub>
 8006ff8:	a36f      	add	r3, pc, #444	; (adr r3, 80071b8 <__ieee754_pow+0x9c0>)
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	f7f9 fb03 	bl	8000608 <__aeabi_dmul>
 8007002:	a36f      	add	r3, pc, #444	; (adr r3, 80071c0 <__ieee754_pow+0x9c8>)
 8007004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007008:	4680      	mov	r8, r0
 800700a:	4689      	mov	r9, r1
 800700c:	4620      	mov	r0, r4
 800700e:	4629      	mov	r1, r5
 8007010:	f7f9 fafa 	bl	8000608 <__aeabi_dmul>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	4640      	mov	r0, r8
 800701a:	4649      	mov	r1, r9
 800701c:	f7f9 f93e 	bl	800029c <__adddf3>
 8007020:	4604      	mov	r4, r0
 8007022:	460d      	mov	r5, r1
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	4630      	mov	r0, r6
 800702a:	4639      	mov	r1, r7
 800702c:	f7f9 f936 	bl	800029c <__adddf3>
 8007030:	4632      	mov	r2, r6
 8007032:	463b      	mov	r3, r7
 8007034:	4680      	mov	r8, r0
 8007036:	4689      	mov	r9, r1
 8007038:	f7f9 f92e 	bl	8000298 <__aeabi_dsub>
 800703c:	4602      	mov	r2, r0
 800703e:	460b      	mov	r3, r1
 8007040:	4620      	mov	r0, r4
 8007042:	4629      	mov	r1, r5
 8007044:	f7f9 f928 	bl	8000298 <__aeabi_dsub>
 8007048:	4642      	mov	r2, r8
 800704a:	4606      	mov	r6, r0
 800704c:	460f      	mov	r7, r1
 800704e:	464b      	mov	r3, r9
 8007050:	4640      	mov	r0, r8
 8007052:	4649      	mov	r1, r9
 8007054:	f7f9 fad8 	bl	8000608 <__aeabi_dmul>
 8007058:	a35b      	add	r3, pc, #364	; (adr r3, 80071c8 <__ieee754_pow+0x9d0>)
 800705a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705e:	4604      	mov	r4, r0
 8007060:	460d      	mov	r5, r1
 8007062:	f7f9 fad1 	bl	8000608 <__aeabi_dmul>
 8007066:	a35a      	add	r3, pc, #360	; (adr r3, 80071d0 <__ieee754_pow+0x9d8>)
 8007068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706c:	f7f9 f914 	bl	8000298 <__aeabi_dsub>
 8007070:	4622      	mov	r2, r4
 8007072:	462b      	mov	r3, r5
 8007074:	f7f9 fac8 	bl	8000608 <__aeabi_dmul>
 8007078:	a357      	add	r3, pc, #348	; (adr r3, 80071d8 <__ieee754_pow+0x9e0>)
 800707a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707e:	f7f9 f90d 	bl	800029c <__adddf3>
 8007082:	4622      	mov	r2, r4
 8007084:	462b      	mov	r3, r5
 8007086:	f7f9 fabf 	bl	8000608 <__aeabi_dmul>
 800708a:	a355      	add	r3, pc, #340	; (adr r3, 80071e0 <__ieee754_pow+0x9e8>)
 800708c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007090:	f7f9 f902 	bl	8000298 <__aeabi_dsub>
 8007094:	4622      	mov	r2, r4
 8007096:	462b      	mov	r3, r5
 8007098:	f7f9 fab6 	bl	8000608 <__aeabi_dmul>
 800709c:	a352      	add	r3, pc, #328	; (adr r3, 80071e8 <__ieee754_pow+0x9f0>)
 800709e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a2:	f7f9 f8fb 	bl	800029c <__adddf3>
 80070a6:	4622      	mov	r2, r4
 80070a8:	462b      	mov	r3, r5
 80070aa:	f7f9 faad 	bl	8000608 <__aeabi_dmul>
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	4640      	mov	r0, r8
 80070b4:	4649      	mov	r1, r9
 80070b6:	f7f9 f8ef 	bl	8000298 <__aeabi_dsub>
 80070ba:	4604      	mov	r4, r0
 80070bc:	460d      	mov	r5, r1
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	4640      	mov	r0, r8
 80070c4:	4649      	mov	r1, r9
 80070c6:	f7f9 fa9f 	bl	8000608 <__aeabi_dmul>
 80070ca:	2200      	movs	r2, #0
 80070cc:	e9cd 0100 	strd	r0, r1, [sp]
 80070d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80070d4:	4620      	mov	r0, r4
 80070d6:	4629      	mov	r1, r5
 80070d8:	f7f9 f8de 	bl	8000298 <__aeabi_dsub>
 80070dc:	4602      	mov	r2, r0
 80070de:	460b      	mov	r3, r1
 80070e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070e4:	f7f9 fbba 	bl	800085c <__aeabi_ddiv>
 80070e8:	4632      	mov	r2, r6
 80070ea:	4604      	mov	r4, r0
 80070ec:	460d      	mov	r5, r1
 80070ee:	463b      	mov	r3, r7
 80070f0:	4640      	mov	r0, r8
 80070f2:	4649      	mov	r1, r9
 80070f4:	f7f9 fa88 	bl	8000608 <__aeabi_dmul>
 80070f8:	4632      	mov	r2, r6
 80070fa:	463b      	mov	r3, r7
 80070fc:	f7f9 f8ce 	bl	800029c <__adddf3>
 8007100:	4602      	mov	r2, r0
 8007102:	460b      	mov	r3, r1
 8007104:	4620      	mov	r0, r4
 8007106:	4629      	mov	r1, r5
 8007108:	f7f9 f8c6 	bl	8000298 <__aeabi_dsub>
 800710c:	4642      	mov	r2, r8
 800710e:	464b      	mov	r3, r9
 8007110:	f7f9 f8c2 	bl	8000298 <__aeabi_dsub>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	2000      	movs	r0, #0
 800711a:	4939      	ldr	r1, [pc, #228]	; (8007200 <__ieee754_pow+0xa08>)
 800711c:	f7f9 f8bc 	bl	8000298 <__aeabi_dsub>
 8007120:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007124:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007128:	4602      	mov	r2, r0
 800712a:	460b      	mov	r3, r1
 800712c:	da2f      	bge.n	800718e <__ieee754_pow+0x996>
 800712e:	4650      	mov	r0, sl
 8007130:	ec43 2b10 	vmov	d0, r2, r3
 8007134:	f000 f9c0 	bl	80074b8 <scalbn>
 8007138:	ec51 0b10 	vmov	r0, r1, d0
 800713c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007140:	f7ff bbf1 	b.w	8006926 <__ieee754_pow+0x12e>
 8007144:	4b2f      	ldr	r3, [pc, #188]	; (8007204 <__ieee754_pow+0xa0c>)
 8007146:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800714a:	429e      	cmp	r6, r3
 800714c:	f77f af0c 	ble.w	8006f68 <__ieee754_pow+0x770>
 8007150:	4b2d      	ldr	r3, [pc, #180]	; (8007208 <__ieee754_pow+0xa10>)
 8007152:	440b      	add	r3, r1
 8007154:	4303      	orrs	r3, r0
 8007156:	d00b      	beq.n	8007170 <__ieee754_pow+0x978>
 8007158:	a325      	add	r3, pc, #148	; (adr r3, 80071f0 <__ieee754_pow+0x9f8>)
 800715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007162:	f7f9 fa51 	bl	8000608 <__aeabi_dmul>
 8007166:	a322      	add	r3, pc, #136	; (adr r3, 80071f0 <__ieee754_pow+0x9f8>)
 8007168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716c:	f7ff bbdb 	b.w	8006926 <__ieee754_pow+0x12e>
 8007170:	4622      	mov	r2, r4
 8007172:	462b      	mov	r3, r5
 8007174:	f7f9 f890 	bl	8000298 <__aeabi_dsub>
 8007178:	4642      	mov	r2, r8
 800717a:	464b      	mov	r3, r9
 800717c:	f7f9 fcca 	bl	8000b14 <__aeabi_dcmpge>
 8007180:	2800      	cmp	r0, #0
 8007182:	f43f aef1 	beq.w	8006f68 <__ieee754_pow+0x770>
 8007186:	e7e7      	b.n	8007158 <__ieee754_pow+0x960>
 8007188:	f04f 0a00 	mov.w	sl, #0
 800718c:	e718      	b.n	8006fc0 <__ieee754_pow+0x7c8>
 800718e:	4621      	mov	r1, r4
 8007190:	e7d4      	b.n	800713c <__ieee754_pow+0x944>
 8007192:	2000      	movs	r0, #0
 8007194:	491a      	ldr	r1, [pc, #104]	; (8007200 <__ieee754_pow+0xa08>)
 8007196:	f7ff bb8f 	b.w	80068b8 <__ieee754_pow+0xc0>
 800719a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800719e:	f7ff bb8b 	b.w	80068b8 <__ieee754_pow+0xc0>
 80071a2:	4630      	mov	r0, r6
 80071a4:	4639      	mov	r1, r7
 80071a6:	f7ff bb87 	b.w	80068b8 <__ieee754_pow+0xc0>
 80071aa:	4693      	mov	fp, r2
 80071ac:	f7ff bb98 	b.w	80068e0 <__ieee754_pow+0xe8>
 80071b0:	00000000 	.word	0x00000000
 80071b4:	3fe62e43 	.word	0x3fe62e43
 80071b8:	fefa39ef 	.word	0xfefa39ef
 80071bc:	3fe62e42 	.word	0x3fe62e42
 80071c0:	0ca86c39 	.word	0x0ca86c39
 80071c4:	be205c61 	.word	0xbe205c61
 80071c8:	72bea4d0 	.word	0x72bea4d0
 80071cc:	3e663769 	.word	0x3e663769
 80071d0:	c5d26bf1 	.word	0xc5d26bf1
 80071d4:	3ebbbd41 	.word	0x3ebbbd41
 80071d8:	af25de2c 	.word	0xaf25de2c
 80071dc:	3f11566a 	.word	0x3f11566a
 80071e0:	16bebd93 	.word	0x16bebd93
 80071e4:	3f66c16c 	.word	0x3f66c16c
 80071e8:	5555553e 	.word	0x5555553e
 80071ec:	3fc55555 	.word	0x3fc55555
 80071f0:	c2f8f359 	.word	0xc2f8f359
 80071f4:	01a56e1f 	.word	0x01a56e1f
 80071f8:	3fe00000 	.word	0x3fe00000
 80071fc:	000fffff 	.word	0x000fffff
 8007200:	3ff00000 	.word	0x3ff00000
 8007204:	4090cbff 	.word	0x4090cbff
 8007208:	3f6f3400 	.word	0x3f6f3400
 800720c:	652b82fe 	.word	0x652b82fe
 8007210:	3c971547 	.word	0x3c971547

08007214 <__ieee754_sqrt>:
 8007214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007218:	4955      	ldr	r1, [pc, #340]	; (8007370 <__ieee754_sqrt+0x15c>)
 800721a:	ec55 4b10 	vmov	r4, r5, d0
 800721e:	43a9      	bics	r1, r5
 8007220:	462b      	mov	r3, r5
 8007222:	462a      	mov	r2, r5
 8007224:	d112      	bne.n	800724c <__ieee754_sqrt+0x38>
 8007226:	ee10 2a10 	vmov	r2, s0
 800722a:	ee10 0a10 	vmov	r0, s0
 800722e:	4629      	mov	r1, r5
 8007230:	f7f9 f9ea 	bl	8000608 <__aeabi_dmul>
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	4620      	mov	r0, r4
 800723a:	4629      	mov	r1, r5
 800723c:	f7f9 f82e 	bl	800029c <__adddf3>
 8007240:	4604      	mov	r4, r0
 8007242:	460d      	mov	r5, r1
 8007244:	ec45 4b10 	vmov	d0, r4, r5
 8007248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800724c:	2d00      	cmp	r5, #0
 800724e:	ee10 0a10 	vmov	r0, s0
 8007252:	4621      	mov	r1, r4
 8007254:	dc0f      	bgt.n	8007276 <__ieee754_sqrt+0x62>
 8007256:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800725a:	4330      	orrs	r0, r6
 800725c:	d0f2      	beq.n	8007244 <__ieee754_sqrt+0x30>
 800725e:	b155      	cbz	r5, 8007276 <__ieee754_sqrt+0x62>
 8007260:	ee10 2a10 	vmov	r2, s0
 8007264:	4620      	mov	r0, r4
 8007266:	4629      	mov	r1, r5
 8007268:	f7f9 f816 	bl	8000298 <__aeabi_dsub>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	f7f9 faf4 	bl	800085c <__aeabi_ddiv>
 8007274:	e7e4      	b.n	8007240 <__ieee754_sqrt+0x2c>
 8007276:	151b      	asrs	r3, r3, #20
 8007278:	d073      	beq.n	8007362 <__ieee754_sqrt+0x14e>
 800727a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800727e:	07dd      	lsls	r5, r3, #31
 8007280:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007284:	bf48      	it	mi
 8007286:	0fc8      	lsrmi	r0, r1, #31
 8007288:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800728c:	bf44      	itt	mi
 800728e:	0049      	lslmi	r1, r1, #1
 8007290:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8007294:	2500      	movs	r5, #0
 8007296:	1058      	asrs	r0, r3, #1
 8007298:	0fcb      	lsrs	r3, r1, #31
 800729a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800729e:	0049      	lsls	r1, r1, #1
 80072a0:	2316      	movs	r3, #22
 80072a2:	462c      	mov	r4, r5
 80072a4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80072a8:	19a7      	adds	r7, r4, r6
 80072aa:	4297      	cmp	r7, r2
 80072ac:	bfde      	ittt	le
 80072ae:	19bc      	addle	r4, r7, r6
 80072b0:	1bd2      	suble	r2, r2, r7
 80072b2:	19ad      	addle	r5, r5, r6
 80072b4:	0fcf      	lsrs	r7, r1, #31
 80072b6:	3b01      	subs	r3, #1
 80072b8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80072bc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80072c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80072c4:	d1f0      	bne.n	80072a8 <__ieee754_sqrt+0x94>
 80072c6:	f04f 0c20 	mov.w	ip, #32
 80072ca:	469e      	mov	lr, r3
 80072cc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80072d0:	42a2      	cmp	r2, r4
 80072d2:	eb06 070e 	add.w	r7, r6, lr
 80072d6:	dc02      	bgt.n	80072de <__ieee754_sqrt+0xca>
 80072d8:	d112      	bne.n	8007300 <__ieee754_sqrt+0xec>
 80072da:	428f      	cmp	r7, r1
 80072dc:	d810      	bhi.n	8007300 <__ieee754_sqrt+0xec>
 80072de:	2f00      	cmp	r7, #0
 80072e0:	eb07 0e06 	add.w	lr, r7, r6
 80072e4:	da42      	bge.n	800736c <__ieee754_sqrt+0x158>
 80072e6:	f1be 0f00 	cmp.w	lr, #0
 80072ea:	db3f      	blt.n	800736c <__ieee754_sqrt+0x158>
 80072ec:	f104 0801 	add.w	r8, r4, #1
 80072f0:	1b12      	subs	r2, r2, r4
 80072f2:	428f      	cmp	r7, r1
 80072f4:	bf88      	it	hi
 80072f6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80072fa:	1bc9      	subs	r1, r1, r7
 80072fc:	4433      	add	r3, r6
 80072fe:	4644      	mov	r4, r8
 8007300:	0052      	lsls	r2, r2, #1
 8007302:	f1bc 0c01 	subs.w	ip, ip, #1
 8007306:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800730a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800730e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007312:	d1dd      	bne.n	80072d0 <__ieee754_sqrt+0xbc>
 8007314:	430a      	orrs	r2, r1
 8007316:	d006      	beq.n	8007326 <__ieee754_sqrt+0x112>
 8007318:	1c5c      	adds	r4, r3, #1
 800731a:	bf13      	iteet	ne
 800731c:	3301      	addne	r3, #1
 800731e:	3501      	addeq	r5, #1
 8007320:	4663      	moveq	r3, ip
 8007322:	f023 0301 	bicne.w	r3, r3, #1
 8007326:	106a      	asrs	r2, r5, #1
 8007328:	085b      	lsrs	r3, r3, #1
 800732a:	07e9      	lsls	r1, r5, #31
 800732c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007330:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007334:	bf48      	it	mi
 8007336:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800733a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800733e:	461c      	mov	r4, r3
 8007340:	e780      	b.n	8007244 <__ieee754_sqrt+0x30>
 8007342:	0aca      	lsrs	r2, r1, #11
 8007344:	3815      	subs	r0, #21
 8007346:	0549      	lsls	r1, r1, #21
 8007348:	2a00      	cmp	r2, #0
 800734a:	d0fa      	beq.n	8007342 <__ieee754_sqrt+0x12e>
 800734c:	02d6      	lsls	r6, r2, #11
 800734e:	d50a      	bpl.n	8007366 <__ieee754_sqrt+0x152>
 8007350:	f1c3 0420 	rsb	r4, r3, #32
 8007354:	fa21 f404 	lsr.w	r4, r1, r4
 8007358:	1e5d      	subs	r5, r3, #1
 800735a:	4099      	lsls	r1, r3
 800735c:	4322      	orrs	r2, r4
 800735e:	1b43      	subs	r3, r0, r5
 8007360:	e78b      	b.n	800727a <__ieee754_sqrt+0x66>
 8007362:	4618      	mov	r0, r3
 8007364:	e7f0      	b.n	8007348 <__ieee754_sqrt+0x134>
 8007366:	0052      	lsls	r2, r2, #1
 8007368:	3301      	adds	r3, #1
 800736a:	e7ef      	b.n	800734c <__ieee754_sqrt+0x138>
 800736c:	46a0      	mov	r8, r4
 800736e:	e7bf      	b.n	80072f0 <__ieee754_sqrt+0xdc>
 8007370:	7ff00000 	.word	0x7ff00000

08007374 <fabs>:
 8007374:	ec51 0b10 	vmov	r0, r1, d0
 8007378:	ee10 2a10 	vmov	r2, s0
 800737c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007380:	ec43 2b10 	vmov	d0, r2, r3
 8007384:	4770      	bx	lr

08007386 <finite>:
 8007386:	ee10 3a90 	vmov	r3, s1
 800738a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800738e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007392:	0fc0      	lsrs	r0, r0, #31
 8007394:	4770      	bx	lr

08007396 <matherr>:
 8007396:	2000      	movs	r0, #0
 8007398:	4770      	bx	lr
 800739a:	0000      	movs	r0, r0
 800739c:	0000      	movs	r0, r0
	...

080073a0 <nan>:
 80073a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80073a8 <nan+0x8>
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	00000000 	.word	0x00000000
 80073ac:	7ff80000 	.word	0x7ff80000

080073b0 <rint>:
 80073b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073b2:	ec51 0b10 	vmov	r0, r1, d0
 80073b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80073ba:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80073be:	2e13      	cmp	r6, #19
 80073c0:	460b      	mov	r3, r1
 80073c2:	ee10 4a10 	vmov	r4, s0
 80073c6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80073ca:	dc56      	bgt.n	800747a <rint+0xca>
 80073cc:	2e00      	cmp	r6, #0
 80073ce:	da2b      	bge.n	8007428 <rint+0x78>
 80073d0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80073d4:	4302      	orrs	r2, r0
 80073d6:	d023      	beq.n	8007420 <rint+0x70>
 80073d8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80073dc:	4302      	orrs	r2, r0
 80073de:	4254      	negs	r4, r2
 80073e0:	4314      	orrs	r4, r2
 80073e2:	0c4b      	lsrs	r3, r1, #17
 80073e4:	0b24      	lsrs	r4, r4, #12
 80073e6:	045b      	lsls	r3, r3, #17
 80073e8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80073ec:	ea44 0103 	orr.w	r1, r4, r3
 80073f0:	460b      	mov	r3, r1
 80073f2:	492f      	ldr	r1, [pc, #188]	; (80074b0 <rint+0x100>)
 80073f4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80073f8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80073fc:	4602      	mov	r2, r0
 80073fe:	4639      	mov	r1, r7
 8007400:	4630      	mov	r0, r6
 8007402:	f7f8 ff4b 	bl	800029c <__adddf3>
 8007406:	e9cd 0100 	strd	r0, r1, [sp]
 800740a:	463b      	mov	r3, r7
 800740c:	4632      	mov	r2, r6
 800740e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007412:	f7f8 ff41 	bl	8000298 <__aeabi_dsub>
 8007416:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800741a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800741e:	4639      	mov	r1, r7
 8007420:	ec41 0b10 	vmov	d0, r0, r1
 8007424:	b003      	add	sp, #12
 8007426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007428:	4a22      	ldr	r2, [pc, #136]	; (80074b4 <rint+0x104>)
 800742a:	4132      	asrs	r2, r6
 800742c:	ea01 0702 	and.w	r7, r1, r2
 8007430:	4307      	orrs	r7, r0
 8007432:	d0f5      	beq.n	8007420 <rint+0x70>
 8007434:	0852      	lsrs	r2, r2, #1
 8007436:	4011      	ands	r1, r2
 8007438:	430c      	orrs	r4, r1
 800743a:	d00b      	beq.n	8007454 <rint+0xa4>
 800743c:	ea23 0202 	bic.w	r2, r3, r2
 8007440:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007444:	2e13      	cmp	r6, #19
 8007446:	fa43 f306 	asr.w	r3, r3, r6
 800744a:	bf0c      	ite	eq
 800744c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007450:	2400      	movne	r4, #0
 8007452:	4313      	orrs	r3, r2
 8007454:	4916      	ldr	r1, [pc, #88]	; (80074b0 <rint+0x100>)
 8007456:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800745a:	4622      	mov	r2, r4
 800745c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007460:	4620      	mov	r0, r4
 8007462:	4629      	mov	r1, r5
 8007464:	f7f8 ff1a 	bl	800029c <__adddf3>
 8007468:	e9cd 0100 	strd	r0, r1, [sp]
 800746c:	4622      	mov	r2, r4
 800746e:	462b      	mov	r3, r5
 8007470:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007474:	f7f8 ff10 	bl	8000298 <__aeabi_dsub>
 8007478:	e7d2      	b.n	8007420 <rint+0x70>
 800747a:	2e33      	cmp	r6, #51	; 0x33
 800747c:	dd07      	ble.n	800748e <rint+0xde>
 800747e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007482:	d1cd      	bne.n	8007420 <rint+0x70>
 8007484:	ee10 2a10 	vmov	r2, s0
 8007488:	f7f8 ff08 	bl	800029c <__adddf3>
 800748c:	e7c8      	b.n	8007420 <rint+0x70>
 800748e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8007492:	f04f 32ff 	mov.w	r2, #4294967295
 8007496:	40f2      	lsrs	r2, r6
 8007498:	4210      	tst	r0, r2
 800749a:	d0c1      	beq.n	8007420 <rint+0x70>
 800749c:	0852      	lsrs	r2, r2, #1
 800749e:	4210      	tst	r0, r2
 80074a0:	bf1f      	itttt	ne
 80074a2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80074a6:	ea20 0202 	bicne.w	r2, r0, r2
 80074aa:	4134      	asrne	r4, r6
 80074ac:	4314      	orrne	r4, r2
 80074ae:	e7d1      	b.n	8007454 <rint+0xa4>
 80074b0:	080077a8 	.word	0x080077a8
 80074b4:	000fffff 	.word	0x000fffff

080074b8 <scalbn>:
 80074b8:	b570      	push	{r4, r5, r6, lr}
 80074ba:	ec55 4b10 	vmov	r4, r5, d0
 80074be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80074c2:	4606      	mov	r6, r0
 80074c4:	462b      	mov	r3, r5
 80074c6:	b9aa      	cbnz	r2, 80074f4 <scalbn+0x3c>
 80074c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80074cc:	4323      	orrs	r3, r4
 80074ce:	d03b      	beq.n	8007548 <scalbn+0x90>
 80074d0:	4b31      	ldr	r3, [pc, #196]	; (8007598 <scalbn+0xe0>)
 80074d2:	4629      	mov	r1, r5
 80074d4:	2200      	movs	r2, #0
 80074d6:	ee10 0a10 	vmov	r0, s0
 80074da:	f7f9 f895 	bl	8000608 <__aeabi_dmul>
 80074de:	4b2f      	ldr	r3, [pc, #188]	; (800759c <scalbn+0xe4>)
 80074e0:	429e      	cmp	r6, r3
 80074e2:	4604      	mov	r4, r0
 80074e4:	460d      	mov	r5, r1
 80074e6:	da12      	bge.n	800750e <scalbn+0x56>
 80074e8:	a327      	add	r3, pc, #156	; (adr r3, 8007588 <scalbn+0xd0>)
 80074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ee:	f7f9 f88b 	bl	8000608 <__aeabi_dmul>
 80074f2:	e009      	b.n	8007508 <scalbn+0x50>
 80074f4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80074f8:	428a      	cmp	r2, r1
 80074fa:	d10c      	bne.n	8007516 <scalbn+0x5e>
 80074fc:	ee10 2a10 	vmov	r2, s0
 8007500:	4620      	mov	r0, r4
 8007502:	4629      	mov	r1, r5
 8007504:	f7f8 feca 	bl	800029c <__adddf3>
 8007508:	4604      	mov	r4, r0
 800750a:	460d      	mov	r5, r1
 800750c:	e01c      	b.n	8007548 <scalbn+0x90>
 800750e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007512:	460b      	mov	r3, r1
 8007514:	3a36      	subs	r2, #54	; 0x36
 8007516:	4432      	add	r2, r6
 8007518:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800751c:	428a      	cmp	r2, r1
 800751e:	dd0b      	ble.n	8007538 <scalbn+0x80>
 8007520:	ec45 4b11 	vmov	d1, r4, r5
 8007524:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007590 <scalbn+0xd8>
 8007528:	f000 f83c 	bl	80075a4 <copysign>
 800752c:	a318      	add	r3, pc, #96	; (adr r3, 8007590 <scalbn+0xd8>)
 800752e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007532:	ec51 0b10 	vmov	r0, r1, d0
 8007536:	e7da      	b.n	80074ee <scalbn+0x36>
 8007538:	2a00      	cmp	r2, #0
 800753a:	dd08      	ble.n	800754e <scalbn+0x96>
 800753c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007540:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007544:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007548:	ec45 4b10 	vmov	d0, r4, r5
 800754c:	bd70      	pop	{r4, r5, r6, pc}
 800754e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007552:	da0d      	bge.n	8007570 <scalbn+0xb8>
 8007554:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007558:	429e      	cmp	r6, r3
 800755a:	ec45 4b11 	vmov	d1, r4, r5
 800755e:	dce1      	bgt.n	8007524 <scalbn+0x6c>
 8007560:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007588 <scalbn+0xd0>
 8007564:	f000 f81e 	bl	80075a4 <copysign>
 8007568:	a307      	add	r3, pc, #28	; (adr r3, 8007588 <scalbn+0xd0>)
 800756a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756e:	e7e0      	b.n	8007532 <scalbn+0x7a>
 8007570:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007574:	3236      	adds	r2, #54	; 0x36
 8007576:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800757a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800757e:	4620      	mov	r0, r4
 8007580:	4629      	mov	r1, r5
 8007582:	2200      	movs	r2, #0
 8007584:	4b06      	ldr	r3, [pc, #24]	; (80075a0 <scalbn+0xe8>)
 8007586:	e7b2      	b.n	80074ee <scalbn+0x36>
 8007588:	c2f8f359 	.word	0xc2f8f359
 800758c:	01a56e1f 	.word	0x01a56e1f
 8007590:	8800759c 	.word	0x8800759c
 8007594:	7e37e43c 	.word	0x7e37e43c
 8007598:	43500000 	.word	0x43500000
 800759c:	ffff3cb0 	.word	0xffff3cb0
 80075a0:	3c900000 	.word	0x3c900000

080075a4 <copysign>:
 80075a4:	ec51 0b10 	vmov	r0, r1, d0
 80075a8:	ee11 0a90 	vmov	r0, s3
 80075ac:	ee10 2a10 	vmov	r2, s0
 80075b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80075b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80075b8:	ea41 0300 	orr.w	r3, r1, r0
 80075bc:	ec43 2b10 	vmov	d0, r2, r3
 80075c0:	4770      	bx	lr
	...

080075c4 <_init>:
 80075c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c6:	bf00      	nop
 80075c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ca:	bc08      	pop	{r3}
 80075cc:	469e      	mov	lr, r3
 80075ce:	4770      	bx	lr

080075d0 <_fini>:
 80075d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d2:	bf00      	nop
 80075d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075d6:	bc08      	pop	{r3}
 80075d8:	469e      	mov	lr, r3
 80075da:	4770      	bx	lr
